{
  "beyla": {
    "beyla.ebpf": {
      "name": "beyla.ebpf",
      "doc": "`beyla.ebpf` component is used as a wrapper for [Grafana Beyla][] which uses [eBPF][] to automatically inspect application executables and the OS networking layer, and capture trace spans related to web transactions and Rate Errors Duration (RED) metrics for Linux HTTP/S and gRPC services.\nYou can configure the component to collect telemetry data from a specific port or executable path, and other criteria from Kubernetes metadata.\nThe component exposes metrics that can be collected by a Prometheus scrape component, and traces that can be forwarded to an OTEL exporter component.",
      "arguments": [
        {
          "name": "open_port",
          "type": "string",
          "doc": "The port of the running service for Beyla automatically instrumented with eBPF.",
          "required": false,
          "default": "\"\""
        },
        {
          "name": "executable_name",
          "type": "string",
          "doc": "The name of the executable to match for Beyla automatically instrumented with eBPF.",
          "required": false,
          "default": "\"\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect metrics of instrumented services with eBPF."
        }
      ],
      "blocks": [
        {
          "name": "routes",
          "doc": "Configures the routes to match HTTP paths into user-provided HTTP routes.",
          "required": false,
          "arguments": [
            {
              "name": "patterns",
              "type": "list(string)",
              "doc": "List of provided URL path patterns to set the http.route trace/metric property",
              "required": false,
              "default": "[]"
            },
            {
              "name": "ignore_patterns",
              "type": "list(string)",
              "doc": "List of provided URL path patterns to ignore from http.route trace/metric property.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "ignore_mode",
              "type": "string",
              "doc": "The mode to use when ignoring patterns.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "unmatched",
              "type": "string",
              "doc": "Specifies what to do when a trace HTTP path does not match any of the patterns entries.",
              "required": false,
              "default": "\"\""
            }
          ],
          "blocks": []
        },
        {
          "name": "attributes",
          "doc": "Configures the Beyla attributes for the component.",
          "required": false,
          "arguments": [
            {
              "name": "enable",
              "type": "string",
              "doc": "Enable the Kubernetes metadata decoration.",
              "required": false,
              "default": "false"
            }
          ],
          "blocks": [
            {
              "name": "kubernetes",
              "doc": "Configures decorating of the metrics and traces with Kubernetes metadata of the instrumented Pods.",
              "required": false,
              "arguments": [
                {
                  "name": "namespace",
                  "type": "string",
                  "doc": "Regular expression of Kubernetes Namespaces to match.",
                  "required": false,
                  "default": "\"\""
                },
                {
                  "name": "pod_name",
                  "type": "string",
                  "doc": "Regular expression of Kubernetes Pods to match.",
                  "required": false,
                  "default": "\"\""
                },
                {
                  "name": "deployment_name",
                  "type": "string",
                  "doc": "Regular expression of Kubernetes Deployments to match.",
                  "required": false,
                  "default": "\"\""
                },
                {
                  "name": "statefulset_name",
                  "type": "string",
                  "doc": "Regular expression of Kubernetes StatefulSets to match.",
                  "required": false,
                  "default": "\"\""
                },
                {
                  "name": "replicaset_name",
                  "type": "string",
                  "doc": "Regular expression of Kubernetes ReplicaSets to match.",
                  "required": false,
                  "default": "\"\""
                },
                {
                  "name": "daemonset_name",
                  "type": "string",
                  "doc": "Regular expression of Kubernetes DaemonSets to match.",
                  "required": false,
                  "default": "\"\""
                },
                {
                  "name": "owner_name",
                  "type": "string",
                  "doc": "Regular expression of Kubernetes owners of running Pods to match.",
                  "required": false,
                  "default": "\"\""
                },
                {
                  "name": "pod_labels",
                  "type": "map(string)",
                  "doc": "Key-value pairs of labels with keys matching Kubernetes Pods with the provided value as regular expression.",
                  "required": false,
                  "default": "{}"
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "discovery",
          "doc": "Configures the discovery for instrumentable processes matching a given criteria.",
          "required": false,
          "arguments": [],
          "blocks": [
            {
              "name": "services",
              "doc": "Configures the discovery for the component.",
              "required": false,
              "arguments": [
                {
                  "name": "name",
                  "type": "string",
                  "doc": "The name of the service to match.",
                  "required": false,
                  "default": "\"\""
                },
                {
                  "name": "namespace",
                  "type": "string",
                  "doc": "The namespace of the service to match.",
                  "required": false,
                  "default": "\"\""
                },
                {
                  "name": "open_ports",
                  "type": "string",
                  "doc": "The port of the running service for Beyla automatically instrumented with eBPF.",
                  "required": false,
                  "default": "\"\""
                },
                {
                  "name": "exe_path",
                  "type": "string",
                  "doc": "The path of the running service for Beyla automatically instrumented with eBPF.",
                  "required": false,
                  "default": "\"\""
                }
              ],
              "blocks": [
                {
                  "name": "kubernetes",
                  "doc": "Configures the discovery for the component.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "namespace",
                      "type": "string",
                      "doc": "Regular expression of Kubernetes Namespaces to match.",
                      "required": false,
                      "default": "\"\""
                    },
                    {
                      "name": "pod_name",
                      "type": "string",
                      "doc": "Regular expression of Kubernetes Pods to match.",
                      "required": false,
                      "default": "\"\""
                    },
                    {
                      "name": "deployment_name",
                      "type": "string",
                      "doc": "Regular expression of Kubernetes Deployments to match.",
                      "required": false,
                      "default": "\"\""
                    },
                    {
                      "name": "statefulset_name",
                      "type": "string",
                      "doc": "Regular expression of Kubernetes StatefulSets to match.",
                      "required": false,
                      "default": "\"\""
                    },
                    {
                      "name": "replicaset_name",
                      "type": "string",
                      "doc": "Regular expression of Kubernetes ReplicaSets to match.",
                      "required": false,
                      "default": "\"\""
                    },
                    {
                      "name": "daemonset_name",
                      "type": "string",
                      "doc": "Regular expression of Kubernetes DaemonSets to match.",
                      "required": false,
                      "default": "\"\""
                    },
                    {
                      "name": "owner_name",
                      "type": "string",
                      "doc": "Regular expression of Kubernetes owners of running Pods to match.",
                      "required": false,
                      "default": "\"\""
                    },
                    {
                      "name": "pod_labels",
                      "type": "map(string)",
                      "doc": "Key-value pairs of labels with keys matching Kubernetes Pods with the provided value as regular expression.",
                      "required": false,
                      "default": "{}"
                    }
                  ],
                  "blocks": []
                }
              ]
            }
          ]
        },
        {
          "name": "output",
          "doc": "Configures where to send received telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        }
      ]
    }
  },
  "discovery": {
    "discovery.azure": {
      "name": "discovery.azure",
      "doc": "`discovery.azure` discovers [Azure][] Virtual Machines and exposes them as targets.",
      "arguments": [
        {
          "name": "environment",
          "type": "string",
          "doc": "Azure environment.",
          "required": false,
          "default": "\"AzurePublicCloud\""
        },
        {
          "name": "port",
          "type": "number",
          "doc": "Port to be appended to the __address__ label for each target.",
          "required": false,
          "default": "80"
        },
        {
          "name": "subscription_id",
          "type": "string",
          "doc": "Azure subscription ID.",
          "required": false,
          "default": null
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "Interval at which to refresh the list of targets.",
          "required": false,
          "default": "5m"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the Azure API."
        }
      ],
      "blocks": [
        {
          "name": "oauth",
          "doc": "OAuth configuration for Azure API.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "OAuth client ID.",
              "required": true,
              "default": null
            },
            {
              "name": "client_secret",
              "type": "string",
              "doc": "OAuth client secret.",
              "required": true,
              "default": null
            },
            {
              "name": "tenant_id",
              "type": "string",
              "doc": "OAuth tenant ID.",
              "required": true,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "managed_identity",
          "doc": "Managed Identity configuration for Azure API.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "Managed Identity client ID.",
              "required": true,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "tls_config",
          "doc": "TLS configuration for requests to the Azure API.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.consul": {
      "name": "discovery.consul",
      "doc": "`discovery.consul` allows retrieving scrape targets from [Consul's Catalog API][].",
      "arguments": [
        {
          "name": "server",
          "type": "string",
          "doc": "Host and port of the Consul API.",
          "required": false,
          "default": "localhost:8500"
        },
        {
          "name": "token",
          "type": "secret",
          "doc": "Secret token used to access the Consul API.",
          "required": false,
          "default": null
        },
        {
          "name": "datacenter",
          "type": "string",
          "doc": "Datacenter to query. If not provided, the default is used.",
          "required": false,
          "default": null
        },
        {
          "name": "namespace",
          "type": "string",
          "doc": "Namespace to use. Only supported in Consul Enterprise.",
          "required": false,
          "default": null
        },
        {
          "name": "partition",
          "type": "string",
          "doc": "Admin partition to use. Only supported in Consul Enterprise.",
          "required": false,
          "default": null
        },
        {
          "name": "tag_separator",
          "type": "string",
          "doc": "The string by which Consul tags are joined into the tag label.",
          "required": false,
          "default": ","
        },
        {
          "name": "scheme",
          "type": "string",
          "doc": "The scheme to use when talking to Consul.",
          "required": false,
          "default": "http"
        },
        {
          "name": "username",
          "type": "string",
          "doc": "The username to use. Deprecated in favor of the basic_auth configuration.",
          "required": false,
          "default": null
        },
        {
          "name": "password",
          "type": "secret",
          "doc": "The password to use. Deprecated in favor of the basic_auth configuration.",
          "required": false,
          "default": null
        },
        {
          "name": "allow_stale",
          "type": "bool",
          "doc": "Allow stale Consul results. Reduces load on Consul. Refer to the [Consul documentation][] for more information.",
          "required": false,
          "default": "true"
        },
        {
          "name": "services",
          "type": "list(string)",
          "doc": "A list of services for which targets are retrieved. If omitted, all services are scraped.",
          "required": false,
          "default": null
        },
        {
          "name": "tags",
          "type": "list(string)",
          "doc": "An optional list of tags used to filter nodes for a given service. Services must contain all tags in the list.",
          "required": false,
          "default": null
        },
        {
          "name": "node_meta",
          "type": "map(string)",
          "doc": "Node metadata key/value pairs to filter nodes for a given service.",
          "required": false,
          "default": null
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "Frequency to refresh list of containers.",
          "required": false,
          "default": "\"30s\""
        },
        {
          "name": "bearer_token_file",
          "type": "string",
          "doc": "File containing a bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token",
          "type": "secret",
          "doc": "Bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the Consul catalog API."
        }
      ],
      "blocks": [
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "authorization",
          "doc": "Configure generic authorization to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "credentials_file",
              "type": "string",
              "doc": "File containing the secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "credentials",
              "type": "secret",
              "doc": "Secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Authorization type, for example, \"Bearer\".",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "oauth2",
          "doc": "Configure OAuth2 for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "OAuth2 client ID.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret_file",
              "type": "string",
              "doc": "File containing the OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret",
              "type": "secret",
              "doc": "OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint_params",
              "type": "map(string)",
              "doc": "Optional parameters to append to the token URL.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            },
            {
              "name": "scopes",
              "type": "list(string)",
              "doc": "List of scopes to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "token_url",
              "type": "string",
              "doc": "URL to fetch the token from.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.consulagent": {
      "name": "discovery.consulagent",
      "doc": "`discovery.consulagent` allows you to retrieve scrape targets from [Consul's Agent API][].\nOnly the services registered with the local agent running on the same host will be watched.\nThis is suitable for very large Consul clusters for which using the Catalog API would be too slow or resource intensive.",
      "arguments": [
        {
          "name": "server",
          "type": "string",
          "doc": "Host and port of the Consul Agent API.",
          "required": false,
          "default": "localhost:8500"
        },
        {
          "name": "token",
          "type": "secret",
          "doc": "Secret token used to access the Consul Agent API.",
          "required": false,
          "default": null
        },
        {
          "name": "datacenter",
          "type": "string",
          "doc": "Datacenter in which the Consul Agent is configured to run. If not provided, the datacenter is retrieved from the local Consul Agent.",
          "required": false,
          "default": null
        },
        {
          "name": "tag_separator",
          "type": "string",
          "doc": "The string by which Consul tags are joined into the tag label.",
          "required": false,
          "default": ","
        },
        {
          "name": "scheme",
          "type": "string",
          "doc": "The scheme to use when talking to the Consul Agent.",
          "required": false,
          "default": "http"
        },
        {
          "name": "username",
          "type": "string",
          "doc": "The username to use.",
          "required": false,
          "default": null
        },
        {
          "name": "password",
          "type": "secret",
          "doc": "The password to use.",
          "required": false,
          "default": null
        },
        {
          "name": "services",
          "type": "list(string)",
          "doc": "A list of services for which targets are retrieved. If omitted, all services are scraped.",
          "required": false,
          "default": null
        },
        {
          "name": "tags",
          "type": "list(string)",
          "doc": "An optional list of tags used to filter nodes for a given service. Services must contain all tags in the list.",
          "required": false,
          "default": null
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "Frequency to refresh list of containers.",
          "required": false,
          "default": "\"30s\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the Consul Agent API."
        }
      ],
      "blocks": [
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.digitalocean": {
      "name": "discovery.digitalocean",
      "doc": "`discovery.digitalocean` discovers [DigitalOcean][] Droplets and exposes them as targets.",
      "arguments": [
        {
          "name": "port",
          "type": "number",
          "doc": "Port to be appended to the __address__ label for each Droplet.",
          "required": false,
          "default": "80"
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "Frequency to refresh list of Droplets.",
          "required": false,
          "default": "\"1m\""
        },
        {
          "name": "bearer_token",
          "type": "secret",
          "doc": "Bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token_file",
          "type": "string",
          "doc": "File containing a bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the DigitalOcean API."
        }
      ],
      "blocks": []
    },
    "discovery.dns": {
      "name": "discovery.dns",
      "doc": "`discovery.dns` discovers scrape targets from DNS records.",
      "arguments": [
        {
          "name": "names",
          "type": "list(string)",
          "doc": "DNS names to look up.",
          "required": true,
          "default": null
        },
        {
          "name": "port",
          "type": "number",
          "doc": "Port to use for collecting metrics. Not used for SRV records.",
          "required": false,
          "default": "0"
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "How often to query DNS for updates.",
          "required": false,
          "default": "\"30s\""
        },
        {
          "name": "type",
          "type": "string",
          "doc": "Type of DNS record to query. Must be one of SRV, A, AAAA, MX, or NS.",
          "required": false,
          "default": "\"SRV\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the docker API."
        }
      ],
      "blocks": []
    },
    "discovery.docker": {
      "name": "discovery.docker",
      "doc": "`discovery.docker` discovers [Docker Engine][] containers and exposes them as targets.",
      "arguments": [
        {
          "name": "host",
          "type": "string",
          "doc": "Address of the Docker Daemon to connect to.",
          "required": true,
          "default": null
        },
        {
          "name": "port",
          "type": "number",
          "doc": "Port to use for collecting metrics when containers don't have any port mappings.",
          "required": false,
          "default": "80"
        },
        {
          "name": "host_networking_host",
          "type": "string",
          "doc": "Host to use if the container is in host networking mode.",
          "required": false,
          "default": "\"localhost\""
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "Frequency to refresh list of containers.",
          "required": false,
          "default": "\"1m\""
        },
        {
          "name": "bearer_token_file",
          "type": "string",
          "doc": "File containing a bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token",
          "type": "secret",
          "doc": "Bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the docker API."
        }
      ],
      "blocks": [
        {
          "name": "filter",
          "doc": "Filters discoverable resources.",
          "required": false,
          "arguments": [
            {
              "name": "name",
              "type": "string",
              "doc": "Filter name to use.",
              "required": true,
              "default": null
            },
            {
              "name": "values",
              "type": "list(string)",
              "doc": "Values to pass to the filter.",
              "required": true,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "authorization",
          "doc": "Configure generic authorization to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "credentials_file",
              "type": "string",
              "doc": "File containing the secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "credentials",
              "type": "secret",
              "doc": "Secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Authorization type, for example, \"Bearer\".",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "oauth2",
          "doc": "Configure OAuth2 for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "OAuth2 client ID.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret_file",
              "type": "string",
              "doc": "File containing the OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret",
              "type": "secret",
              "doc": "OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint_params",
              "type": "map(string)",
              "doc": "Optional parameters to append to the token URL.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            },
            {
              "name": "scopes",
              "type": "list(string)",
              "doc": "List of scopes to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "token_url",
              "type": "string",
              "doc": "URL to fetch the token from.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.dockerswarm": {
      "name": "discovery.dockerswarm",
      "doc": "`discovery.dockerswarm` allows you to retrieve scrape targets from [Docker Swarm](https://docs.docker.com/engine/swarm/key-concepts/).",
      "arguments": [
        {
          "name": "host",
          "type": "string",
          "doc": "Address of the Docker daemon.",
          "required": true,
          "default": null
        },
        {
          "name": "role",
          "type": "string",
          "doc": "Role of the targets to retrieve. Must be services, tasks, or nodes.",
          "required": true,
          "default": null
        },
        {
          "name": "port",
          "type": "number",
          "doc": "The port to scrape metrics from, when role is nodes, and for discovered tasks and services that don't have published ports.",
          "required": false,
          "default": "80"
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "Interval at which to refresh the list of targets.",
          "required": false,
          "default": "\"60s\""
        },
        {
          "name": "bearer_token_file",
          "type": "string",
          "doc": "File containing a bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token",
          "type": "secret",
          "doc": "Bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from Swarm."
        }
      ],
      "blocks": [
        {
          "name": "filter",
          "doc": "Optional filter to limit the discovery process to a subset of available resources.",
          "required": false,
          "arguments": [
            {
              "name": "name",
              "type": "string",
              "doc": "Name of the filter.",
              "required": true,
              "default": null
            },
            {
              "name": "values",
              "type": "list(string)",
              "doc": "List of values associated with the filter.",
              "required": true,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "authorization",
          "doc": "Configure generic authorization to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "credentials_file",
              "type": "string",
              "doc": "File containing the secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "credentials",
              "type": "secret",
              "doc": "Secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Authorization type, for example, \"Bearer\".",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "oauth2",
          "doc": "Configure OAuth2 for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "OAuth2 client ID.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret_file",
              "type": "string",
              "doc": "File containing the OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret",
              "type": "secret",
              "doc": "OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint_params",
              "type": "map(string)",
              "doc": "Optional parameters to append to the token URL.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            },
            {
              "name": "scopes",
              "type": "list(string)",
              "doc": "List of scopes to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "token_url",
              "type": "string",
              "doc": "URL to fetch the token from.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.ec2": {
      "name": "discovery.ec2",
      "doc": "`discovery.ec2` lets you retrieve scrape targets from EC2 instances. The private IP address is used by default, but you can change it to the public IP address using relabeling.",
      "arguments": [
        {
          "name": "endpoint",
          "type": "string",
          "doc": "Custom endpoint to be used.",
          "required": false,
          "default": null
        },
        {
          "name": "region",
          "type": "string",
          "doc": "The AWS region. If blank, the region from the instance metadata is used.",
          "required": false,
          "default": null
        },
        {
          "name": "access_key",
          "type": "string",
          "doc": "The AWS API key ID. If blank, the environment variable AWS_ACCESS_KEY_ID is used.",
          "required": false,
          "default": null
        },
        {
          "name": "secret_key",
          "type": "string",
          "doc": "The AWS API key secret. If blank, the environment variable AWS_SECRET_ACCESS_KEY is used.",
          "required": false,
          "default": null
        },
        {
          "name": "profile",
          "type": "string",
          "doc": "Named AWS profile used to connect to the API.",
          "required": false,
          "default": null
        },
        {
          "name": "role_arn",
          "type": "string",
          "doc": "AWS Role Amazon Resource Name (ARN), an alternative to using AWS API keys.",
          "required": false,
          "default": null
        },
        {
          "name": "refresh_interval",
          "type": "string",
          "doc": "Refresh interval to re-read the instance list.",
          "required": false,
          "default": "60s"
        },
        {
          "name": "port",
          "type": "int",
          "doc": "The port to scrape metrics from. If using the public IP address, this must instead be specified in the relabeling rule.",
          "required": false,
          "default": "80"
        },
        {
          "name": "bearer_token_file",
          "type": "string",
          "doc": "File containing a bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token",
          "type": "secret",
          "doc": "Bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of discovered EC2 targets."
        }
      ],
      "blocks": [
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "authorization",
          "doc": "Configure generic authorization to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "credentials_file",
              "type": "string",
              "doc": "File containing the secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "credentials",
              "type": "secret",
              "doc": "Secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Authorization type, for example, \"Bearer\".",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "filter",
          "doc": "Filters discoverable resources.",
          "required": false,
          "arguments": [
            {
              "name": "name",
              "type": "string",
              "doc": "Filter name to use.",
              "required": true,
              "default": null
            },
            {
              "name": "values",
              "type": "list(string)",
              "doc": "Values to pass to the filter.",
              "required": true,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "oauth2",
          "doc": "Configure OAuth2 for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "OAuth2 client ID.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret_file",
              "type": "string",
              "doc": "File containing the OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret",
              "type": "secret",
              "doc": "OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint_params",
              "type": "map(string)",
              "doc": "Optional parameters to append to the token URL.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            },
            {
              "name": "scopes",
              "type": "list(string)",
              "doc": "List of scopes to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "token_url",
              "type": "string",
              "doc": "URL to fetch the token from.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.eureka": {
      "name": "discovery.eureka",
      "doc": "`discovery.eureka` discovers instances in a [Eureka][] Registry and exposes them as targets.",
      "arguments": [
        {
          "name": "server",
          "type": "string",
          "doc": "Eureka server URL.",
          "required": true,
          "default": null
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "Interval at which to refresh the list of targets.",
          "required": false,
          "default": "30s"
        },
        {
          "name": "bearer_token_file",
          "type": "string",
          "doc": "File containing a bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token",
          "type": "secret",
          "doc": "Bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the Eureka API."
        }
      ],
      "blocks": [
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "authorization",
          "doc": "Configure generic authorization to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "credentials_file",
              "type": "string",
              "doc": "File containing the secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "credentials",
              "type": "secret",
              "doc": "Secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Authorization type, for example, \"Bearer\".",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "oauth2",
          "doc": "Configure OAuth2 for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "OAuth2 client ID.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret_file",
              "type": "string",
              "doc": "File containing the OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret",
              "type": "secret",
              "doc": "OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint_params",
              "type": "map(string)",
              "doc": "Optional parameters to append to the token URL.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            },
            {
              "name": "scopes",
              "type": "list(string)",
              "doc": "List of scopes to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "token_url",
              "type": "string",
              "doc": "URL to fetch the token from.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.file": {
      "name": "discovery.file",
      "doc": "`discovery.file` component was renamed to [local.file_match][], and `discovery.file` was repurposed to discover scrape targets from one or more files.",
      "arguments": [
        {
          "name": "files",
          "type": "list(string)",
          "doc": "Files to read and discover targets from.",
          "required": true,
          "default": null
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "How often to sync targets.",
          "required": false,
          "default": "\"5m\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the filesystem."
        }
      ],
      "blocks": []
    },
    "discovery.gce": {
      "name": "discovery.gce",
      "doc": "`discovery.gce` allows retrieving scrape targets from [Google Compute Engine][] (GCE) instances.\nThe private IP address is used by default, but may be changed to the public IP address with relabeling.",
      "arguments": [
        {
          "name": "project",
          "type": "string",
          "doc": "The GCP Project.",
          "required": true,
          "default": null
        },
        {
          "name": "zone",
          "type": "string",
          "doc": "The zone of the scrape targets.",
          "required": true,
          "default": null
        },
        {
          "name": "filter",
          "type": "string",
          "doc": "Filter can be used optionally to filter the instance list by other criteria.",
          "required": false,
          "default": null
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "Refresh interval to re-read the instance list.",
          "required": false,
          "default": "\"60s\""
        },
        {
          "name": "port",
          "type": "int",
          "doc": "The port to scrape metrics from. If using the public IP address, this must instead be specified in the relabeling rule.",
          "required": false,
          "default": "80"
        },
        {
          "name": "tag_separator",
          "type": "string",
          "doc": "The tag separator is used to separate the tags on concatenation.",
          "required": false,
          "default": "\",\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of discovered GCE targets."
        }
      ],
      "blocks": []
    },
    "discovery.hetzner": {
      "name": "discovery.hetzner",
      "doc": "`discovery.hetzner` allows retrieving scrape targets from [Hetzner Cloud API][] and [Robot API][].\nThis service discovery uses the public IPv4 address by default, but that can be changed with relabeling.",
      "arguments": [
        {
          "name": "role",
          "type": "string",
          "doc": "Hetzner role of entities that should be discovered.",
          "required": true,
          "default": null
        },
        {
          "name": "port",
          "type": "int",
          "doc": "The port to scrape metrics from.",
          "required": false,
          "default": "80"
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "The time after which the servers are refreshed.",
          "required": false,
          "default": "\"60s\""
        },
        {
          "name": "bearer_token_file",
          "type": "string",
          "doc": "File containing a bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token",
          "type": "secret",
          "doc": "Bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the Hetzner catalog API."
        }
      ],
      "blocks": [
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "authorization",
          "doc": "Configure generic authorization to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "credentials_file",
              "type": "string",
              "doc": "File containing the secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "credentials",
              "type": "secret",
              "doc": "Secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Authorization type, for example, \"Bearer\".",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "oauth2",
          "doc": "Configure OAuth2 for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "OAuth2 client ID.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret_file",
              "type": "string",
              "doc": "File containing the OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret",
              "type": "secret",
              "doc": "OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint_params",
              "type": "map(string)",
              "doc": "Optional parameters to append to the token URL.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            },
            {
              "name": "scopes",
              "type": "list(string)",
              "doc": "List of scopes to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "token_url",
              "type": "string",
              "doc": "URL to fetch the token from.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.http": {
      "name": "discovery.http",
      "doc": "`discovery.http` provides a flexible way to define targets by querying an external http endpoint.",
      "arguments": [
        {
          "name": "url",
          "type": "string",
          "doc": "URL to scrape.",
          "required": true,
          "default": null
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "How often to refresh targets.",
          "required": false,
          "default": "\"60s\""
        },
        {
          "name": "bearer_token_file",
          "type": "string",
          "doc": "File containing a bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token",
          "type": "secret",
          "doc": "Bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the filesystem."
        }
      ],
      "blocks": [
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "authorization",
          "doc": "Configure generic authorization to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "credentials_file",
              "type": "string",
              "doc": "File containing the secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "credentials",
              "type": "secret",
              "doc": "Secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Authorization type, for example, \"Bearer\".",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "oauth2",
          "doc": "Configure OAuth2 for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "OAuth2 client ID.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret_file",
              "type": "string",
              "doc": "File containing the OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret",
              "type": "secret",
              "doc": "OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint_params",
              "type": "map(string)",
              "doc": "Optional parameters to append to the token URL.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            },
            {
              "name": "scopes",
              "type": "list(string)",
              "doc": "List of scopes to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "token_url",
              "type": "string",
              "doc": "URL to fetch the token from.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.ionos": {
      "name": "discovery.ionos",
      "doc": "`discovery.ionos` allows you to retrieve scrape targets from [IONOS Cloud][] API.",
      "arguments": [
        {
          "name": "datacenter_id",
          "type": "string",
          "doc": "The unique ID of the data center.",
          "required": true,
          "default": null
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "The time after which the servers are refreshed.",
          "required": false,
          "default": "60s"
        },
        {
          "name": "port",
          "type": "int",
          "doc": "The port to scrape metrics from.",
          "required": false,
          "default": "80"
        },
        {
          "name": "bearer_token_file",
          "type": "string",
          "doc": "File containing a bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token",
          "type": "secret",
          "doc": "Bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the IONOS Cloud API."
        }
      ],
      "blocks": [
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "authorization",
          "doc": "Configure generic authorization to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "credentials_file",
              "type": "string",
              "doc": "File containing the secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "credentials",
              "type": "secret",
              "doc": "Secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Authorization type, for example, \"Bearer\".",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "oauth2",
          "doc": "Configure OAuth2 for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "OAuth2 client ID.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret_file",
              "type": "string",
              "doc": "File containing the OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret",
              "type": "secret",
              "doc": "OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint_params",
              "type": "map(string)",
              "doc": "Optional parameters to append to the token URL.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            },
            {
              "name": "scopes",
              "type": "list(string)",
              "doc": "List of scopes to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "token_url",
              "type": "string",
              "doc": "URL to fetch the token from.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.kubelet": {
      "name": "discovery.kubelet",
      "doc": "`discovery.kubelet` discovers Kubernetes pods running on the specified Kubelet and exposes them as scrape targets.",
      "arguments": [
        {
          "name": "url",
          "type": "string",
          "doc": "URL of the Kubelet server.",
          "required": false,
          "default": "\"https://localhost:10250\""
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "How often the Kubelet should be polled for scrape targets",
          "required": false,
          "default": "5s"
        },
        {
          "name": "namespaces",
          "type": "list(string)",
          "doc": "A list of namespaces to extract target pods from",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token_file",
          "type": "string",
          "doc": "File containing a bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token",
          "type": "secret",
          "doc": "Bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the Kubelet API."
        }
      ],
      "blocks": [
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "authorization",
          "doc": "Configure generic authorization to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "credentials_file",
              "type": "string",
              "doc": "File containing the secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "credentials",
              "type": "secret",
              "doc": "Secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Authorization type, for example, \"Bearer\".",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "oauth2",
          "doc": "Configure OAuth2 for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "OAuth2 client ID.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret_file",
              "type": "string",
              "doc": "File containing the OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret",
              "type": "secret",
              "doc": "OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint_params",
              "type": "map(string)",
              "doc": "Optional parameters to append to the token URL.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            },
            {
              "name": "scopes",
              "type": "list(string)",
              "doc": "List of scopes to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "token_url",
              "type": "string",
              "doc": "URL to fetch the token from.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.kubernetes": {
      "name": "discovery.kubernetes",
      "doc": "`discovery.kubernetes` allows you to find scrape targets from Kubernetes resources.\nIt watches cluster state, and ensures targets are continually synced with what is currently running in your cluster.",
      "arguments": [
        {
          "name": "api_server",
          "type": "string",
          "doc": "URL of Kubernetes API server.",
          "required": false,
          "default": null
        },
        {
          "name": "role",
          "type": "string",
          "doc": "Type of Kubernetes resource to query.",
          "required": true,
          "default": null
        },
        {
          "name": "kubeconfig_file",
          "type": "string",
          "doc": "Path of kubeconfig file to use for connecting to Kubernetes.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token_file",
          "type": "string",
          "doc": "File containing a bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token",
          "type": "secret",
          "doc": "Bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the Kubernetes API."
        }
      ],
      "blocks": [
        {
          "name": "namespaces",
          "doc": "Information about which Kubernetes namespaces to search.",
          "required": false,
          "arguments": [
            {
              "name": "own_namespace",
              "type": "bool",
              "doc": "Include the namespace {{< param \"PRODUCT_NAME\" >}} is running in.",
              "required": false,
              "default": null
            },
            {
              "name": "names",
              "type": "list(string)",
              "doc": "List of namespaces to search.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "selectors",
          "doc": "Information about which Kubernetes namespaces to search.",
          "required": false,
          "arguments": [
            {
              "name": "role",
              "type": "string",
              "doc": "Role of the selector.",
              "required": true,
              "default": null
            },
            {
              "name": "label",
              "type": "string",
              "doc": "Label selector string.",
              "required": false,
              "default": null
            },
            {
              "name": "field",
              "type": "string",
              "doc": "Field selector string.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "attach_metadata",
          "doc": "Optional metadata to attach to discovered targets.",
          "required": false,
          "arguments": [
            {
              "name": "node",
              "type": "bool",
              "doc": "Attach node metadata.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "authorization",
          "doc": "Configure generic authorization to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "credentials_file",
              "type": "string",
              "doc": "File containing the secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "credentials",
              "type": "secret",
              "doc": "Secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Authorization type, for example, \"Bearer\".",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "oauth2",
          "doc": "Configure OAuth2 for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "OAuth2 client ID.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret_file",
              "type": "string",
              "doc": "File containing the OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret",
              "type": "secret",
              "doc": "OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint_params",
              "type": "map(string)",
              "doc": "Optional parameters to append to the token URL.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            },
            {
              "name": "scopes",
              "type": "list(string)",
              "doc": "List of scopes to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "token_url",
              "type": "string",
              "doc": "URL to fetch the token from.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.kuma": {
      "name": "discovery.kuma",
      "doc": "`discovery.kuma` discovers scrape target from the [Kuma][] control plane.",
      "arguments": [
        {
          "name": "server",
          "type": "string",
          "doc": "Address of the Kuma Control Plane's MADS xDS server.",
          "required": true,
          "default": null
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "The time to wait between polling update requests.",
          "required": false,
          "default": "\"30s\""
        },
        {
          "name": "fetch_timeout",
          "type": "duration",
          "doc": "The time after which the monitoring assignments are refreshed.",
          "required": false,
          "default": "\"2m\""
        },
        {
          "name": "bearer_token_file",
          "type": "string",
          "doc": "File containing a bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token",
          "type": "secret",
          "doc": "Bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the Kuma API."
        }
      ],
      "blocks": []
    },
    "discovery.lightsail": {
      "name": "discovery.lightsail",
      "doc": "`discovery.lightsail` allows retrieving scrape targets from Amazon Lightsail instances. The private IP address is used by default, but may be changed to the public IP address with relabeling.",
      "arguments": [
        {
          "name": "endpoint",
          "type": "string",
          "doc": "Custom endpoint to be used.",
          "required": false,
          "default": null
        },
        {
          "name": "region",
          "type": "string",
          "doc": "The AWS region. If blank, the region from the instance metadata is used.",
          "required": false,
          "default": null
        },
        {
          "name": "access_key",
          "type": "string",
          "doc": "The AWS API key ID. If blank, the environment variable AWS_ACCESS_KEY_ID is used.",
          "required": false,
          "default": null
        },
        {
          "name": "secret_key",
          "type": "string",
          "doc": "The AWS API key secret. If blank, the environment variable AWS_SECRET_ACCESS_KEY is used.",
          "required": false,
          "default": null
        },
        {
          "name": "profile",
          "type": "string",
          "doc": "Named AWS profile used to connect to the API.",
          "required": false,
          "default": null
        },
        {
          "name": "role_arn",
          "type": "string",
          "doc": "AWS Role ARN, an alternative to using AWS API keys.",
          "required": false,
          "default": null
        },
        {
          "name": "refresh_interval",
          "type": "string",
          "doc": "Refresh interval to re-read the instance list.",
          "required": false,
          "default": "60s"
        },
        {
          "name": "port",
          "type": "int",
          "doc": "The port to scrape metrics from. If using the public IP address, this must instead be specified in the relabeling rule.",
          "required": false,
          "default": "80"
        },
        {
          "name": "bearer_token_file",
          "type": "string",
          "doc": "File containing a bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token",
          "type": "secret",
          "doc": "Bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of discovered Lightsail targets."
        }
      ],
      "blocks": [
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "authorization",
          "doc": "Configure generic authorization to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "credentials_file",
              "type": "string",
              "doc": "File containing the secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "credentials",
              "type": "secret",
              "doc": "Secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Authorization type, for example, \"Bearer\".",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "oauth2",
          "doc": "Configure OAuth2 for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "OAuth2 client ID.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret_file",
              "type": "string",
              "doc": "File containing the OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret",
              "type": "secret",
              "doc": "OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint_params",
              "type": "map(string)",
              "doc": "Optional parameters to append to the token URL.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            },
            {
              "name": "scopes",
              "type": "list(string)",
              "doc": "List of scopes to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "token_url",
              "type": "string",
              "doc": "URL to fetch the token from.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.linode": {
      "name": "discovery.linode",
      "doc": "`discovery.linode` allows you to retrieve scrape targets from [Linode's][] Linode APIv4.\nThis service discovery uses the public IPv4 address by default, but that can be changed with relabeling.",
      "arguments": [
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "The time to wait between polling update requests.",
          "required": false,
          "default": "\"60s\""
        },
        {
          "name": "port",
          "type": "int",
          "doc": "Port that metrics are scraped from.",
          "required": false,
          "default": "80"
        },
        {
          "name": "tag_separator",
          "type": "string",
          "doc": "The string by which Linode Instance tags are joined into the tag label.",
          "required": false,
          "default": ","
        },
        {
          "name": "bearer_token_file",
          "type": "string",
          "doc": "File containing a bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token",
          "type": "secret",
          "doc": "Bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the Linode API."
        }
      ],
      "blocks": [
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "authorization",
          "doc": "Configure generic authorization to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "credentials_file",
              "type": "string",
              "doc": "File containing the secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "credentials",
              "type": "secret",
              "doc": "Secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Authorization type, for example, \"Bearer\".",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "oauth2",
          "doc": "Configure OAuth2 for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "OAuth2 client ID.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret_file",
              "type": "string",
              "doc": "File containing the OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret",
              "type": "secret",
              "doc": "OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint_params",
              "type": "map(string)",
              "doc": "Optional parameters to append to the token URL.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            },
            {
              "name": "scopes",
              "type": "list(string)",
              "doc": "List of scopes to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "token_url",
              "type": "string",
              "doc": "URL to fetch the token from.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.marathon": {
      "name": "discovery.marathon",
      "doc": "`discovery.marathon` allows you to retrieve scrape targets from [Marathon's](https://mesosphere.github.io/marathon/) Service API.",
      "arguments": [
        {
          "name": "servers",
          "type": "list(string)",
          "doc": "List of Marathon servers.",
          "required": true,
          "default": null
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "Interval at which to refresh the list of targets.",
          "required": false,
          "default": "\"30s\""
        },
        {
          "name": "auth_token",
          "type": "secret",
          "doc": "Auth token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "auth_token_file",
          "type": "string",
          "doc": "File containing an auth token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token_file",
          "type": "string",
          "doc": "File containing a bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token",
          "type": "secret",
          "doc": "Bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the Marathon servers."
        }
      ],
      "blocks": [
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "authorization",
          "doc": "Configure generic authorization to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "credentials_file",
              "type": "string",
              "doc": "File containing the secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "credentials",
              "type": "secret",
              "doc": "Secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Authorization type, for example, \"Bearer\".",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "oauth2",
          "doc": "Configure OAuth2 for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "OAuth2 client ID.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret_file",
              "type": "string",
              "doc": "File containing the OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret",
              "type": "secret",
              "doc": "OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint_params",
              "type": "map(string)",
              "doc": "Optional parameters to append to the token URL.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            },
            {
              "name": "scopes",
              "type": "list(string)",
              "doc": "List of scopes to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "token_url",
              "type": "string",
              "doc": "URL to fetch the token from.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.nerve": {
      "name": "discovery.nerve",
      "doc": "`discovery.nerve` discovers [airbnb/nerve][] targets stored in Zookeeper.",
      "arguments": [
        {
          "name": "servers",
          "type": "list(string)",
          "doc": "The Zookeeper servers.",
          "required": true,
          "default": null
        },
        {
          "name": "paths",
          "type": "list(string)",
          "doc": "The paths to look for targets at.",
          "required": true,
          "default": null
        },
        {
          "name": "timeout",
          "type": "duration",
          "doc": "The timeout to use.",
          "required": false,
          "default": "\"10s\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from Nerve's API."
        }
      ],
      "blocks": []
    },
    "discovery.nomad": {
      "name": "discovery.nomad",
      "doc": "`discovery.nomad` allows you to retrieve scrape targets from [Nomad's](https://www.nomadproject.io/) Service API.",
      "arguments": [
        {
          "name": "server",
          "type": "string",
          "doc": "Address of nomad server.",
          "required": false,
          "default": "http://localhost:4646"
        },
        {
          "name": "namespace",
          "type": "string",
          "doc": "Nomad namespace to use.",
          "required": false,
          "default": "default"
        },
        {
          "name": "region",
          "type": "string",
          "doc": "Nomad region to use.",
          "required": false,
          "default": "global"
        },
        {
          "name": "allow_stale",
          "type": "bool",
          "doc": "Allow reading from non-leader nomad instances.",
          "required": false,
          "default": "true"
        },
        {
          "name": "tag_separator",
          "type": "string",
          "doc": "Seperator to join nomad tags into Prometheus labels.",
          "required": false,
          "default": ","
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "Frequency to refresh list of containers.",
          "required": false,
          "default": "\"30s\""
        },
        {
          "name": "bearer_token_file",
          "type": "string",
          "doc": "File containing a bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token",
          "type": "secret",
          "doc": "Bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the nomad server."
        }
      ],
      "blocks": [
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "authorization",
          "doc": "Configure generic authorization to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "credentials_file",
              "type": "string",
              "doc": "File containing the secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "credentials",
              "type": "secret",
              "doc": "Secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Authorization type, for example, \"Bearer\".",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "oauth2",
          "doc": "Configure OAuth2 for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "OAuth2 client ID.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret_file",
              "type": "string",
              "doc": "File containing the OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret",
              "type": "secret",
              "doc": "OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint_params",
              "type": "map(string)",
              "doc": "Optional parameters to append to the token URL.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            },
            {
              "name": "scopes",
              "type": "list(string)",
              "doc": "List of scopes to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "token_url",
              "type": "string",
              "doc": "URL to fetch the token from.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.openstack": {
      "name": "discovery.openstack",
      "doc": "`discovery.openstack` discovers [OpenStack][] Nova instances and exposes them as targets.",
      "arguments": [
        {
          "name": "role",
          "type": "string",
          "doc": "Role of the discovered targets.",
          "required": true,
          "default": null
        },
        {
          "name": "region",
          "type": "string",
          "doc": "OpenStack region.",
          "required": true,
          "default": null
        },
        {
          "name": "identity_endpoint",
          "type": "string",
          "doc": "Specifies the HTTP endpoint that is required to work with te Identity API of the appropriate version",
          "required": false,
          "default": null
        },
        {
          "name": "username",
          "type": "string",
          "doc": "OpenStack username for the Identity V2 and V3 APIs.",
          "required": false,
          "default": null
        },
        {
          "name": "userid",
          "type": "string",
          "doc": "OpenStack userid for the Identity V2 and V3 APIs.",
          "required": false,
          "default": null
        },
        {
          "name": "password",
          "type": "secret",
          "doc": "Password for the Identity V2 and V3 APIs.",
          "required": false,
          "default": null
        },
        {
          "name": "domain_name",
          "type": "string",
          "doc": "OpenStack domain name for the Identity V2 and V3 APIs.",
          "required": false,
          "default": null
        },
        {
          "name": "domain_id",
          "type": "string",
          "doc": "OpenStack domain ID for the Identity V2 and V3 APIs.",
          "required": false,
          "default": null
        },
        {
          "name": "project_name",
          "type": "string",
          "doc": "OpenStack project name for the Identity V2 and V3 APIs.",
          "required": false,
          "default": null
        },
        {
          "name": "project_id",
          "type": "string",
          "doc": "OpenStack project ID for the Identity V2 and V3 APIs.",
          "required": false,
          "default": null
        },
        {
          "name": "application_credential_name",
          "type": "string",
          "doc": "OpenStack application credential name for the Identity V2 and V3 APIs.",
          "required": false,
          "default": null
        },
        {
          "name": "application_credential_id",
          "type": "string",
          "doc": "OpenStack application credential ID for the Identity V2 and V3 APIs.",
          "required": false,
          "default": null
        },
        {
          "name": "application_credential_secret",
          "type": "secret",
          "doc": "OpenStack application credential secret for the Identity V2 and V3 APIs.",
          "required": false,
          "default": null
        },
        {
          "name": "all_tenants",
          "type": "bool",
          "doc": "Whether the service discovery should list all instances for all projects.",
          "required": false,
          "default": "false"
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "Refresh interval to re-read the instance list.",
          "required": false,
          "default": "60s"
        },
        {
          "name": "port",
          "type": "int",
          "doc": "The port to scrape metrics from.",
          "required": false,
          "default": "80"
        },
        {
          "name": "availability",
          "type": "string",
          "doc": "The availability of the endpoint to connect to.",
          "required": false,
          "default": "public"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the OpenStack API."
        }
      ],
      "blocks": [
        {
          "name": "tls_config",
          "doc": "TLS configuration for requests to the OpenStack API.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.ovhcloud": {
      "name": "discovery.ovhcloud",
      "doc": "`discovery.ovhcloud` discovers scrape targets from OVHcloud's [dedicated servers][] and [VPS][] using their [API][].\n{{< param \"PRODUCT_NAME\" >}} will periodically check the REST endpoint and create a target for every discovered server.\nThe public IPv4 address will be used by default - if there's none, the IPv6 address will be used.\nThis may be changed via relabeling with `discovery.relabel`.\nFor OVHcloud's [public cloud][] instances you can use `discovery.openstack`.",
      "arguments": [
        {
          "name": "application_key",
          "type": "string",
          "doc": "[API][] application key.",
          "required": true,
          "default": null
        },
        {
          "name": "application_secret",
          "type": "secret",
          "doc": "[API][] application secret.",
          "required": true,
          "default": null
        },
        {
          "name": "consumer_key",
          "type": "secret",
          "doc": "[API][] consumer key.",
          "required": true,
          "default": null
        },
        {
          "name": "endpoint",
          "type": "string",
          "doc": "[API][] endpoint.",
          "required": false,
          "default": "\"ovh-eu\""
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "Refresh interval to re-read the resources list.",
          "required": false,
          "default": "\"60s\""
        },
        {
          "name": "service",
          "type": "string",
          "doc": "Service of the targets to retrieve.",
          "required": true,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the OVHcloud API."
        }
      ],
      "blocks": []
    },
    "discovery.process": {
      "name": "discovery.process",
      "doc": "`discovery.process` discovers processes running on the local Linux OS.",
      "arguments": [
        {
          "name": "join",
          "type": "list(map(string))",
          "doc": "Join external targets to discovered processes targets based on __container_id__ label.",
          "required": false,
          "default": null
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "How often to sync targets.",
          "required": false,
          "default": "\"60s\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of processes discovered on the local Linux OS."
        }
      ],
      "blocks": [
        {
          "name": "discover_config",
          "doc": "Configures which process metadata to discover.",
          "required": false,
          "arguments": [
            {
              "name": "exe",
              "type": "bool",
              "doc": "A flag to enable discovering __meta_process_exe label.",
              "required": false,
              "default": "true"
            },
            {
              "name": "cwd",
              "type": "bool",
              "doc": "A flag to enable discovering __meta_process_cwd label.",
              "required": false,
              "default": "true"
            },
            {
              "name": "commandline",
              "type": "bool",
              "doc": "A flag to enable discovering __meta_process_commandline label.",
              "required": false,
              "default": "true"
            },
            {
              "name": "uid",
              "type": "bool",
              "doc": "A flag to enable discovering __meta_process_uid: label.",
              "required": false,
              "default": "true"
            },
            {
              "name": "username",
              "type": "bool",
              "doc": "A flag to enable discovering __meta_process_username: label.",
              "required": false,
              "default": "true"
            },
            {
              "name": "container_id",
              "type": "bool",
              "doc": "A flag to enable discovering __container_id__ label.",
              "required": false,
              "default": "true"
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.puppetdb": {
      "name": "discovery.puppetdb",
      "doc": "`discovery.puppetdb` allows you to retrieve scrape targets from [PuppetDB](https://www.puppet.com/docs/puppetdb/7/overview.html) resources.",
      "arguments": [
        {
          "name": "url",
          "type": "string",
          "doc": "The URL of the PuppetDB root query endpoint.",
          "required": true,
          "default": null
        },
        {
          "name": "query",
          "type": "string",
          "doc": "Puppet Query Language (PQL) query. Only resources are supported.",
          "required": true,
          "default": null
        },
        {
          "name": "include_parameters",
          "type": "bool",
          "doc": "Whether to include the parameters as meta labels. Due to the differences between parameter types and Prometheus labels, some parameters might not be rendered. The format of the parameters might also change in future releases. Make sure that you don't have secrets exposed as parameters if you enable this.",
          "required": false,
          "default": "false"
        },
        {
          "name": "port",
          "type": "int",
          "doc": "The port to scrape metrics from.",
          "required": false,
          "default": "80"
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "Frequency to refresh targets.",
          "required": false,
          "default": "\"30s\""
        },
        {
          "name": "bearer_token_file",
          "type": "string",
          "doc": "File containing a bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token",
          "type": "secret",
          "doc": "Bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from puppetdb."
        }
      ],
      "blocks": [
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "authorization",
          "doc": "Configure generic authorization to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "credentials_file",
              "type": "string",
              "doc": "File containing the secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "credentials",
              "type": "secret",
              "doc": "Secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Authorization type, for example, \"Bearer\".",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "oauth2",
          "doc": "Configure OAuth2 for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "OAuth2 client ID.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret_file",
              "type": "string",
              "doc": "File containing the OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret",
              "type": "secret",
              "doc": "OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint_params",
              "type": "map(string)",
              "doc": "Optional parameters to append to the token URL.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            },
            {
              "name": "scopes",
              "type": "list(string)",
              "doc": "List of scopes to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "token_url",
              "type": "string",
              "doc": "URL to fetch the token from.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.relabel": {
      "name": "discovery.relabel",
      "doc": "`discovery.relabel` rewrites the label set of the input targets by applying one or more relabeling rules.\nIf no rules are defined, then the input targets are exported as-is.",
      "arguments": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "Targets to relabel",
          "required": true,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "output",
          "type": "list(map(string))",
          "doc": "The set of targets after applying relabeling."
        },
        {
          "name": "rules",
          "type": "RelabelRules",
          "doc": "The currently configured relabeling rules."
        }
      ],
      "blocks": [
        {
          "name": "rule",
          "doc": "Relabeling rules to apply to targets.",
          "required": false,
          "arguments": [
            {
              "name": "action",
              "type": "string",
              "doc": "The relabeling action to perform.",
              "required": false,
              "default": "replace"
            },
            {
              "name": "modulus",
              "type": "uint",
              "doc": "A positive integer used to calculate the modulus of the hashed source label values.",
              "required": false,
              "default": null
            },
            {
              "name": "regex",
              "type": "string",
              "doc": "A valid RE2 expression with support for parenthesized capture groups. Used to match the extracted value from the combination of the source_label and separator fields or filter labels during the labelkeep/labeldrop/labelmap actions.",
              "required": false,
              "default": "(.*)"
            },
            {
              "name": "replacement",
              "type": "string",
              "doc": "The value against which a regular expression replace is performed, if the regular expression matches the extracted value. Supports previously captured groups.",
              "required": false,
              "default": "\"$1\""
            },
            {
              "name": "separator",
              "type": "string",
              "doc": "The separator used to concatenate the values present in source_labels.",
              "required": false,
              "default": ";"
            },
            {
              "name": "source_labels",
              "type": "list(string)",
              "doc": "The list of labels whose values are to be selected. Their content is concatenated using the separator and matched against regex.",
              "required": false,
              "default": null
            },
            {
              "name": "target_label",
              "type": "string",
              "doc": "Label to which the resulting value will be written to.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.scaleway": {
      "name": "discovery.scaleway",
      "doc": "`discovery.scaleway` discovers targets from [Scaleway instances][instance] and [baremetal services][baremetal].",
      "arguments": [
        {
          "name": "project_id",
          "type": "string",
          "doc": "Scaleway project ID of targets.",
          "required": true,
          "default": null
        },
        {
          "name": "role",
          "type": "string",
          "doc": "Role of targets to retrieve.",
          "required": true,
          "default": null
        },
        {
          "name": "api_url",
          "type": "string",
          "doc": "Scaleway API URL.",
          "required": false,
          "default": "\"https://api.scaleway.com\""
        },
        {
          "name": "zone",
          "type": "string",
          "doc": "Availability zone of targets.",
          "required": false,
          "default": "\"fr-par-1\""
        },
        {
          "name": "access_key",
          "type": "string",
          "doc": "Access key for the Scaleway API.",
          "required": true,
          "default": null
        },
        {
          "name": "secret_key",
          "type": "secret",
          "doc": "Secret key for the Scaleway API.",
          "required": false,
          "default": null
        },
        {
          "name": "secret_key_file",
          "type": "string",
          "doc": "Path to file containing secret key for the Scaleway API.",
          "required": false,
          "default": null
        },
        {
          "name": "name_filter",
          "type": "string",
          "doc": "Name filter to apply against the listing request.",
          "required": false,
          "default": null
        },
        {
          "name": "tags_filter",
          "type": "list(string)",
          "doc": "List of tags to search for.",
          "required": false,
          "default": null
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "Frequency to rediscover targets.",
          "required": false,
          "default": "\"60s\""
        },
        {
          "name": "port",
          "type": "number",
          "doc": "Default port on servers to associate with generated targets.",
          "required": false,
          "default": "80"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the Consul catalog API."
        }
      ],
      "blocks": [
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.serverset": {
      "name": "discovery.serverset",
      "doc": "`discovery.serverset` discovers [Serversets][] stored in Zookeeper and exposes them as targets.\nServersets are commonly used by [Finagle][] and [Aurora][].",
      "arguments": [
        {
          "name": "servers",
          "type": "list(string)",
          "doc": "The Zookeeper servers to connect to.",
          "required": true,
          "default": null
        },
        {
          "name": "paths",
          "type": "list(string)",
          "doc": "The Zookeeper paths to discover Serversets from.",
          "required": true,
          "default": null
        },
        {
          "name": "timeout",
          "type": "duration",
          "doc": "The Zookeeper session timeout",
          "required": false,
          "default": "10s"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered."
        }
      ],
      "blocks": []
    },
    "discovery.triton": {
      "name": "discovery.triton",
      "doc": "`discovery.triton` discovers [Triton][] Container Monitors and exposes them as targets.",
      "arguments": [
        {
          "name": "account",
          "type": "string",
          "doc": "The account to use for discovering new targets.",
          "required": true,
          "default": null
        },
        {
          "name": "role",
          "type": "string",
          "doc": "The type of targets to discover.",
          "required": false,
          "default": "\"container\""
        },
        {
          "name": "dns_suffix",
          "type": "string",
          "doc": "The DNS suffix that is applied to the target.",
          "required": true,
          "default": null
        },
        {
          "name": "endpoint",
          "type": "string",
          "doc": "The Triton discovery endpoint.",
          "required": true,
          "default": null
        },
        {
          "name": "groups",
          "type": "list(string)",
          "doc": "A list of groups to retrieve targets from.",
          "required": false,
          "default": null
        },
        {
          "name": "port",
          "type": "int",
          "doc": "The port to use for discovery and metrics scraping.",
          "required": false,
          "default": "9163"
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "The refresh interval for the list of targets.",
          "required": false,
          "default": "60s"
        },
        {
          "name": "version",
          "type": "int",
          "doc": "The Triton discovery API version.",
          "required": false,
          "default": "1"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the Triton API."
        }
      ],
      "blocks": [
        {
          "name": "tls_config",
          "doc": "TLS configuration for requests to the Triton API.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "discovery.uyuni": {
      "name": "discovery.uyuni",
      "doc": "`discovery.uyuni` discovers [Uyuni][] Monitoring Endpoints and exposes them as targets.",
      "arguments": [
        {
          "name": "server",
          "type": "string",
          "doc": "The primary Uyuni Server.",
          "required": true,
          "default": null
        },
        {
          "name": "username",
          "type": "string",
          "doc": "The username to use for authentication to the Uyuni API.",
          "required": true,
          "default": null
        },
        {
          "name": "password",
          "type": "Secret",
          "doc": "The password to use for authentication to the Uyuni API.",
          "required": true,
          "default": null
        },
        {
          "name": "entitlement",
          "type": "string",
          "doc": "The entitlement to filter on when listing targets.",
          "required": false,
          "default": "\"monitoring_entitled\""
        },
        {
          "name": "separator",
          "type": "string",
          "doc": "The separator to use when building the __meta_uyuni_groups label.",
          "required": false,
          "default": "\",\""
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "Interval at which to refresh the list of targets.",
          "required": false,
          "default": "1m"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the Uyuni API."
        }
      ],
      "blocks": [
        {
          "name": "tls_config",
          "doc": "TLS configuration for requests to the Uyuni API.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    }
  },
  "faro": {
    "faro.receiver": {
      "name": "faro.receiver",
      "doc": "`faro.receiver` accepts web application telemetry data from the [Grafana Faro Web SDK][faro-sdk] and forwards it to other components for future processing.",
      "arguments": [
        {
          "name": "extra_log_labels",
          "type": "map(string)",
          "doc": "Extra labels to attach to emitted log lines.",
          "required": false,
          "default": "{}"
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "server",
          "doc": "Configures the HTTP server.",
          "required": false,
          "arguments": [
            {
              "name": "listen_address",
              "type": "string",
              "doc": "Address to listen for HTTP traffic on.",
              "required": false,
              "default": "127.0.0.1"
            },
            {
              "name": "listen_port",
              "type": "number",
              "doc": "Port to listen for HTTP traffic on.",
              "required": false,
              "default": "12347"
            },
            {
              "name": "cors_allowed_origins",
              "type": "list(string)",
              "doc": "Origins for which cross-origin requests are permitted.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "api_key",
              "type": "secret",
              "doc": "Optional API key to validate client requests with.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "max_allowed_payload_size",
              "type": "string",
              "doc": "Maximum size (in bytes) for client requests.",
              "required": false,
              "default": "\"5MiB\""
            },
            {
              "name": "include_metadata",
              "type": "boolean",
              "doc": "Propagate incoming connection metadata to downstream consumers.",
              "required": false,
              "default": "false"
            }
          ],
          "blocks": [
            {
              "name": "rate_limiting",
              "doc": "Configures rate limiting for the HTTP server.",
              "required": false,
              "arguments": [
                {
                  "name": "enabled",
                  "type": "bool",
                  "doc": "Whether to enable rate limiting.",
                  "required": false,
                  "default": "true"
                },
                {
                  "name": "rate",
                  "type": "number",
                  "doc": "Rate of allowed requests per second.",
                  "required": false,
                  "default": "50"
                },
                {
                  "name": "burst_size",
                  "type": "number",
                  "doc": "Allowed burst size of requests.",
                  "required": false,
                  "default": "100"
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "sourcemaps",
          "doc": "Configures sourcemap retrieval.",
          "required": false,
          "arguments": [
            {
              "name": "download",
              "type": "bool",
              "doc": "Whether to download sourcemaps.",
              "required": false,
              "default": "true"
            },
            {
              "name": "download_from_origins",
              "type": "list(string)",
              "doc": "Which origins to download sourcemaps from.",
              "required": false,
              "default": "[\"*\"]"
            },
            {
              "name": "download_timeout",
              "type": "duration",
              "doc": "Timeout when downloading sourcemaps.",
              "required": false,
              "default": "\"1s\""
            }
          ],
          "blocks": [
            {
              "name": "location",
              "doc": "Configures on-disk location for sourcemap retrieval.",
              "required": false,
              "arguments": [
                {
                  "name": "path",
                  "type": "string",
                  "doc": "The path on disk where sourcemaps are stored.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "minified_path_prefix",
                  "type": "string",
                  "doc": "The prefix of the minified path sent from browsers.",
                  "required": true,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "output",
          "doc": "Configures where to send collected telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "logs",
              "type": "list(LogsReceiver)",
              "doc": "A list of loki components to forward logs to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "A list of otelcol components to forward traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        }
      ]
    }
  },
  "local": {
    "local.file": {
      "name": "local.file",
      "doc": "`local.file` exposes the contents of a file on disk to other components.\nThe file will be watched for changes so that its latest content is always exposed.",
      "arguments": [
        {
          "name": "filename",
          "type": "string",
          "doc": "Path of the file on disk to watch",
          "required": true,
          "default": null
        },
        {
          "name": "detector",
          "type": "string",
          "doc": "Which file change detector to use (fsnotify, poll)",
          "required": false,
          "default": "\"fsnotify\""
        },
        {
          "name": "poll_frequency",
          "type": "duration",
          "doc": "How often to poll for file changes",
          "required": false,
          "default": "\"1m\""
        },
        {
          "name": "is_secret",
          "type": "bool",
          "doc": "Marks the file as containing a [secret][]",
          "required": false,
          "default": "false"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "content",
          "type": "string or secret",
          "doc": "The contents of the file from the most recent read"
        }
      ],
      "blocks": []
    },
    "local.file_match": {
      "name": "local.file_match",
      "doc": "`local.file_match` discovers files on the local filesystem using glob patterns and the [doublestar][] library.",
      "arguments": [
        {
          "name": "path_targets",
          "type": "list(map(string))",
          "doc": "Targets to expand; looks for glob patterns on the  __path__ and __path_exclude__ keys.",
          "required": true,
          "default": null
        },
        {
          "name": "sync_period",
          "type": "duration",
          "doc": "How often to sync filesystem and targets.",
          "required": false,
          "default": "\"10s\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The set of targets discovered from the filesystem."
        }
      ],
      "blocks": []
    }
  },
  "loki": {
    "loki.echo": {
      "name": "loki.echo",
      "doc": "`loki.echo` receives log entries from other `loki` components and prints them to the process' standard output (stdout).",
      "arguments": [],
      "hasLabel": true,
      "exports": [
        {
          "name": "receiver",
          "type": "LogsReceiver",
          "doc": "A value that other components can use to send log entries to."
        }
      ],
      "blocks": []
    },
    "loki.process": {
      "name": "loki.process",
      "doc": "`loki.process` receives log entries from other loki components, applies one or more processing _stages_, and forwards the results to the list of receivers in the component's arguments.",
      "arguments": [
        {
          "name": "forward_to",
          "type": "list(LogsReceiver)",
          "doc": "Where to forward log entries after processing.",
          "required": true,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "receiver",
          "type": "LogsReceiver",
          "doc": "A value that other components can use to send log entries to."
        }
      ],
      "blocks": [
        {
          "name": "stage.cri",
          "doc": "Configures a pre-defined CRI-format pipeline.",
          "required": false,
          "arguments": [
            {
              "name": "max_partial_lines",
              "type": "number",
              "doc": "Maximum number of partial lines to hold in memory.",
              "required": false,
              "default": "100"
            },
            {
              "name": "max_partial_line_size",
              "type": "number",
              "doc": "Maximum number of characters which a partial line can have.",
              "required": false,
              "default": "0"
            },
            {
              "name": "max_partial_line_size_truncate",
              "type": "bool",
              "doc": "Truncate partial lines that are longer than max_partial_line_size.",
              "required": false,
              "default": "false"
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.decolorize",
          "doc": "Strips ANSI color codes from log lines.",
          "required": false,
          "arguments": [],
          "blocks": []
        },
        {
          "name": "stage.docker",
          "doc": "Configures a pre-defined Docker log format pipeline.",
          "required": false,
          "arguments": [],
          "blocks": []
        },
        {
          "name": "stage.drop",
          "doc": "Configures a drop processing stage.",
          "required": false,
          "arguments": [
            {
              "name": "source",
              "type": "string",
              "doc": "Name or comma-separated list of names from extracted data to match. If empty or not defined, it uses the log message.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "separator",
              "type": "string",
              "doc": "When source is a comma-separated list of names, this separator is placed between concatenated extracted data values.",
              "required": false,
              "default": "\";\""
            },
            {
              "name": "expression",
              "type": "string",
              "doc": "A valid RE2 regular expression.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "value",
              "type": "string",
              "doc": "If both source and value are specified, the stage drops lines where value exactly matches the source content.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "older_than",
              "type": "duration",
              "doc": "If specified, the stage drops lines whose timestamp is older than the current time minus this duration.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "longer_than",
              "type": "string",
              "doc": "If specified, the stage drops lines whose size exceeds the configured value.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "drop_counter_reason",
              "type": "string",
              "doc": "A custom reason to report for dropped lines.",
              "required": false,
              "default": "\"drop_stage\""
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.eventlogmessage",
          "doc": "Extracts data from the Message field in the Windows Event Log.",
          "required": false,
          "arguments": [
            {
              "name": "source",
              "type": "string",
              "doc": "Name of the field in the extracted data to parse.",
              "required": false,
              "default": "message"
            },
            {
              "name": "overwrite_existing",
              "type": "bool",
              "doc": "Whether to overwrite existing extracted data fields.",
              "required": false,
              "default": "false"
            },
            {
              "name": "drop_invalid_labels",
              "type": "bool",
              "doc": "Whether to drop fields that are not valid label names.",
              "required": false,
              "default": "false"
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.geoip",
          "doc": "Configures a geoip processing stage.",
          "required": false,
          "arguments": [
            {
              "name": "db",
              "type": "string",
              "doc": "Path to the Maxmind DB file.",
              "required": true,
              "default": null
            },
            {
              "name": "source",
              "type": "string",
              "doc": "IP from extracted data to parse.",
              "required": true,
              "default": null
            },
            {
              "name": "db_type",
              "type": "string",
              "doc": "Maxmind DB type. Allowed values are \"city\", \"asn\", \"country\".",
              "required": false,
              "default": null
            },
            {
              "name": "custom_lookups",
              "type": "map(string)",
              "doc": "Key-value pairs of JMESPath expressions.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.json",
          "doc": "Configures a JSON processing stage.",
          "required": false,
          "arguments": [
            {
              "name": "expressions",
              "type": "map(string)",
              "doc": "Key-value pairs of JMESPath expressions.",
              "required": true,
              "default": null
            },
            {
              "name": "source",
              "type": "string",
              "doc": "Source of the data to parse as JSON.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "drop_malformed",
              "type": "bool",
              "doc": "Drop lines whose input cannot be parsed as valid JSON.",
              "required": false,
              "default": "false"
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.label_drop",
          "doc": "Configures a label_drop processing stage.",
          "required": false,
          "arguments": [
            {
              "name": "values",
              "type": "list(string)",
              "doc": "Configures a label_drop processing stage.",
              "required": false,
              "default": "{}"
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.label_keep",
          "doc": "Configures a label_keep processing stage.",
          "required": false,
          "arguments": [
            {
              "name": "values",
              "type": "list(string)",
              "doc": "Configures a label_keep processing stage.",
              "required": false,
              "default": "{}"
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.labels",
          "doc": "Configures a labels processing stage.",
          "required": false,
          "arguments": [
            {
              "name": "values",
              "type": "map(string)",
              "doc": "Configures a labels processing stage.",
              "required": false,
              "default": "{}"
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.limit",
          "doc": "Configures a limit processing stage.",
          "required": false,
          "arguments": [
            {
              "name": "rate",
              "type": "number",
              "doc": "The maximum rate of lines per second that the stage forwards.",
              "required": true,
              "default": null
            },
            {
              "name": "burst",
              "type": "number",
              "doc": "The maximum number of burst lines that the stage forwards.",
              "required": true,
              "default": null
            },
            {
              "name": "by_label_name",
              "type": "string",
              "doc": "The label to use when rate-limiting on a label name.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "drop",
              "type": "bool",
              "doc": "Whether to discard or backpressure lines that exceed the rate limit.",
              "required": false,
              "default": "false"
            },
            {
              "name": "max_distinct_labels",
              "type": "number",
              "doc": "The number of unique values to keep track of when rate-limiting by_label_name.",
              "required": false,
              "default": "10000"
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.logfmt",
          "doc": "Configures a logfmt processing stage.",
          "required": false,
          "arguments": [
            {
              "name": "mapping",
              "type": "map(string)",
              "doc": "Key-value pairs of logmft fields to extract.",
              "required": true,
              "default": null
            },
            {
              "name": "source",
              "type": "string",
              "doc": "Source of the data to parse as logfmt.",
              "required": false,
              "default": "\"\""
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.luhn",
          "doc": "Configures a luhn processing stage.",
          "required": false,
          "arguments": [
            {
              "name": "replacement",
              "type": "string",
              "doc": "String to substitute the matched patterns with",
              "required": false,
              "default": "\"**REDACTED**\""
            },
            {
              "name": "source",
              "type": "string",
              "doc": "Source of the data to parse.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "min_length",
              "type": "int",
              "doc": "Minimum length of digits to consider",
              "required": false,
              "default": "13"
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.match",
          "doc": "Configures a match processing stage.",
          "required": false,
          "arguments": [
            {
              "name": "selector",
              "type": "string",
              "doc": "The LogQL stream selector and line filter expressions to use.",
              "required": true,
              "default": null
            },
            {
              "name": "pipeline_name",
              "type": "string",
              "doc": "A custom name to use for the nested pipeline.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "action",
              "type": "string",
              "doc": "The action to take when the selector matches the log line. Supported values are \"keep\" and \"drop\"",
              "required": false,
              "default": "\"keep\""
            },
            {
              "name": "drop_counter_reason",
              "type": "string",
              "doc": "A custom reason to report for dropped lines.",
              "required": false,
              "default": "\"match_stage\""
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.metrics",
          "doc": "Configures a metrics stage.",
          "required": false,
          "arguments": [
            {
              "name": "name",
              "type": "string",
              "doc": "The metric name.",
              "required": true,
              "default": null
            },
            {
              "name": "action",
              "type": "string",
              "doc": "The action to take. Valid actions are set, inc, dec, add, or sub.",
              "required": true,
              "default": null
            },
            {
              "name": "description",
              "type": "string",
              "doc": "The metric's description and help text.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "source",
              "type": "string",
              "doc": "Key from the extracted data map to use for the metric. Defaults to the metric name.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "prefix",
              "type": "string",
              "doc": "The prefix to the metric name.",
              "required": false,
              "default": "\"loki_process_custom_\""
            },
            {
              "name": "max_idle_duration",
              "type": "duration",
              "doc": "Maximum amount of time to wait until the metric is marked as 'stale' and removed.",
              "required": false,
              "default": "\"5m\""
            },
            {
              "name": "value",
              "type": "string",
              "doc": "If set, the metric only changes if source exactly matches the value.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "match_all",
              "type": "bool",
              "doc": "If set to true, all log lines are counted, without attempting to match the source to the extracted map.",
              "required": false,
              "default": "false"
            },
            {
              "name": "count_entry_bytes",
              "type": "bool",
              "doc": "If set to true, counts all log lines bytes.",
              "required": false,
              "default": "false"
            },
            {
              "name": "Name",
              "type": "Type",
              "doc": "Description",
              "required": false,
              "default": "Default"
            },
            {
              "name": "---------------------",
              "type": "------------",
              "doc": "-------------------------------------------------------------------------------------",
              "required": false,
              "default": "--------------------------"
            },
            {
              "name": "name",
              "type": "string",
              "doc": "The metric name.",
              "required": true,
              "default": null
            },
            {
              "name": "action",
              "type": "string",
              "doc": "The action to take. Valid actions are inc and add.",
              "required": true,
              "default": null
            },
            {
              "name": "description",
              "type": "string",
              "doc": "The metric's description and help text.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "source",
              "type": "string",
              "doc": "Key from the extracted data map to use for the metric. Defaults to the metric name.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "prefix",
              "type": "string",
              "doc": "The prefix to the metric name.",
              "required": false,
              "default": "\"loki_process_custom_\""
            },
            {
              "name": "max_idle_duration",
              "type": "duration",
              "doc": "Maximum amount of time to wait until the metric is marked as 'stale' and removed.",
              "required": false,
              "default": "\"5m\""
            },
            {
              "name": "value",
              "type": "string",
              "doc": "If set, the metric only changes if source exactly matches the value.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "Name",
              "type": "Type",
              "doc": "Description",
              "required": false,
              "default": "Default"
            },
            {
              "name": "---------------------",
              "type": "---------------",
              "doc": "-------------------------------------------------------------------------------------",
              "required": false,
              "default": "--------------------------"
            },
            {
              "name": "name",
              "type": "string",
              "doc": "The metric name.",
              "required": true,
              "default": null
            },
            {
              "name": "buckets",
              "type": "list(float)",
              "doc": "The action to take. Valid actions are set, inc, dec, add, or sub.",
              "required": true,
              "default": null
            },
            {
              "name": "description",
              "type": "string",
              "doc": "The metric's description and help text.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "source",
              "type": "string",
              "doc": "Key from the extracted data map to use for the metric. Defaults to the metric name.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "prefix",
              "type": "string",
              "doc": "The prefix to the metric name.",
              "required": false,
              "default": "\"loki_process_custom_\""
            },
            {
              "name": "max_idle_duration",
              "type": "duration",
              "doc": "Maximum amount of time to wait until the metric is marked as 'stale' and removed.",
              "required": false,
              "default": "\"5m\""
            },
            {
              "name": "value",
              "type": "string",
              "doc": "If set, the metric only changes if source exactly matches the value.",
              "required": false,
              "default": "\"\""
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.multiline",
          "doc": "Configures a multiline processing stage.",
          "required": false,
          "arguments": [
            {
              "name": "firstline",
              "type": "string",
              "doc": "Name from extracted data to use for the log entry.",
              "required": true,
              "default": null
            },
            {
              "name": "max_wait_time",
              "type": "duration",
              "doc": "The maximum time to wait for a multiline block.",
              "required": false,
              "default": "\"3s\""
            },
            {
              "name": "max_lines",
              "type": "number",
              "doc": "The maximum number of lines a block can have.",
              "required": false,
              "default": "128"
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.output",
          "doc": "Configures an output processing stage.",
          "required": false,
          "arguments": [
            {
              "name": "source",
              "type": "string",
              "doc": "Name from extracted data to use for the log entry.",
              "required": true,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.pack",
          "doc": "Configures a pack processing stage.",
          "required": false,
          "arguments": [
            {
              "name": "labels",
              "type": "list(string)",
              "doc": "The values from the extracted data and labels to pack with the log entry.",
              "required": true,
              "default": null
            },
            {
              "name": "ingest_timestamp",
              "type": "bool",
              "doc": "Whether to replace the log entry timestamp with the time the pack stage runs.",
              "required": false,
              "default": "true"
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.regex",
          "doc": "Configures a regex processing stage.",
          "required": false,
          "arguments": [
            {
              "name": "expression",
              "type": "string",
              "doc": "A valid RE2 regular expression. Each capture group must be named.",
              "required": true,
              "default": null
            },
            {
              "name": "source",
              "type": "string",
              "doc": "Name from extracted data to parse. If empty, uses the log message.",
              "required": false,
              "default": "\"\""
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.replace",
          "doc": "Configures a replace processing stage.",
          "required": false,
          "arguments": [
            {
              "name": "expression",
              "type": "string",
              "doc": "Name from extracted data to use for the log entry.",
              "required": true,
              "default": null
            },
            {
              "name": "source",
              "type": "string",
              "doc": "Source of the data to parse. If empty, it uses the log message.",
              "required": false,
              "default": null
            },
            {
              "name": "replace",
              "type": "string",
              "doc": "Value replaced by the capture group.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.sampling",
          "doc": "Samples logs at a given rate.",
          "required": false,
          "arguments": [
            {
              "name": "rate",
              "type": "float",
              "doc": "The sampling rate in a range of [0, 1]",
              "required": true,
              "default": null
            },
            {
              "name": "drop_counter_reason",
              "type": "string",
              "doc": "The label to add to loki_process_dropped_lines_total metric when logs are dropped by this stage.",
              "required": false,
              "default": "sampling_stage"
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.static_labels",
          "doc": "Configures a static_labels processing stage.",
          "required": false,
          "arguments": [
            {
              "name": "values",
              "type": "map(string)",
              "doc": "Configures a static_labels processing stage.",
              "required": false,
              "default": "{}"
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.structured_metadata",
          "doc": "Configures a structured metadata processing stage.",
          "required": false,
          "arguments": [
            {
              "name": "values",
              "type": "map(string)",
              "doc": "Specifies the list of labels to add from extracted values map to log entry.",
              "required": false,
              "default": "{}"
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.template",
          "doc": "Configures a template processing stage.",
          "required": false,
          "arguments": [
            {
              "name": "source",
              "type": "string",
              "doc": "Name from extracted data to parse. If the key doesn't exist, a new entry is created.",
              "required": true,
              "default": null
            },
            {
              "name": "template",
              "type": "string",
              "doc": "Go template string to use.",
              "required": true,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.tenant",
          "doc": "Configures a tenant processing stage.",
          "required": false,
          "arguments": [
            {
              "name": "label",
              "type": "string",
              "doc": "The label to set as tenant ID.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "source",
              "type": "string",
              "doc": "The name from the extracted value to use as tenant ID.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "value",
              "type": "string",
              "doc": "The value to set as the tenant ID.",
              "required": false,
              "default": "\"\""
            }
          ],
          "blocks": []
        },
        {
          "name": "stage.timestamp",
          "doc": "Configures a timestamp processing stage.",
          "required": false,
          "arguments": [
            {
              "name": "source",
              "type": "string",
              "doc": "Name from extracted values map to use for the timestamp.",
              "required": true,
              "default": null
            },
            {
              "name": "format",
              "type": "string",
              "doc": "Determines how to parse the source string.",
              "required": true,
              "default": null
            },
            {
              "name": "fallback_formats",
              "type": "list(string)",
              "doc": "Fallback formats to try if the format field fails.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "location",
              "type": "string",
              "doc": "IANA Timezone Database location to use when parsing.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "action_on_failure",
              "type": "string",
              "doc": "What to do when the timestamp can't be extracted or parsed.",
              "required": false,
              "default": "\"fudge\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "loki.relabel": {
      "name": "loki.relabel",
      "doc": "`loki.relabel` component rewrites the label set of each log entry passed to\nits receiver by applying one or more relabeling `rule`s and forwards the\nresults to the list of receivers in the component's arguments.",
      "arguments": [
        {
          "name": "forward_to",
          "type": "list(receiver)",
          "doc": "Where to forward log entries after relabeling.",
          "required": true,
          "default": null
        },
        {
          "name": "max_cache_size",
          "type": "int",
          "doc": "The maximum number of elements to hold in the relabeling cache",
          "required": false,
          "default": "10,000"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "receiver",
          "type": "receiver",
          "doc": "The input receiver where log lines are sent to be relabeled."
        },
        {
          "name": "rules",
          "type": "RelabelRules",
          "doc": "The currently configured relabeling rules."
        }
      ],
      "blocks": [
        {
          "name": "rule",
          "doc": "Relabeling rules to apply to received log entries.",
          "required": false,
          "arguments": [
            {
              "name": "action",
              "type": "string",
              "doc": "The relabeling action to perform.",
              "required": false,
              "default": "replace"
            },
            {
              "name": "modulus",
              "type": "uint",
              "doc": "A positive integer used to calculate the modulus of the hashed source label values.",
              "required": false,
              "default": null
            },
            {
              "name": "regex",
              "type": "string",
              "doc": "A valid RE2 expression with support for parenthesized capture groups. Used to match the extracted value from the combination of the source_label and separator fields or filter labels during the labelkeep/labeldrop/labelmap actions.",
              "required": false,
              "default": "(.*)"
            },
            {
              "name": "replacement",
              "type": "string",
              "doc": "The value against which a regular expression replace is performed if the regular expression matches the extracted value. Supports previously captured groups.",
              "required": false,
              "default": "\"$1\""
            },
            {
              "name": "separator",
              "type": "string",
              "doc": "The separator used to concatenate the values present in source_labels.",
              "required": false,
              "default": ";"
            },
            {
              "name": "source_labels",
              "type": "list(string)",
              "doc": "The list of labels whose values are to be selected. Their content is concatenated using the separator and matched against regex.",
              "required": false,
              "default": null
            },
            {
              "name": "target_label",
              "type": "string",
              "doc": "Label to which the resulting value is written to.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "loki.rules.kubernetes": {
      "name": "loki.rules.kubernetes",
      "doc": "`loki.rules.kubernetes` discovers `PrometheusRule` Kubernetes resources and\nloads them into a Loki instance.",
      "arguments": [
        {
          "name": "address",
          "type": "string",
          "doc": "URL of the Loki ruler.",
          "required": true,
          "default": null
        },
        {
          "name": "tenant_id",
          "type": "string",
          "doc": "Loki tenant ID.",
          "required": false,
          "default": null
        },
        {
          "name": "use_legacy_routes",
          "type": "bool",
          "doc": "Whether to use deprecated ruler API endpoints.",
          "required": false,
          "default": "false"
        },
        {
          "name": "sync_interval",
          "type": "duration",
          "doc": "Amount of time between reconciliations with Loki.",
          "required": false,
          "default": "\"30s\""
        },
        {
          "name": "loki_namespace_prefix",
          "type": "string",
          "doc": "Prefix used to differentiate multiple {{< param \"PRODUCT_NAME\" >}} deployments.",
          "required": false,
          "default": "\"alloy\""
        },
        {
          "name": "bearer_token",
          "type": "secret",
          "doc": "Bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token_file",
          "type": "string",
          "doc": "File containing a bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to proxy requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "rule_namespace_selector",
          "doc": "Label selector for Namespace resources.",
          "required": false,
          "arguments": [],
          "blocks": [
            {
              "name": "match_expression",
              "doc": "Label match expression for Namespace resources.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "The label name to match against.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "operator",
                  "type": "string",
                  "doc": "The operator to use when matching.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "values",
                  "type": "list(string)",
                  "doc": "The values used when matching.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "rule_selector",
          "doc": "Label selector for PrometheusRule resources.",
          "required": false,
          "arguments": [],
          "blocks": [
            {
              "name": "match_expression",
              "doc": "Label match expression for PrometheusRule resources.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "The label name to match against.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "operator",
                  "type": "string",
                  "doc": "The operator to use when matching.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "values",
                  "type": "list(string)",
                  "doc": "The values used when matching.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "authorization",
          "doc": "Configure generic authorization to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "credentials_file",
              "type": "string",
              "doc": "File containing the secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "credentials",
              "type": "secret",
              "doc": "Secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Authorization type, for example, \"Bearer\".",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "oauth2",
          "doc": "Configure OAuth2 for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "OAuth2 client ID.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret_file",
              "type": "string",
              "doc": "File containing the OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret",
              "type": "secret",
              "doc": "OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint_params",
              "type": "map(string)",
              "doc": "Optional parameters to append to the token URL.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            },
            {
              "name": "scopes",
              "type": "list(string)",
              "doc": "List of scopes to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "token_url",
              "type": "string",
              "doc": "URL to fetch the token from.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "loki.source.api": {
      "name": "loki.source.api",
      "doc": "`loki.source.api` receives log entries over HTTP and forwards them to other `loki.*` components.",
      "arguments": [
        {
          "name": "forward_to",
          "type": "list(LogsReceiver)",
          "doc": "List of receivers to send log entries to.",
          "required": true,
          "default": null
        },
        {
          "name": "use_incoming_timestamp",
          "type": "bool",
          "doc": "Whether or not to use the timestamp received from request.",
          "required": false,
          "default": "false"
        },
        {
          "name": "labels",
          "type": "map(string)",
          "doc": "The labels to associate with each received logs record.",
          "required": false,
          "default": "{}"
        },
        {
          "name": "relabel_rules",
          "type": "RelabelRules",
          "doc": "Relabeling rules to apply on log entries.",
          "required": false,
          "default": "{}"
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "http",
          "doc": "Configures the HTTP server that receives requests.",
          "required": false,
          "arguments": [
            {
              "name": "conn_limit",
              "type": "int",
              "doc": "Maximum number of simultaneous HTTP connections. Defaults to no limit.",
              "required": false,
              "default": "0"
            },
            {
              "name": "listen_address",
              "type": "string",
              "doc": "Network address on which the server listens for new connections. Defaults to accepting all incoming connections.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "listen_port",
              "type": "int",
              "doc": "Port number on which the server listens for new connections.",
              "required": false,
              "default": "8080"
            },
            {
              "name": "server_idle_timeout",
              "type": "duration",
              "doc": "Idle timeout for HTTP server.",
              "required": false,
              "default": "\"120s\""
            },
            {
              "name": "server_read_timeout",
              "type": "duration",
              "doc": "Read timeout for HTTP server.",
              "required": false,
              "default": "\"30s\""
            },
            {
              "name": "server_write_timeout",
              "type": "duration",
              "doc": "Write timeout for HTTP server.",
              "required": false,
              "default": "\"30s\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "loki.source.awsfirehose": {
      "name": "loki.source.awsfirehose",
      "doc": "`loki.source.awsfirehose` receives log entries over HTTP\nfrom [AWS Firehose](https://docs.aws.amazon.com/firehose/latest/dev/what-is-this-service.html)\nand forwards them to other `loki.*` components.",
      "arguments": [
        {
          "name": "forward_to",
          "type": "list(LogsReceiver)",
          "doc": "List of receivers to send log entries to.",
          "required": true,
          "default": null
        },
        {
          "name": "use_incoming_timestamp",
          "type": "bool",
          "doc": "Whether or not to use the timestamp received from the request.",
          "required": false,
          "default": "false"
        },
        {
          "name": "relabel_rules",
          "type": "RelabelRules",
          "doc": "Relabeling rules to apply on log entries.",
          "required": false,
          "default": "{}"
        },
        {
          "name": "access_key",
          "type": "secret",
          "doc": "If set, require AWS Firehose to provide a matching key.",
          "required": false,
          "default": "\"\""
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "http",
          "doc": "Configures the HTTP server that receives requests.",
          "required": false,
          "arguments": [
            {
              "name": "conn_limit",
              "type": "int",
              "doc": "Maximum number of simultaneous HTTP connections. Defaults to no limit.",
              "required": false,
              "default": "0"
            },
            {
              "name": "listen_address",
              "type": "string",
              "doc": "Network address on which the server listens for new connections. Defaults to accepting all incoming connections.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "listen_port",
              "type": "int",
              "doc": "Port number on which the server listens for new connections.",
              "required": false,
              "default": "8080"
            },
            {
              "name": "server_idle_timeout",
              "type": "duration",
              "doc": "Idle timeout for HTTP server.",
              "required": false,
              "default": "\"120s\""
            },
            {
              "name": "server_read_timeout",
              "type": "duration",
              "doc": "Read timeout for HTTP server.",
              "required": false,
              "default": "\"30s\""
            },
            {
              "name": "server_write_timeout",
              "type": "duration",
              "doc": "Write timeout for HTTP server.",
              "required": false,
              "default": "\"30s\""
            }
          ],
          "blocks": []
        },
        {
          "name": "grpc",
          "doc": "Configures the gRPC server that receives requests.",
          "required": false,
          "arguments": [
            {
              "name": "conn_limit",
              "type": "int",
              "doc": "Maximum number of simultaneous HTTP connections. Defaults to no limit.",
              "required": false,
              "default": "0"
            },
            {
              "name": "listen_address",
              "type": "string",
              "doc": "Network address on which the server listens for new connections. It defaults to accepting all incoming connections.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "listen_port",
              "type": "int",
              "doc": "Port number on which the server listens for new connections. Defaults to a random free port.",
              "required": false,
              "default": "0"
            },
            {
              "name": "max_connection_age_grace",
              "type": "duration",
              "doc": "An additive period after max_connection_age after which the connection is forcibly closed.",
              "required": false,
              "default": "\"infinity\""
            },
            {
              "name": "max_connection_age",
              "type": "duration",
              "doc": "The duration for the maximum time a connection may exist before it is closed.",
              "required": false,
              "default": "\"infinity\""
            },
            {
              "name": "max_connection_idle",
              "type": "duration",
              "doc": "The duration after which an idle connection is closed.",
              "required": false,
              "default": "\"infinity\""
            },
            {
              "name": "server_max_concurrent_streams",
              "type": "int",
              "doc": "Limit on the number of concurrent streams for gRPC calls (0 = unlimited).",
              "required": false,
              "default": "100"
            },
            {
              "name": "server_max_recv_msg_size",
              "type": "int",
              "doc": "Limit on the size of a gRPC message this server can receive (bytes).",
              "required": false,
              "default": "4MB"
            },
            {
              "name": "server_max_send_msg_size",
              "type": "int",
              "doc": "Limit on the size of a gRPC message this server can send (bytes).",
              "required": false,
              "default": "4MB"
            }
          ],
          "blocks": []
        }
      ]
    },
    "loki.source.azure_event_hubs": {
      "name": "loki.source.azure_event_hubs",
      "doc": "`loki.source.azure_event_hubs` receives Azure Event Hubs messages by making use of an Apache Kafka\nendpoint on Event Hubs. For more information, see\nthe [Azure Event Hubs documentation](https://learn.microsoft.com/en-us/azure/event-hubs/azure-event-hubs-kafka-overview).",
      "arguments": [
        {
          "name": "fully_qualified_namespace",
          "type": "string",
          "doc": "Event hub namespace.",
          "required": true,
          "default": null
        },
        {
          "name": "event_hubs",
          "type": "list(string)",
          "doc": "Event Hubs to consume.",
          "required": true,
          "default": null
        },
        {
          "name": "group_id",
          "type": "string",
          "doc": "The Kafka consumer group id.",
          "required": false,
          "default": "\"loki.source.azure_event_hubs\""
        },
        {
          "name": "assignor",
          "type": "string",
          "doc": "The consumer group rebalancing strategy to use.",
          "required": false,
          "default": "\"range\""
        },
        {
          "name": "use_incoming_timestamp",
          "type": "bool",
          "doc": "Whether or not to use the timestamp received from Azure Event Hub.",
          "required": false,
          "default": "false"
        },
        {
          "name": "labels",
          "type": "map(string)",
          "doc": "The labels to associate with each received event.",
          "required": false,
          "default": "{}"
        },
        {
          "name": "forward_to",
          "type": "list(LogsReceiver)",
          "doc": "List of receivers to send log entries to.",
          "required": true,
          "default": null
        },
        {
          "name": "relabel_rules",
          "type": "RelabelRules",
          "doc": "Relabeling rules to apply on log entries.",
          "required": false,
          "default": "{}"
        },
        {
          "name": "disallow_custom_messages",
          "type": "bool",
          "doc": "Whether to ignore messages that don't match the [schema](https://learn.microsoft.com/en-us/azure/azure-monitor/essentials/resource-logs-schema) for Azure resource logs.",
          "required": false,
          "default": "false"
        },
        {
          "name": "relabel_rules",
          "type": "RelabelRules",
          "doc": "Relabeling rules to apply on log entries.",
          "required": false,
          "default": "{}"
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "authentication",
          "doc": "Authentication configuration with Azure Event Hub.",
          "required": true,
          "arguments": [
            {
              "name": "mechanism",
              "type": "string",
              "doc": "Authentication mechanism.",
              "required": true,
              "default": null
            },
            {
              "name": "connection_string",
              "type": "string",
              "doc": "Event Hubs ConnectionString for authentication on Azure Cloud.",
              "required": false,
              "default": null
            },
            {
              "name": "scopes",
              "type": "list(string)",
              "doc": "Access token scopes. Default is fully_qualified_namespace without port.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "loki.source.cloudflare": {
      "name": "loki.source.cloudflare",
      "doc": "`loki.source.cloudflare` pulls logs from the Cloudflare Logpull API and forwards them to other `loki.*` components.",
      "arguments": [
        {
          "name": "forward_to",
          "type": "list(LogsReceiver)",
          "doc": "List of receivers to send log entries to.",
          "required": true,
          "default": null
        },
        {
          "name": "api_token",
          "type": "string",
          "doc": "The API token to authenticate with.",
          "required": true,
          "default": null
        },
        {
          "name": "zone_id",
          "type": "string",
          "doc": "The Cloudflare zone ID to use.",
          "required": true,
          "default": null
        },
        {
          "name": "labels",
          "type": "map(string)",
          "doc": "The labels to associate with incoming log entries.",
          "required": false,
          "default": "{}"
        },
        {
          "name": "workers",
          "type": "int",
          "doc": "The number of workers to use for parsing logs.",
          "required": false,
          "default": "3"
        },
        {
          "name": "pull_range",
          "type": "duration",
          "doc": "The timeframe to fetch for each pull request.",
          "required": false,
          "default": "\"1m\""
        },
        {
          "name": "fields_type",
          "type": "string",
          "doc": "The set of fields to fetch for log entries.",
          "required": false,
          "default": "\"default\""
        },
        {
          "name": "additional_fields",
          "type": "list(string)",
          "doc": "The additional list of fields to supplement those provided via fields_type.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": []
    },
    "loki.source.docker": {
      "name": "loki.source.docker",
      "doc": "`loki.source.docker` reads log entries from Docker containers and forwards them to other `loki.*` components. Each component can read from a single Docker daemon.",
      "arguments": [
        {
          "name": "host",
          "type": "string",
          "doc": "Address of the Docker daemon.",
          "required": true,
          "default": null
        },
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "List of containers to read logs from.",
          "required": true,
          "default": null
        },
        {
          "name": "forward_to",
          "type": "list(LogsReceiver)",
          "doc": "List of receivers to send log entries to.",
          "required": true,
          "default": null
        },
        {
          "name": "labels",
          "type": "map(string)",
          "doc": "The default set of labels to apply on entries.",
          "required": false,
          "default": "\"{}\""
        },
        {
          "name": "relabel_rules",
          "type": "RelabelRules",
          "doc": "Relabeling rules to apply on log entries.",
          "required": false,
          "default": "\"{}\""
        },
        {
          "name": "refresh_interval",
          "type": "duration",
          "doc": "The refresh interval to use when connecting to the Docker daemon over HTTP(S).",
          "required": false,
          "default": "\"60s\""
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "client",
          "doc": "HTTP client settings when connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "bearer_token_file",
              "type": "string",
              "doc": "File containing a bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token",
              "type": "secret",
              "doc": "Bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "enable_http2",
              "type": "bool",
              "doc": "Whether HTTP2 is supported for requests.",
              "required": false,
              "default": "true"
            },
            {
              "name": "follow_redirects",
              "type": "bool",
              "doc": "Whether redirects returned by the server should be followed.",
              "required": false,
              "default": "true"
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "basic_auth",
              "doc": "Configure basic_auth for authenticating to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "password_file",
                  "type": "string",
                  "doc": "File containing the basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "password",
                  "type": "secret",
                  "doc": "Basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "username",
                  "type": "string",
                  "doc": "Basic auth username.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "authorization",
              "doc": "Configure generic authorization to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "credentials_file",
                  "type": "string",
                  "doc": "File containing the secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "credentials",
                  "type": "secret",
                  "doc": "Secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "type",
                  "type": "string",
                  "doc": "Authorization type, for example, \"Bearer\".",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "oauth2",
              "doc": "Configure OAuth2 for authenticating to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "client_id",
                  "type": "string",
                  "doc": "OAuth2 client ID.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret_file",
                  "type": "string",
                  "doc": "File containing the OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret",
                  "type": "secret",
                  "doc": "OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "endpoint_params",
                  "type": "map(string)",
                  "doc": "Optional parameters to append to the token URL.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_url",
                  "type": "string",
                  "doc": "HTTP proxy to send requests through.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "no_proxy",
                  "type": "string",
                  "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_from_environment",
                  "type": "bool",
                  "doc": "Use the proxy URL indicated by environment variables.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "proxy_connect_header",
                  "type": "map(list(secret))",
                  "doc": "Specifies headers to send to proxies during CONNECT requests.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "scopes",
                  "type": "list(string)",
                  "doc": "List of scopes to authenticate with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "token_url",
                  "type": "string",
                  "doc": "URL to fetch the token from.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": [
                {
                  "name": "tls_config",
                  "doc": "Configure TLS settings for connecting to the endpoint.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "ca_pem",
                      "type": "string",
                      "doc": "CA PEM-encoded text to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "ca_file",
                      "type": "string",
                      "doc": "CA certificate to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_pem",
                      "type": "string",
                      "doc": "Certificate PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_file",
                      "type": "string",
                      "doc": "Certificate file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "insecure_skip_verify",
                      "type": "bool",
                      "doc": "Disables validation of the server certificate.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_file",
                      "type": "string",
                      "doc": "Key file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_pem",
                      "type": "secret",
                      "doc": "Key PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "min_version",
                      "type": "string",
                      "doc": "Minimum acceptable TLS version.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "server_name",
                      "type": "string",
                      "doc": "ServerName extension to indicate the name of the server.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                }
              ]
            },
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        }
      ]
    },
    "loki.source.file": {
      "name": "loki.source.file",
      "doc": "`loki.source.file` reads log entries from files and forwards them to other `loki.*` components.",
      "arguments": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "List of files to read from.",
          "required": true,
          "default": null
        },
        {
          "name": "forward_to",
          "type": "list(LogsReceiver)",
          "doc": "List of receivers to send log entries to.",
          "required": true,
          "default": null
        },
        {
          "name": "encoding",
          "type": "string",
          "doc": "The encoding to convert from when reading files.",
          "required": false,
          "default": "\"\""
        },
        {
          "name": "tail_from_end",
          "type": "bool",
          "doc": "Whether a log file is tailed from the end if a stored position isn't found.",
          "required": false,
          "default": "false"
        },
        {
          "name": "legacy_positions_file",
          "type": "string",
          "doc": "Allows conversion from legacy positions file.",
          "required": false,
          "default": "\"\""
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "decompression",
          "doc": "Configure reading logs from compressed files.",
          "required": false,
          "arguments": [
            {
              "name": "enabled",
              "type": "bool",
              "doc": "Whether decompression is enabled.",
              "required": true,
              "default": null
            },
            {
              "name": "initial_delay",
              "type": "duration",
              "doc": "Time to wait before starting to read from new compressed files.",
              "required": false,
              "default": "0"
            },
            {
              "name": "format",
              "type": "string",
              "doc": "Compression format.",
              "required": true,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "file_watch",
          "doc": "Configure how often files should be polled from disk for changes.",
          "required": false,
          "arguments": [
            {
              "name": "min_poll_frequency",
              "type": "duration",
              "doc": "Minimum frequency to poll for files.",
              "required": false,
              "default": "250ms"
            },
            {
              "name": "max_poll_frequency",
              "type": "duration",
              "doc": "Maximum frequency to poll for files.",
              "required": false,
              "default": "250ms"
            }
          ],
          "blocks": []
        }
      ]
    },
    "loki.source.gcplog": {
      "name": "loki.source.gcplog",
      "doc": "`loki.source.gcplog` retrieves logs from cloud resources such as GCS buckets,\nload balancers, or Kubernetes clusters running on GCP by making use of Pub/Sub\n[subscriptions](https://cloud.google.com/pubsub/docs/subscriber).",
      "arguments": [
        {
          "name": "forward_to",
          "type": "list(LogsReceiver)",
          "doc": "List of receivers to send log entries to.",
          "required": true,
          "default": null
        },
        {
          "name": "relabel_rules",
          "type": "RelabelRules",
          "doc": "Relabeling rules to apply on log entries.",
          "required": false,
          "default": "\"{}\""
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "pull",
          "doc": "Configures a target to pull logs from a GCP Pub/Sub subscription.",
          "required": false,
          "arguments": [
            {
              "name": "project_id",
              "type": "string",
              "doc": "The GCP project id the subscription belongs to.",
              "required": true,
              "default": null
            },
            {
              "name": "subscription",
              "type": "string",
              "doc": "The subscription to pull logs from.",
              "required": true,
              "default": null
            },
            {
              "name": "labels",
              "type": "map(string)",
              "doc": "Additional labels to associate with incoming logs.",
              "required": false,
              "default": "\"{}\""
            },
            {
              "name": "use_incoming_timestamp",
              "type": "bool",
              "doc": "Whether to use the incoming log timestamp.",
              "required": false,
              "default": "false"
            },
            {
              "name": "use_full_line",
              "type": "bool",
              "doc": "Send the full line from Cloud Logging even if textPayload is available.",
              "required": false,
              "default": "false"
            }
          ],
          "blocks": []
        },
        {
          "name": "push",
          "doc": "Configures a server to receive logs as GCP Pub/Sub push requests.",
          "required": false,
          "arguments": [
            {
              "name": "graceful_shutdown_timeout",
              "type": "duration",
              "doc": "Timeout for servers graceful shutdown. If configured, should be greater than zero.",
              "required": false,
              "default": "\"30s\""
            },
            {
              "name": "push_timeout",
              "type": "duration",
              "doc": "Sets a maximum processing time for each incoming GCP log entry.",
              "required": false,
              "default": "\"0s\""
            },
            {
              "name": "labels",
              "type": "map(string)",
              "doc": "Additional labels to associate with incoming entries.",
              "required": false,
              "default": "\"{}\""
            },
            {
              "name": "use_incoming_timestamp",
              "type": "bool",
              "doc": "Whether to use the incoming entry timestamp.",
              "required": false,
              "default": "false"
            },
            {
              "name": "use_full_line",
              "type": "bool",
              "doc": "Send the full line from Cloud Logging even if textPayload is available. By default, if textPayload is present in the line, then it's used as log line",
              "required": false,
              "default": "false"
            }
          ],
          "blocks": [
            {
              "name": "http",
              "doc": "Configures the HTTP server that receives requests when using the push mode.",
              "required": false,
              "arguments": [
                {
                  "name": "conn_limit",
                  "type": "int",
                  "doc": "Maximum number of simultaneous HTTP connections. Defaults to no limit.",
                  "required": false,
                  "default": "0"
                },
                {
                  "name": "listen_address",
                  "type": "string",
                  "doc": "Network address on which the server listens for new connections. Defaults to accepting all incoming connections.",
                  "required": false,
                  "default": "\"\""
                },
                {
                  "name": "listen_port",
                  "type": "int",
                  "doc": "Port number on which the server listens for new connections.",
                  "required": false,
                  "default": "8080"
                },
                {
                  "name": "server_idle_timeout",
                  "type": "duration",
                  "doc": "Idle timeout for HTTP server.",
                  "required": false,
                  "default": "\"120s\""
                },
                {
                  "name": "server_read_timeout",
                  "type": "duration",
                  "doc": "Read timeout for HTTP server.",
                  "required": false,
                  "default": "\"30s\""
                },
                {
                  "name": "server_write_timeout",
                  "type": "duration",
                  "doc": "Write timeout for HTTP server.",
                  "required": false,
                  "default": "\"30s\""
                }
              ],
              "blocks": []
            },
            {
              "name": "grpc",
              "doc": "Configures the gRPC server that receives requests when using the push mode.",
              "required": false,
              "arguments": [
                {
                  "name": "conn_limit",
                  "type": "int",
                  "doc": "Maximum number of simultaneous HTTP connections. Defaults to no limit.",
                  "required": false,
                  "default": "0"
                },
                {
                  "name": "listen_address",
                  "type": "string",
                  "doc": "Network address on which the server listens for new connections. It defaults to accepting all incoming connections.",
                  "required": false,
                  "default": "\"\""
                },
                {
                  "name": "listen_port",
                  "type": "int",
                  "doc": "Port number on which the server listens for new connections. Defaults to a random free port.",
                  "required": false,
                  "default": "0"
                },
                {
                  "name": "max_connection_age_grace",
                  "type": "duration",
                  "doc": "An additive period after max_connection_age after which the connection is forcibly closed.",
                  "required": false,
                  "default": "\"infinity\""
                },
                {
                  "name": "max_connection_age",
                  "type": "duration",
                  "doc": "The duration for the maximum time a connection may exist before it is closed.",
                  "required": false,
                  "default": "\"infinity\""
                },
                {
                  "name": "max_connection_idle",
                  "type": "duration",
                  "doc": "The duration after which an idle connection is closed.",
                  "required": false,
                  "default": "\"infinity\""
                },
                {
                  "name": "server_max_concurrent_streams",
                  "type": "int",
                  "doc": "Limit on the number of concurrent streams for gRPC calls (0 = unlimited).",
                  "required": false,
                  "default": "100"
                },
                {
                  "name": "server_max_recv_msg_size",
                  "type": "int",
                  "doc": "Limit on the size of a gRPC message this server can receive (bytes).",
                  "required": false,
                  "default": "4MB"
                },
                {
                  "name": "server_max_send_msg_size",
                  "type": "int",
                  "doc": "Limit on the size of a gRPC message this server can send (bytes).",
                  "required": false,
                  "default": "4MB"
                }
              ],
              "blocks": []
            }
          ]
        }
      ]
    },
    "loki.source.gelf": {
      "name": "loki.source.gelf",
      "doc": "`loki.source.gelf` reads [Graylog Extended Long Format (GELF) logs](https://github.com/Graylog2/graylog2-server) from a UDP listener and forwards them to other\n`loki.*` components.",
      "arguments": [
        {
          "name": "listen_address",
          "type": "string",
          "doc": "UDP address and port to listen for Graylog messages.",
          "required": false,
          "default": "0.0.0.0:12201"
        },
        {
          "name": "use_incoming_timestamp",
          "type": "bool",
          "doc": "When false, assigns the current timestamp to the log when it was processed",
          "required": false,
          "default": "false"
        },
        {
          "name": "relabel_rules",
          "type": "RelabelRules",
          "doc": "Relabeling rules to apply on log entries.",
          "required": false,
          "default": "\"{}\""
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": []
    },
    "loki.source.heroku": {
      "name": "loki.source.heroku",
      "doc": "`loki.source.heroku` listens for Heroku messages over TCP connections\nand forwards them to other `loki.*` components.",
      "arguments": [
        {
          "name": "use_incoming_timestamp",
          "type": "bool",
          "doc": "Whether or not to use the timestamp received from Heroku.",
          "required": false,
          "default": "false"
        },
        {
          "name": "labels",
          "type": "map(string)",
          "doc": "The labels to associate with each received Heroku record.",
          "required": false,
          "default": "{}"
        },
        {
          "name": "forward_to",
          "type": "list(LogsReceiver)",
          "doc": "List of receivers to send log entries to.",
          "required": true,
          "default": null
        },
        {
          "name": "relabel_rules",
          "type": "RelabelRules",
          "doc": "Relabeling rules to apply on log entries.",
          "required": false,
          "default": "{}"
        },
        {
          "name": "graceful_shutdown_timeout",
          "type": "duration",
          "doc": "Timeout for servers graceful shutdown. If configured, should be greater than zero.",
          "required": false,
          "default": "\"30s\""
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "http",
          "doc": "Configures the HTTP server that receives requests.",
          "required": false,
          "arguments": [
            {
              "name": "conn_limit",
              "type": "int",
              "doc": "Maximum number of simultaneous HTTP connections. Defaults to no limit.",
              "required": false,
              "default": "0"
            },
            {
              "name": "listen_address",
              "type": "string",
              "doc": "Network address on which the server listens for new connections. Defaults to accepting all incoming connections.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "listen_port",
              "type": "int",
              "doc": "Port number on which the server listens for new connections.",
              "required": false,
              "default": "8080"
            },
            {
              "name": "server_idle_timeout",
              "type": "duration",
              "doc": "Idle timeout for HTTP server.",
              "required": false,
              "default": "\"120s\""
            },
            {
              "name": "server_read_timeout",
              "type": "duration",
              "doc": "Read timeout for HTTP server.",
              "required": false,
              "default": "\"30s\""
            },
            {
              "name": "server_write_timeout",
              "type": "duration",
              "doc": "Write timeout for HTTP server.",
              "required": false,
              "default": "\"30s\""
            }
          ],
          "blocks": []
        },
        {
          "name": "grpc",
          "doc": "Configures the gRPC server that receives requests.",
          "required": false,
          "arguments": [
            {
              "name": "conn_limit",
              "type": "int",
              "doc": "Maximum number of simultaneous HTTP connections. Defaults to no limit.",
              "required": false,
              "default": "0"
            },
            {
              "name": "listen_address",
              "type": "string",
              "doc": "Network address on which the server listens for new connections. It defaults to accepting all incoming connections.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "listen_port",
              "type": "int",
              "doc": "Port number on which the server listens for new connections. Defaults to a random free port.",
              "required": false,
              "default": "0"
            },
            {
              "name": "max_connection_age_grace",
              "type": "duration",
              "doc": "An additive period after max_connection_age after which the connection is forcibly closed.",
              "required": false,
              "default": "\"infinity\""
            },
            {
              "name": "max_connection_age",
              "type": "duration",
              "doc": "The duration for the maximum time a connection may exist before it is closed.",
              "required": false,
              "default": "\"infinity\""
            },
            {
              "name": "max_connection_idle",
              "type": "duration",
              "doc": "The duration after which an idle connection is closed.",
              "required": false,
              "default": "\"infinity\""
            },
            {
              "name": "server_max_concurrent_streams",
              "type": "int",
              "doc": "Limit on the number of concurrent streams for gRPC calls (0 = unlimited).",
              "required": false,
              "default": "100"
            },
            {
              "name": "server_max_recv_msg_size",
              "type": "int",
              "doc": "Limit on the size of a gRPC message this server can receive (bytes).",
              "required": false,
              "default": "4MB"
            },
            {
              "name": "server_max_send_msg_size",
              "type": "int",
              "doc": "Limit on the size of a gRPC message this server can send (bytes).",
              "required": false,
              "default": "4MB"
            }
          ],
          "blocks": []
        }
      ]
    },
    "loki.source.journal": {
      "name": "loki.source.journal",
      "doc": "`loki.source.journal` reads from the systemd journal and forwards them to other `loki.*` components.",
      "arguments": [
        {
          "name": "format_as_json",
          "type": "bool",
          "doc": "Whether to forward the original journal entry as JSON.",
          "required": false,
          "default": "false"
        },
        {
          "name": "max_age",
          "type": "duration",
          "doc": "The oldest relative time from process start that will be read.",
          "required": false,
          "default": "\"7h\""
        },
        {
          "name": "path",
          "type": "string",
          "doc": "Path to a directory to read entries from.",
          "required": false,
          "default": "\"\""
        },
        {
          "name": "matches",
          "type": "string",
          "doc": "Journal matches to filter. The + character is not supported, only logical AND matches will be added.",
          "required": false,
          "default": "\"\""
        },
        {
          "name": "forward_to",
          "type": "list(LogsReceiver)",
          "doc": "List of receivers to send log entries to.",
          "required": true,
          "default": null
        },
        {
          "name": "relabel_rules",
          "type": "RelabelRules",
          "doc": "Relabeling rules to apply on log entries.",
          "required": false,
          "default": "{}"
        },
        {
          "name": "labels",
          "type": "map(string)",
          "doc": "The labels to apply to every log coming out of the journal.",
          "required": false,
          "default": "{}"
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": []
    },
    "loki.source.kafka": {
      "name": "loki.source.kafka",
      "doc": "`loki.source.kafka` reads messages from Kafka using a consumer group\nand forwards them to other `loki.*` components.",
      "arguments": [
        {
          "name": "brokers",
          "type": "list(string)",
          "doc": "The list of brokers to connect to Kafka.",
          "required": true,
          "default": null
        },
        {
          "name": "topics",
          "type": "list(string)",
          "doc": "The list of Kafka topics to consume.",
          "required": true,
          "default": null
        },
        {
          "name": "group_id",
          "type": "string",
          "doc": "The Kafka consumer group id.",
          "required": false,
          "default": "\"loki.source.kafka\""
        },
        {
          "name": "assignor",
          "type": "string",
          "doc": "The consumer group rebalancing strategy to use.",
          "required": false,
          "default": "\"range\""
        },
        {
          "name": "version",
          "type": "string",
          "doc": "Kafka version to connect to.",
          "required": false,
          "default": "\"2.2.1\""
        },
        {
          "name": "use_incoming_timestamp",
          "type": "bool",
          "doc": "Whether or not to use the timestamp received from Kafka.",
          "required": false,
          "default": "false"
        },
        {
          "name": "labels",
          "type": "map(string)",
          "doc": "The labels to associate with each received Kafka event.",
          "required": false,
          "default": "{}"
        },
        {
          "name": "forward_to",
          "type": "list(LogsReceiver)",
          "doc": "List of receivers to send log entries to.",
          "required": true,
          "default": null
        },
        {
          "name": "relabel_rules",
          "type": "RelabelRules",
          "doc": "Relabeling rules to apply on log entries.",
          "required": false,
          "default": "{}"
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "authentication",
          "doc": "Optional authentication configuration with Kafka brokers.",
          "required": false,
          "arguments": [
            {
              "name": "type",
              "type": "string",
              "doc": "Type of authentication.",
              "required": false,
              "default": "\"none\""
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Optional authentication configuration with Kafka brokers.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "sasl_config",
              "doc": "Optional authentication configuration with Kafka brokers.",
              "required": false,
              "arguments": [
                {
                  "name": "mechanism",
                  "type": "string",
                  "doc": "Specifies the SASL mechanism the client uses to authenticate with the broker.",
                  "required": false,
                  "default": "\"PLAIN\"\""
                },
                {
                  "name": "user",
                  "type": "string",
                  "doc": "The user name to use for SASL authentication.",
                  "required": false,
                  "default": "\"\""
                },
                {
                  "name": "password",
                  "type": "secret",
                  "doc": "The password to use for SASL authentication.",
                  "required": false,
                  "default": "\"\""
                },
                {
                  "name": "use_tls",
                  "type": "bool",
                  "doc": "If true, SASL authentication is executed over TLS.",
                  "required": false,
                  "default": "false"
                }
              ],
              "blocks": [
                {
                  "name": "tls_config",
                  "doc": "Optional authentication configuration with Kafka brokers.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "ca_pem",
                      "type": "string",
                      "doc": "CA PEM-encoded text to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "ca_file",
                      "type": "string",
                      "doc": "CA certificate to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_pem",
                      "type": "string",
                      "doc": "Certificate PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_file",
                      "type": "string",
                      "doc": "Certificate file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "insecure_skip_verify",
                      "type": "bool",
                      "doc": "Disables validation of the server certificate.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_file",
                      "type": "string",
                      "doc": "Key file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_pem",
                      "type": "secret",
                      "doc": "Key PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "min_version",
                      "type": "string",
                      "doc": "Minimum acceptable TLS version.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "server_name",
                      "type": "string",
                      "doc": "ServerName extension to indicate the name of the server.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                },
                {
                  "name": "oauth_config",
                  "doc": "Optional authentication configuration with Kafka brokers.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "token_provider",
                      "type": "string",
                      "doc": "The OAuth provider to be used. The only supported provider is azure.",
                      "required": true,
                      "default": "\"\""
                    },
                    {
                      "name": "scopes",
                      "type": "list(string)",
                      "doc": "The scopes to set in the access token",
                      "required": true,
                      "default": "[]"
                    }
                  ],
                  "blocks": []
                }
              ]
            }
          ]
        }
      ]
    },
    "loki.source.kubernetes": {
      "name": "loki.source.kubernetes",
      "doc": "`loki.source.kubernetes` tails logs from Kubernetes containers using the\nKubernetes API. It has the following benefits over `loki.source.file`:",
      "arguments": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "List of files to read from.",
          "required": true,
          "default": null
        },
        {
          "name": "forward_to",
          "type": "list(LogsReceiver)",
          "doc": "List of receivers to send log entries to.",
          "required": true,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "client",
          "doc": "Configures Kubernetes client used to tail logs.",
          "required": false,
          "arguments": [
            {
              "name": "api_server",
              "type": "string",
              "doc": "URL of the Kubernetes API server.",
              "required": false,
              "default": null
            },
            {
              "name": "kubeconfig_file",
              "type": "string",
              "doc": "Path of the kubeconfig file to use for connecting to Kubernetes.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token_file",
              "type": "string",
              "doc": "File containing a bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token",
              "type": "secret",
              "doc": "Bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "enable_http2",
              "type": "bool",
              "doc": "Whether HTTP2 is supported for requests.",
              "required": false,
              "default": "true"
            },
            {
              "name": "follow_redirects",
              "type": "bool",
              "doc": "Whether redirects returned by the server should be followed.",
              "required": false,
              "default": "true"
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "basic_auth",
              "doc": "Configure basic_auth for authenticating to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "password_file",
                  "type": "string",
                  "doc": "File containing the basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "password",
                  "type": "secret",
                  "doc": "Basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "username",
                  "type": "string",
                  "doc": "Basic auth username.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "authorization",
              "doc": "Configure generic authorization to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "credentials_file",
                  "type": "string",
                  "doc": "File containing the secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "credentials",
                  "type": "secret",
                  "doc": "Secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "type",
                  "type": "string",
                  "doc": "Authorization type, for example, \"Bearer\".",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "oauth2",
              "doc": "Configure OAuth2 for authenticating to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "client_id",
                  "type": "string",
                  "doc": "OAuth2 client ID.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret_file",
                  "type": "string",
                  "doc": "File containing the OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret",
                  "type": "secret",
                  "doc": "OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "endpoint_params",
                  "type": "map(string)",
                  "doc": "Optional parameters to append to the token URL.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_url",
                  "type": "string",
                  "doc": "HTTP proxy to send requests through.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "no_proxy",
                  "type": "string",
                  "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_from_environment",
                  "type": "bool",
                  "doc": "Use the proxy URL indicated by environment variables.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "proxy_connect_header",
                  "type": "map(list(secret))",
                  "doc": "Specifies headers to send to proxies during CONNECT requests.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "scopes",
                  "type": "list(string)",
                  "doc": "List of scopes to authenticate with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "token_url",
                  "type": "string",
                  "doc": "URL to fetch the token from.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": [
                {
                  "name": "tls_config",
                  "doc": "Configure TLS settings for connecting to the endpoint.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "ca_pem",
                      "type": "string",
                      "doc": "CA PEM-encoded text to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "ca_file",
                      "type": "string",
                      "doc": "CA certificate to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_pem",
                      "type": "string",
                      "doc": "Certificate PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_file",
                      "type": "string",
                      "doc": "Certificate file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "insecure_skip_verify",
                      "type": "bool",
                      "doc": "Disables validation of the server certificate.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_file",
                      "type": "string",
                      "doc": "Key file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_pem",
                      "type": "secret",
                      "doc": "Key PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "min_version",
                      "type": "string",
                      "doc": "Minimum acceptable TLS version.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "server_name",
                      "type": "string",
                      "doc": "ServerName extension to indicate the name of the server.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                }
              ]
            },
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "clustering",
          "doc": "Configure the component for when {{< param \"PRODUCT_NAME\" >}} is running in clustered mode.",
          "required": false,
          "arguments": [
            {
              "name": "enabled",
              "type": "bool",
              "doc": "Distribute log collection with other cluster nodes.",
              "required": true,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "loki.source.kubernetes_events": {
      "name": "loki.source.kubernetes_events",
      "doc": "`loki.source.kubernetes_events` tails events from the Kubernetes API and\nconverts them into log lines to forward to other `loki` components.",
      "arguments": [
        {
          "name": "job_name",
          "type": "string",
          "doc": "Value to use for job label for generated logs.",
          "required": false,
          "default": "\"loki.source.kubernetes_events\""
        },
        {
          "name": "log_format",
          "type": "string",
          "doc": "Format of the log.",
          "required": false,
          "default": "\"logfmt\""
        },
        {
          "name": "namespaces",
          "type": "list(string)",
          "doc": "Namespaces to watch for Events in.",
          "required": false,
          "default": "[]"
        },
        {
          "name": "forward_to",
          "type": "list(LogsReceiver)",
          "doc": "List of receivers to send log entries to.",
          "required": true,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "client",
          "doc": "Configures Kubernetes client used to tail logs.",
          "required": false,
          "arguments": [
            {
              "name": "api_server",
              "type": "string",
              "doc": "URL of the Kubernetes API server.",
              "required": false,
              "default": null
            },
            {
              "name": "kubeconfig_file",
              "type": "string",
              "doc": "Path of the kubeconfig file to use for connecting to Kubernetes.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token_file",
              "type": "string",
              "doc": "File containing a bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token",
              "type": "secret",
              "doc": "Bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "enable_http2",
              "type": "bool",
              "doc": "Whether HTTP2 is supported for requests.",
              "required": false,
              "default": "true"
            },
            {
              "name": "follow_redirects",
              "type": "bool",
              "doc": "Whether redirects returned by the server should be followed.",
              "required": false,
              "default": "true"
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "basic_auth",
              "doc": "Configure basic_auth for authenticating to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "password_file",
                  "type": "string",
                  "doc": "File containing the basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "password",
                  "type": "secret",
                  "doc": "Basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "username",
                  "type": "string",
                  "doc": "Basic auth username.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "authorization",
              "doc": "Configure generic authorization to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "credentials_file",
                  "type": "string",
                  "doc": "File containing the secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "credentials",
                  "type": "secret",
                  "doc": "Secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "type",
                  "type": "string",
                  "doc": "Authorization type, for example, \"Bearer\".",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "oauth2",
              "doc": "Configure OAuth2 for authenticating to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "client_id",
                  "type": "string",
                  "doc": "OAuth2 client ID.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret_file",
                  "type": "string",
                  "doc": "File containing the OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret",
                  "type": "secret",
                  "doc": "OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "endpoint_params",
                  "type": "map(string)",
                  "doc": "Optional parameters to append to the token URL.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_url",
                  "type": "string",
                  "doc": "HTTP proxy to send requests through.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "no_proxy",
                  "type": "string",
                  "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_from_environment",
                  "type": "bool",
                  "doc": "Use the proxy URL indicated by environment variables.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "proxy_connect_header",
                  "type": "map(list(secret))",
                  "doc": "Specifies headers to send to proxies during CONNECT requests.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "scopes",
                  "type": "list(string)",
                  "doc": "List of scopes to authenticate with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "token_url",
                  "type": "string",
                  "doc": "URL to fetch the token from.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": [
                {
                  "name": "tls_config",
                  "doc": "Configure TLS settings for connecting to the endpoint.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "ca_pem",
                      "type": "string",
                      "doc": "CA PEM-encoded text to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "ca_file",
                      "type": "string",
                      "doc": "CA certificate to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_pem",
                      "type": "string",
                      "doc": "Certificate PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_file",
                      "type": "string",
                      "doc": "Certificate file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "insecure_skip_verify",
                      "type": "bool",
                      "doc": "Disables validation of the server certificate.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_file",
                      "type": "string",
                      "doc": "Key file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_pem",
                      "type": "secret",
                      "doc": "Key PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "min_version",
                      "type": "string",
                      "doc": "Minimum acceptable TLS version.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "server_name",
                      "type": "string",
                      "doc": "ServerName extension to indicate the name of the server.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                }
              ]
            },
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        }
      ]
    },
    "loki.source.podlogs": {
      "name": "loki.source.podlogs",
      "doc": "`loki.source.podlogs` discovers `PodLogs` resources on Kubernetes.\nThe `PodLogs` resources provide rules for which Kubernetes Pods to discover on your cluster.",
      "arguments": [
        {
          "name": "forward_to",
          "type": "list(LogsReceiver)",
          "doc": "List of receivers to send log entries to.",
          "required": true,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "client",
          "doc": "Configures Kubernetes client used to tail logs.",
          "required": false,
          "arguments": [
            {
              "name": "api_server",
              "type": "string",
              "doc": "URL of the Kubernetes API server.",
              "required": false,
              "default": null
            },
            {
              "name": "kubeconfig_file",
              "type": "string",
              "doc": "Path of the kubeconfig file to use for connecting to Kubernetes.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token_file",
              "type": "string",
              "doc": "File containing a bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token",
              "type": "secret",
              "doc": "Bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "enable_http2",
              "type": "bool",
              "doc": "Whether HTTP2 is supported for requests.",
              "required": false,
              "default": "true"
            },
            {
              "name": "follow_redirects",
              "type": "bool",
              "doc": "Whether redirects returned by the server should be followed.",
              "required": false,
              "default": "true"
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "basic_auth",
              "doc": "Configure basic_auth for authenticating to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "password_file",
                  "type": "string",
                  "doc": "File containing the basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "password",
                  "type": "secret",
                  "doc": "Basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "username",
                  "type": "string",
                  "doc": "Basic auth username.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "authorization",
              "doc": "Configure generic authorization to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "credentials_file",
                  "type": "string",
                  "doc": "File containing the secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "credentials",
                  "type": "secret",
                  "doc": "Secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "type",
                  "type": "string",
                  "doc": "Authorization type, for example, \"Bearer\".",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "oauth2",
              "doc": "Configure OAuth2 for authenticating to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "client_id",
                  "type": "string",
                  "doc": "OAuth2 client ID.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret_file",
                  "type": "string",
                  "doc": "File containing the OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret",
                  "type": "secret",
                  "doc": "OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "endpoint_params",
                  "type": "map(string)",
                  "doc": "Optional parameters to append to the token URL.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_url",
                  "type": "string",
                  "doc": "HTTP proxy to send requests through.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "no_proxy",
                  "type": "string",
                  "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_from_environment",
                  "type": "bool",
                  "doc": "Use the proxy URL indicated by environment variables.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "proxy_connect_header",
                  "type": "map(list(secret))",
                  "doc": "Specifies headers to send to proxies during CONNECT requests.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "scopes",
                  "type": "list(string)",
                  "doc": "List of scopes to authenticate with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "token_url",
                  "type": "string",
                  "doc": "URL to fetch the token from.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": [
                {
                  "name": "tls_config",
                  "doc": "Configure TLS settings for connecting to the endpoint.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "ca_pem",
                      "type": "string",
                      "doc": "CA PEM-encoded text to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "ca_file",
                      "type": "string",
                      "doc": "CA certificate to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_pem",
                      "type": "string",
                      "doc": "Certificate PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_file",
                      "type": "string",
                      "doc": "Certificate file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "insecure_skip_verify",
                      "type": "bool",
                      "doc": "Disables validation of the server certificate.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_file",
                      "type": "string",
                      "doc": "Key file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_pem",
                      "type": "secret",
                      "doc": "Key PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "min_version",
                      "type": "string",
                      "doc": "Minimum acceptable TLS version.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "server_name",
                      "type": "string",
                      "doc": "ServerName extension to indicate the name of the server.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                }
              ]
            },
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "selector",
          "doc": "Label selector for which PodLogs to discover.",
          "required": false,
          "arguments": [
            {
              "name": "match_labels",
              "type": "map(string)",
              "doc": "Label keys and values used to discover resources.",
              "required": false,
              "default": "{}"
            }
          ],
          "blocks": [
            {
              "name": "match_expression",
              "doc": "Label selector expression for which PodLogs to discover.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "The label name to match against.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "operator",
                  "type": "string",
                  "doc": "The operator to use when matching.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "values",
                  "type": "list(string)",
                  "doc": "The values used when matching.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "namespace_selector",
          "doc": "Label selector for which namespaces to discover PodLogs in.",
          "required": false,
          "arguments": [],
          "blocks": [
            {
              "name": "match_expression",
              "doc": "Label selector expression for which namespaces to discover PodLogs in.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "The label name to match against.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "operator",
                  "type": "string",
                  "doc": "The operator to use when matching.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "values",
                  "type": "list(string)",
                  "doc": "The values used when matching.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "clustering",
          "doc": "Configure the component for when {{< param \"PRODUCT_NAME\" >}} is running in clustered mode.",
          "required": false,
          "arguments": [
            {
              "name": "enabled",
              "type": "bool",
              "doc": "Distribute log collection with other cluster nodes.",
              "required": true,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "loki.source.syslog": {
      "name": "loki.source.syslog",
      "doc": "`loki.source.syslog` listens for syslog messages over TCP or UDP connections\nand forwards them to other `loki.*` components. The messages must be compliant\nwith the [RFC5424](https://www.rfc-editor.org/rfc/rfc5424) format.",
      "arguments": [
        {
          "name": "forward_to",
          "type": "list(LogsReceiver)",
          "doc": "List of receivers to send log entries to.",
          "required": true,
          "default": null
        },
        {
          "name": "relabel_rules",
          "type": "RelabelRules",
          "doc": "Relabeling rules to apply on log entries.",
          "required": false,
          "default": "\"{}\""
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "listener",
          "doc": "Configures a listener for IETF Syslog (RFC5424) messages.",
          "required": false,
          "arguments": [
            {
              "name": "address",
              "type": "string",
              "doc": "The <host:port> address to listen to for syslog messages.",
              "required": true,
              "default": null
            },
            {
              "name": "protocol",
              "type": "string",
              "doc": "The protocol to listen to for syslog messages. Must be either tcp or udp.",
              "required": false,
              "default": "tcp"
            },
            {
              "name": "idle_timeout",
              "type": "duration",
              "doc": "The idle timeout for tcp connections.",
              "required": false,
              "default": "\"120s\""
            },
            {
              "name": "label_structured_data",
              "type": "bool",
              "doc": "Whether to translate syslog structured data to loki labels.",
              "required": false,
              "default": "false"
            },
            {
              "name": "labels",
              "type": "map(string)",
              "doc": "The labels to associate with each received syslog record.",
              "required": false,
              "default": "{}"
            },
            {
              "name": "use_incoming_timestamp",
              "type": "bool",
              "doc": "Whether to set the timestamp to the incoming syslog record timestamp.",
              "required": false,
              "default": "false"
            },
            {
              "name": "use_rfc5424_message",
              "type": "bool",
              "doc": "Whether to forward the full RFC5424-formatted syslog message.",
              "required": false,
              "default": "false"
            },
            {
              "name": "max_message_length",
              "type": "int",
              "doc": "The maximum limit to the length of syslog messages.",
              "required": false,
              "default": "8192"
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Configures TLS settings for connecting to the endpoint for TCP connections.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        }
      ]
    },
    "loki.source.windowsevent": {
      "name": "loki.source.windowsevent",
      "doc": "`loki.source.windowsevent` reads events from Windows Event Logs and forwards them to other `loki.*` components.",
      "arguments": [
        {
          "name": "locale",
          "type": "number",
          "doc": "Locale ID for event rendering. 0 default is Windows Locale.",
          "required": false,
          "default": "0"
        },
        {
          "name": "eventlog_name",
          "type": "string",
          "doc": "Event log to read from.",
          "required": false,
          "default": null
        },
        {
          "name": "xpath_query",
          "type": "string",
          "doc": "Event log to read from.",
          "required": false,
          "default": "\"*\""
        },
        {
          "name": "bookmark_path",
          "type": "string",
          "doc": "Keeps position in event log.",
          "required": false,
          "default": "\"DATA_PATH/bookmark.xml\""
        },
        {
          "name": "poll_interval",
          "type": "duration",
          "doc": "How often to poll the event log.",
          "required": false,
          "default": "\"3s\""
        },
        {
          "name": "exclude_event_data",
          "type": "bool",
          "doc": "Exclude event data.",
          "required": false,
          "default": "false"
        },
        {
          "name": "exclude_user_data",
          "type": "bool",
          "doc": "Exclude user data.",
          "required": false,
          "default": "false"
        },
        {
          "name": "exclude_event_message",
          "type": "bool",
          "doc": "Exclude the human-friendly event message.",
          "required": false,
          "default": "false"
        },
        {
          "name": "use_incoming_timestamp",
          "type": "bool",
          "doc": "When false, assigns the current timestamp to the log.",
          "required": false,
          "default": "false"
        },
        {
          "name": "forward_to",
          "type": "list(LogsReceiver)",
          "doc": "List of receivers to send log entries to.",
          "required": true,
          "default": null
        },
        {
          "name": "labels",
          "type": "map(string)",
          "doc": "The labels to associate with incoming logs.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": []
    },
    "loki.write": {
      "name": "loki.write",
      "doc": "`loki.write` receives log entries from other loki components and sends them over the network using the Loki `logproto` format.",
      "arguments": [
        {
          "name": "max_streams",
          "type": "int",
          "doc": "Maximum number of active streams.",
          "required": false,
          "default": "0 (no limit)"
        },
        {
          "name": "external_labels",
          "type": "map(string)",
          "doc": "Labels to add to logs sent over the network.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "receiver",
          "type": "LogsReceiver",
          "doc": "A value that other components can use to send log entries to."
        }
      ],
      "blocks": [
        {
          "name": "endpoint",
          "doc": "Location to send logs to.",
          "required": false,
          "arguments": [
            {
              "name": "url",
              "type": "string",
              "doc": "Full URL to send logs to.",
              "required": true,
              "default": null
            },
            {
              "name": "name",
              "type": "string",
              "doc": "Optional name to identify this endpoint with.",
              "required": false,
              "default": null
            },
            {
              "name": "headers",
              "type": "map(string)",
              "doc": "Extra headers to deliver with the request.",
              "required": false,
              "default": null
            },
            {
              "name": "batch_wait",
              "type": "duration",
              "doc": "Maximum amount of time to wait before sending a batch.",
              "required": false,
              "default": "\"1s\""
            },
            {
              "name": "batch_size",
              "type": "string",
              "doc": "Maximum batch size of logs to accumulate before sending.",
              "required": false,
              "default": "\"1MiB\""
            },
            {
              "name": "remote_timeout",
              "type": "duration",
              "doc": "Timeout for requests made to the URL.",
              "required": false,
              "default": "\"10s\""
            },
            {
              "name": "tenant_id",
              "type": "string",
              "doc": "The tenant ID used by default to push logs.",
              "required": false,
              "default": null
            },
            {
              "name": "min_backoff_period",
              "type": "duration",
              "doc": "Initial backoff time between retries.",
              "required": false,
              "default": "\"500ms\""
            },
            {
              "name": "max_backoff_period",
              "type": "duration",
              "doc": "Maximum backoff time between retries.",
              "required": false,
              "default": "\"5m\""
            },
            {
              "name": "max_backoff_retries",
              "type": "int",
              "doc": "Maximum number of retries.",
              "required": false,
              "default": "10"
            },
            {
              "name": "retry_on_http_429",
              "type": "bool",
              "doc": "Retry when an HTTP 429 status code is received.",
              "required": false,
              "default": "true"
            },
            {
              "name": "bearer_token_file",
              "type": "string",
              "doc": "File containing a bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token",
              "type": "secret",
              "doc": "Bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "enable_http2",
              "type": "bool",
              "doc": "Whether HTTP2 is supported for requests.",
              "required": false,
              "default": "true"
            },
            {
              "name": "follow_redirects",
              "type": "bool",
              "doc": "Whether redirects returned by the server should be followed.",
              "required": false,
              "default": "true"
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "basic_auth",
              "doc": "Configure basic_auth for authenticating to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "password_file",
                  "type": "string",
                  "doc": "File containing the basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "password",
                  "type": "secret",
                  "doc": "Basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "username",
                  "type": "string",
                  "doc": "Basic auth username.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "authorization",
              "doc": "Configure generic authorization to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "credentials_file",
                  "type": "string",
                  "doc": "File containing the secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "credentials",
                  "type": "secret",
                  "doc": "Secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "type",
                  "type": "string",
                  "doc": "Authorization type, for example, \"Bearer\".",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "oauth2",
              "doc": "Configure OAuth2 for authenticating to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "client_id",
                  "type": "string",
                  "doc": "OAuth2 client ID.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret_file",
                  "type": "string",
                  "doc": "File containing the OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret",
                  "type": "secret",
                  "doc": "OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "endpoint_params",
                  "type": "map(string)",
                  "doc": "Optional parameters to append to the token URL.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_url",
                  "type": "string",
                  "doc": "HTTP proxy to send requests through.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "no_proxy",
                  "type": "string",
                  "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_from_environment",
                  "type": "bool",
                  "doc": "Use the proxy URL indicated by environment variables.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "proxy_connect_header",
                  "type": "map(list(secret))",
                  "doc": "Specifies headers to send to proxies during CONNECT requests.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "scopes",
                  "type": "list(string)",
                  "doc": "List of scopes to authenticate with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "token_url",
                  "type": "string",
                  "doc": "URL to fetch the token from.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": [
                {
                  "name": "tls_config",
                  "doc": "Configure TLS settings for connecting to the endpoint.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "ca_pem",
                      "type": "string",
                      "doc": "CA PEM-encoded text to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "ca_file",
                      "type": "string",
                      "doc": "CA certificate to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_pem",
                      "type": "string",
                      "doc": "Certificate PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_file",
                      "type": "string",
                      "doc": "Certificate file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "insecure_skip_verify",
                      "type": "bool",
                      "doc": "Disables validation of the server certificate.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_file",
                      "type": "string",
                      "doc": "Key file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_pem",
                      "type": "secret",
                      "doc": "Key PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "min_version",
                      "type": "string",
                      "doc": "Minimum acceptable TLS version.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "server_name",
                      "type": "string",
                      "doc": "ServerName extension to indicate the name of the server.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                }
              ]
            },
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "queue_config",
              "doc": "When WAL is enabled, configures the queue client.",
              "required": false,
              "arguments": [
                {
                  "name": "capacity",
                  "type": "string",
                  "doc": "Controls the size of the underlying send queue buffer. This setting should be considered a worst-case scenario of memory consumption, in which all enqueued batches are full.",
                  "required": false,
                  "default": "10MiB"
                },
                {
                  "name": "drain_timeout",
                  "type": "duration",
                  "doc": "Configures the maximum time the client can take to drain the send queue upon shutdown. During that time, it will enqueue pending batches and drain the send queue sending each.",
                  "required": false,
                  "default": "\"1m\""
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "wal",
          "doc": "Write-ahead log configuration.",
          "required": false,
          "arguments": [
            {
              "name": "enabled",
              "type": "bool",
              "doc": "Whether to enable the WAL.",
              "required": false,
              "default": "false"
            },
            {
              "name": "max_segment_age",
              "type": "duration",
              "doc": "Maximum time a WAL segment should be allowed to live. Segments older than this setting will be eventually deleted.",
              "required": false,
              "default": "\"1h\""
            },
            {
              "name": "min_read_frequency",
              "type": "duration",
              "doc": "Minimum backoff time in the backup read mechanism.",
              "required": false,
              "default": "\"250ms\""
            },
            {
              "name": "max_read_frequency",
              "type": "duration",
              "doc": "Maximum backoff time in the backup read mechanism.",
              "required": false,
              "default": "\"1s\""
            },
            {
              "name": "drain_timeout",
              "type": "duration",
              "doc": "Maximum time the WAL drain procedure can take, before being forcefully stopped.",
              "required": false,
              "default": "\"30s\""
            }
          ],
          "blocks": []
        }
      ]
    }
  },
  "mimir": {
    "mimir.rules.kubernetes": {
      "name": "mimir.rules.kubernetes",
      "doc": "`mimir.rules.kubernetes` discovers `PrometheusRule` Kubernetes resources and\nloads them into a Mimir instance.",
      "arguments": [
        {
          "name": "address",
          "type": "string",
          "doc": "URL of the Mimir ruler.",
          "required": true,
          "default": null
        },
        {
          "name": "tenant_id",
          "type": "string",
          "doc": "Mimir tenant ID.",
          "required": false,
          "default": null
        },
        {
          "name": "use_legacy_routes",
          "type": "bool",
          "doc": "Whether to use [deprecated][gem-2_2] ruler API endpoints.",
          "required": false,
          "default": "false"
        },
        {
          "name": "prometheus_http_prefix",
          "type": "string",
          "doc": "Path prefix for [Mimir's Prometheus endpoint][gem-path-prefix].",
          "required": false,
          "default": "/prometheus"
        },
        {
          "name": "sync_interval",
          "type": "duration",
          "doc": "Amount of time between reconciliations with Mimir.",
          "required": false,
          "default": "\"5m\""
        },
        {
          "name": "mimir_namespace_prefix",
          "type": "string",
          "doc": "Prefix used to differentiate multiple {{< param \"PRODUCT_NAME\" >}} deployments.",
          "required": false,
          "default": "\"alloy\""
        },
        {
          "name": "bearer_token_file",
          "type": "string",
          "doc": "File containing a bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token",
          "type": "secret",
          "doc": "Bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "rule_namespace_selector",
          "doc": "Label selector for Namespace resources.",
          "required": false,
          "arguments": [],
          "blocks": [
            {
              "name": "match_expression",
              "doc": "Label match expression for Namespace resources.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "The label name to match against.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "operator",
                  "type": "string",
                  "doc": "The operator to use when matching.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "values",
                  "type": "list(string)",
                  "doc": "The values used when matching.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "rule_selector",
          "doc": "Label selector for PrometheusRule resources.",
          "required": false,
          "arguments": [],
          "blocks": [
            {
              "name": "match_expression",
              "doc": "Label match expression for PrometheusRule resources.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "The label name to match against.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "operator",
                  "type": "string",
                  "doc": "The operator to use when matching.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "values",
                  "type": "list(string)",
                  "doc": "The values used when matching.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "authorization",
          "doc": "Configure generic authorization to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "credentials_file",
              "type": "string",
              "doc": "File containing the secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "credentials",
              "type": "secret",
              "doc": "Secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Authorization type, for example, \"Bearer\".",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "oauth2",
          "doc": "Configure OAuth2 for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "OAuth2 client ID.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret_file",
              "type": "string",
              "doc": "File containing the OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret",
              "type": "secret",
              "doc": "OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint_params",
              "type": "map(string)",
              "doc": "Optional parameters to append to the token URL.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            },
            {
              "name": "scopes",
              "type": "list(string)",
              "doc": "List of scopes to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "token_url",
              "type": "string",
              "doc": "URL to fetch the token from.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    }
  },
  "otelcol": {
    "otelcol.auth.basic": {
      "name": "otelcol.auth.basic",
      "doc": "`otelcol.auth.basic` exposes a `handler` that can be used by other `otelcol`\ncomponents to authenticate requests using basic authentication.",
      "arguments": [
        {
          "name": "username",
          "type": "string",
          "doc": "Username to use for basic authentication requests.",
          "required": true,
          "default": null
        },
        {
          "name": "password",
          "type": "secret",
          "doc": "Password to use for basic authentication requests.",
          "required": true,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "handler",
          "type": "capsule(otelcol.Handler)",
          "doc": "A value that other components can use to authenticate requests."
        }
      ],
      "blocks": [
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.auth.bearer": {
      "name": "otelcol.auth.bearer",
      "doc": "`otelcol.auth.bearer` exposes a `handler` that can be used by other `otelcol`\ncomponents to authenticate requests using bearer token authentication.",
      "arguments": [
        {
          "name": "token",
          "type": "secret",
          "doc": "Bearer token to use for authenticating requests.",
          "required": true,
          "default": null
        },
        {
          "name": "scheme",
          "type": "string",
          "doc": "Authentication scheme name.",
          "required": false,
          "default": "\"Bearer\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "handler",
          "type": "capsule(otelcol.Handler)",
          "doc": "A value that other components can use to authenticate requests."
        }
      ],
      "blocks": [
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.auth.headers": {
      "name": "otelcol.auth.headers",
      "doc": "`otelcol.auth.headers` exposes a `handler` that can be used by other `otelcol`\ncomponents to authenticate requests using custom headers.",
      "arguments": [],
      "hasLabel": true,
      "exports": [
        {
          "name": "handler",
          "type": "capsule(otelcol.Handler)",
          "doc": "A value that other components can use to authenticate requests."
        }
      ],
      "blocks": [
        {
          "name": "header",
          "doc": "Custom header to attach to requests.",
          "required": false,
          "arguments": [
            {
              "name": "key",
              "type": "string",
              "doc": "Name of the header to set.",
              "required": true,
              "default": null
            },
            {
              "name": "value",
              "type": "string or secret",
              "doc": "Value of the header.",
              "required": false,
              "default": null
            },
            {
              "name": "from_context",
              "type": "string",
              "doc": "Metadata name to get header value from.",
              "required": false,
              "default": null
            },
            {
              "name": "action",
              "type": "string",
              "doc": "An action to perform on the header",
              "required": false,
              "default": "\"upsert\""
            }
          ],
          "blocks": []
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.auth.oauth2": {
      "name": "otelcol.auth.oauth2",
      "doc": "`otelcol.auth.oauth2` exposes a `handler` that can be used by other `otelcol` components to authenticate requests using OAuth 2.0.",
      "arguments": [
        {
          "name": "client_id",
          "type": "string",
          "doc": "The client identifier issued to the client.",
          "required": false,
          "default": null
        },
        {
          "name": "client_id_file",
          "type": "string",
          "doc": "The file path to retrieve the client identifier issued to the client.",
          "required": false,
          "default": null
        },
        {
          "name": "client_secret",
          "type": "secret",
          "doc": "The secret string associated with the client identifier.",
          "required": false,
          "default": null
        },
        {
          "name": "client_secret_file",
          "type": "secret",
          "doc": "The file path to retrieve the secret string associated with the client identifier.",
          "required": false,
          "default": null
        },
        {
          "name": "token_url",
          "type": "string",
          "doc": "The server endpoint URL from which to get tokens.",
          "required": true,
          "default": null
        },
        {
          "name": "endpoint_params",
          "type": "map(list(string))",
          "doc": "Additional parameters that are sent to the token endpoint.",
          "required": false,
          "default": "{}"
        },
        {
          "name": "scopes",
          "type": "list(string)",
          "doc": "Requested permissions associated for the client.",
          "required": false,
          "default": "[]"
        },
        {
          "name": "timeout",
          "type": "duration",
          "doc": "The timeout on the client connecting to token_url.",
          "required": false,
          "default": "\"0s\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "handler",
          "type": "capsule(otelcol.Handler)",
          "doc": "A value that other components can use to authenticate requests."
        }
      ],
      "blocks": [
        {
          "name": "tls",
          "doc": "TLS settings for the token client.",
          "required": false,
          "arguments": [
            {
              "name": "ca_file",
              "type": "string",
              "doc": "Path to the CA file.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Path to the TLS certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "boolean",
              "doc": "Ignores insecure server TLS certificates.",
              "required": false,
              "default": null
            },
            {
              "name": "include_system_ca_certs_pool",
              "type": "boolean",
              "doc": "Whether to load the system certificate authorities pool alongside the certificate authority.",
              "required": false,
              "default": "false"
            },
            {
              "name": "insecure",
              "type": "boolean",
              "doc": "Disables TLS when connecting to the configured server.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Path to the TLS certificate key.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "max_version",
              "type": "string",
              "doc": "Maximum acceptable TLS version for connections.",
              "required": false,
              "default": "\"TLS 1.3\""
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version for connections.",
              "required": false,
              "default": "\"TLS 1.2\""
            },
            {
              "name": "cipher_suites",
              "type": "list(string)",
              "doc": "A list of TLS cipher suites that the TLS transport can use.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "reload_interval",
              "type": "duration",
              "doc": "The duration after which the certificate is reloaded.",
              "required": false,
              "default": "\"0s\""
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "Verifies the hostname of server certificates when set.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.auth.sigv4": {
      "name": "otelcol.auth.sigv4",
      "doc": "`otelcol.auth.sigv4` exposes a `handler` that can be used by other `otelcol`\ncomponents to authenticate requests to AWS services using the AWS Signature Version 4 (SigV4) protocol.\nFor more information about SigV4 see the AWS documentation about [Signing AWS API requests][].",
      "arguments": [
        {
          "name": "region",
          "type": "string",
          "doc": "The AWS region to sign with.",
          "required": false,
          "default": "\"\""
        },
        {
          "name": "service",
          "type": "string",
          "doc": "The AWS service to sign with.",
          "required": false,
          "default": "\"\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "handler",
          "type": "capsule(otelcol.Handler)",
          "doc": "A value that other components can use to authenticate requests."
        }
      ],
      "blocks": [
        {
          "name": "assume_role",
          "doc": "Configuration for assuming a role.",
          "required": false,
          "arguments": [
            {
              "name": "arn",
              "type": "string",
              "doc": "The Amazon Resource Name (ARN) of a role to assume.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "session_name",
              "type": "string",
              "doc": "The name of a role session.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "sts_region",
              "type": "string",
              "doc": "The AWS region where STS is used to assume the configured role.",
              "required": false,
              "default": "\"\""
            }
          ],
          "blocks": []
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.connector.host_info": {
      "name": "otelcol.connector.host_info",
      "doc": "`otelcol.connector.host_info` supports the following arguments:",
      "arguments": [
        {
          "name": "host_identifiers",
          "type": "list(string)",
          "doc": "Ordered list of resource attributes used to identify unique hosts.",
          "required": false,
          "default": "[\"host.id\"]"
        },
        {
          "name": "metrics_flush_interval",
          "type": "duration",
          "doc": "How often to flush generated metrics.",
          "required": false,
          "default": "\"60s\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "output",
          "doc": "Configures where to send received telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.connector.servicegraph": {
      "name": "otelcol.connector.servicegraph",
      "doc": "`otelcol.connector.servicegraph` accepts span data from other `otelcol` components and outputs metrics representing the relationship between various services in a system.\nA metric represents an edge in the service graph.\nThose metrics can then be used by a data visualization application (e.g. [Grafana][]) to draw the service graph.",
      "arguments": [
        {
          "name": "latency_histogram_buckets",
          "type": "list(duration)",
          "doc": "Buckets for latency histogram metrics.",
          "required": false,
          "default": "[\"2ms\", \"4ms\", \"6ms\", \"8ms\", \"10ms\", \"50ms\", \"100ms\", \"200ms\", \"400ms\", \"800ms\", \"1s\", \"1400ms\", \"2s\", \"5s\", \"10s\", \"15s\"]"
        },
        {
          "name": "dimensions",
          "type": "list(string)",
          "doc": "A list of dimensions to add with the default dimensions.",
          "required": false,
          "default": "[]"
        },
        {
          "name": "cache_loop",
          "type": "duration",
          "doc": "Configures how often to delete series which have not been updated.",
          "required": false,
          "default": "\"1m\""
        },
        {
          "name": "store_expiration_loop",
          "type": "duration",
          "doc": "The time to expire old entries from the store periodically.",
          "required": false,
          "default": "\"2s\""
        },
        {
          "name": "metrics_flush_interval",
          "type": "duration",
          "doc": "The interval at which metrics are flushed to downstream components.",
          "required": false,
          "default": "\"0s\""
        },
        {
          "name": "database_name_attribute",
          "type": "string",
          "doc": "The attribute name used to identify the database name from span attributes.",
          "required": false,
          "default": "\"db.name\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "store",
          "doc": "Configures the in-memory store for spans.",
          "required": false,
          "arguments": [
            {
              "name": "max_items",
              "type": "number",
              "doc": "Maximum number of items to keep in the store.",
              "required": false,
              "default": "1000"
            },
            {
              "name": "ttl",
              "type": "duration",
              "doc": "The time to live for spans in the store.",
              "required": false,
              "default": "\"2s\""
            }
          ],
          "blocks": []
        },
        {
          "name": "output",
          "doc": "Configures where to send telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.connector.spanlogs": {
      "name": "otelcol.connector.spanlogs",
      "doc": "`otelcol.connector.spanlogs` accepts traces telemetry data from other `otelcol`\ncomponents and outputs logs telemetry data for each span, root, or process.\nThis allows you to automatically build a mechanism for trace discovery.",
      "arguments": [
        {
          "name": "spans",
          "type": "bool",
          "doc": "Log one line per span.",
          "required": false,
          "default": "false"
        },
        {
          "name": "roots",
          "type": "bool",
          "doc": "Log one line for every root span of a trace.",
          "required": false,
          "default": "false"
        },
        {
          "name": "processes",
          "type": "bool",
          "doc": "Log one line for every process.",
          "required": false,
          "default": "false"
        },
        {
          "name": "span_attributes",
          "type": "list(string)",
          "doc": "Additional span attributes to log.",
          "required": false,
          "default": "[]"
        },
        {
          "name": "process_attributes",
          "type": "list(string)",
          "doc": "Additional process attributes to log.",
          "required": false,
          "default": "[]"
        },
        {
          "name": "labels",
          "type": "list(string)",
          "doc": "A list of keys that will be logged as labels.",
          "required": false,
          "default": "[]"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "overrides",
          "doc": "Overrides for keys in the log body.",
          "required": false,
          "arguments": [
            {
              "name": "logs_instance_tag",
              "type": "string",
              "doc": "Indicates if the log line is for a span, root, or process.",
              "required": false,
              "default": "traces"
            },
            {
              "name": "service_key",
              "type": "string",
              "doc": "Log key for the service name of the resource.",
              "required": false,
              "default": "svc"
            },
            {
              "name": "span_name_key",
              "type": "string",
              "doc": "Log key for the name of the span.",
              "required": false,
              "default": "span"
            },
            {
              "name": "status_key",
              "type": "string",
              "doc": "Log key for the status of the span.",
              "required": false,
              "default": "status"
            },
            {
              "name": "duration_key",
              "type": "string",
              "doc": "Log key for the duration of the span.",
              "required": false,
              "default": "dur"
            },
            {
              "name": "trace_id_key",
              "type": "string",
              "doc": "Log key for the trace ID of the span.",
              "required": false,
              "default": "tid"
            }
          ],
          "blocks": []
        },
        {
          "name": "output",
          "doc": "Configures where to send received telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "logs",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send logs to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.connector.spanmetrics": {
      "name": "otelcol.connector.spanmetrics",
      "doc": "`otelcol.connector.spanmetrics` accepts span data from other `otelcol` components and\naggregates Request, Error and Duration (R.E.D) OpenTelemetry metrics from the spans:",
      "arguments": [
        {
          "name": "aggregation_temporality",
          "type": "string",
          "doc": "Configures whether to reset the metrics after flushing.",
          "required": false,
          "default": "\"CUMULATIVE\""
        },
        {
          "name": "dimensions_cache_size",
          "type": "number",
          "doc": "How many dimensions to cache.",
          "required": false,
          "default": "1000"
        },
        {
          "name": "exclude_dimensions",
          "type": "list(string)",
          "doc": "List of dimensions to be excluded from the default set of dimensions.",
          "required": false,
          "default": "[]"
        },
        {
          "name": "metrics_flush_interval",
          "type": "duration",
          "doc": "How often to flush generated metrics.",
          "required": false,
          "default": "\"60s\""
        },
        {
          "name": "metrics_expiration",
          "type": "duration",
          "doc": "Time period after which metrics are considered stale and are removed from the cache.",
          "required": false,
          "default": "\"0s\""
        },
        {
          "name": "namespace",
          "type": "string",
          "doc": "Metric namespace.",
          "required": false,
          "default": "\"\""
        },
        {
          "name": "resource_metrics_cache_size",
          "type": "number",
          "doc": "The size of the cache holding metrics for a service.",
          "required": false,
          "default": "1000"
        },
        {
          "name": "resource_metrics_key_attributes",
          "type": "list(string)",
          "doc": "Limits the resource attributes used to create the metrics.",
          "required": false,
          "default": "[]"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "dimension",
          "doc": "Dimensions to be added in addition to the default ones.",
          "required": false,
          "arguments": [
            {
              "name": "default",
              "type": "string",
              "doc": "Value to use if the attribute is missing.",
              "required": false,
              "default": "null"
            },
            {
              "name": "name",
              "type": "string",
              "doc": "Span attribute or resource attribute to look up.",
              "required": true,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "events",
          "doc": "Configures the events metric.",
          "required": false,
          "arguments": [
            {
              "name": "enabled",
              "type": "bool",
              "doc": "Enables all events metric.",
              "required": false,
              "default": "false"
            }
          ],
          "blocks": [
            {
              "name": "dimension",
              "doc": "Span event attributes to add as dimensions to the events metric, _on top of_ the default ones and the ones configured in the top-level dimension block.",
              "required": false,
              "arguments": [
                {
                  "name": "default",
                  "type": "string",
                  "doc": "Value to use if the attribute is missing.",
                  "required": false,
                  "default": "null"
                },
                {
                  "name": "name",
                  "type": "string",
                  "doc": "Span attribute or resource attribute to look up.",
                  "required": true,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "exemplars",
          "doc": "Configures how to attach exemplars to histograms.",
          "required": false,
          "arguments": [
            {
              "name": "enabled",
              "type": "bool",
              "doc": "Configures whether to add exemplars to histograms.",
              "required": false,
              "default": "false"
            },
            {
              "name": "max_per_data_point",
              "type": "number",
              "doc": "Limits the number of exemplars that can be added to a unique dimension set.",
              "required": false,
              "default": "null"
            }
          ],
          "blocks": []
        },
        {
          "name": "histogram",
          "doc": "Configures the histogram derived from spans durations.",
          "required": true,
          "arguments": [
            {
              "name": "disable",
              "type": "bool",
              "doc": "Disable all histogram metrics.",
              "required": false,
              "default": "false"
            },
            {
              "name": "unit",
              "type": "string",
              "doc": "Configures the histogram units.",
              "required": false,
              "default": "\"ms\""
            }
          ],
          "blocks": [
            {
              "name": "explicit",
              "doc": "Configuration for a histogram with explicit buckets.",
              "required": false,
              "arguments": [
                {
                  "name": "buckets",
                  "type": "list(duration)",
                  "doc": "List of histogram buckets.",
                  "required": false,
                  "default": "[\"2ms\", \"4ms\", \"6ms\", \"8ms\", \"10ms\", \"50ms\", \"100ms\", \"200ms\", \"400ms\", \"800ms\", \"1s\", \"1400ms\", \"2s\", \"5s\", \"10s\", \"15s\"]"
                }
              ],
              "blocks": []
            },
            {
              "name": "exponential",
              "doc": "Configuration for a histogram with exponential buckets.",
              "required": false,
              "arguments": [
                {
                  "name": "max_size",
                  "type": "number",
                  "doc": "Maximum number of buckets per positive or negative number range.",
                  "required": false,
                  "default": "160"
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "output",
          "doc": "Configures where to send telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.exporter.awss3": {
      "name": "otelcol.exporter.awss3",
      "doc": "`otelcol.exporter.awss3` accepts telemetry data from other `otelcol` components and writes them to an AWS S3 bucket.",
      "arguments": [
        {
          "name": "encoding",
          "type": "string",
          "doc": "Encoding extension to use to marshal data. Overrides the marshaler configuration option if set.",
          "required": false,
          "default": "\"\""
        },
        {
          "name": "encoding_file_ext",
          "type": "string",
          "doc": "File format extension suffix when using the encoding configuration option. It can be left empty if a suffix shouldn't be appended.",
          "required": false,
          "default": "\"\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "s3_uploader",
          "doc": "Configures the AWS S3 bucket details to send telemetry data to.",
          "required": true,
          "arguments": [
            {
              "name": "region",
              "type": "string",
              "doc": "The AWS region.",
              "required": false,
              "default": "\"us-east-1\""
            },
            {
              "name": "s3_bucket",
              "type": "string",
              "doc": "The S3 bucket.",
              "required": true,
              "default": null
            },
            {
              "name": "s3_prefix",
              "type": "string",
              "doc": "Prefix for the S3 key (root directory inside the bucket).",
              "required": true,
              "default": null
            },
            {
              "name": "s3_partition",
              "type": "string",
              "doc": "Time granularity of S3 key: hour or minute.",
              "required": false,
              "default": "\"minute\""
            },
            {
              "name": "role_arn",
              "type": "string",
              "doc": "The Role ARN to be assumed.",
              "required": false,
              "default": null
            },
            {
              "name": "file_prefix",
              "type": "string",
              "doc": "The file prefix defined by the user.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint",
              "type": "string",
              "doc": "Overrides the endpoint used by the exporter instead of constructing it from region and s3_bucket.",
              "required": false,
              "default": null
            },
            {
              "name": "s3_force_path_style",
              "type": "boolean",
              "doc": "Set this to true to force the request to use [path-style requests](https://docs.aws.amazon.com/AmazonS3/latest/userguide/VirtualHosting.html#path-style-access)",
              "required": false,
              "default": "false"
            },
            {
              "name": "disable_ssl",
              "type": "boolean",
              "doc": "Set this to true to disable SSL when sending requests.",
              "required": false,
              "default": null
            },
            {
              "name": "compression",
              "type": "string",
              "doc": "How should the file be compressed? none, gzip",
              "required": false,
              "default": "none"
            }
          ],
          "blocks": []
        },
        {
          "name": "marshaler",
          "doc": "Marshaler used to produce output data.",
          "required": false,
          "arguments": [
            {
              "name": "type",
              "type": "string",
              "doc": "Marshaler used to produce output data.",
              "required": false,
              "default": "\"otlp_json\""
            }
          ],
          "blocks": []
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.exporter.kafka": {
      "name": "otelcol.exporter.kafka",
      "doc": "`otelcol.exporter.kafka` accepts logs, metrics, and traces telemetry data from \nother `otelcol` components and sends it to Kafka.",
      "arguments": [
        {
          "name": "protocol_version",
          "type": "string",
          "doc": "Kafka protocol version to use.",
          "required": true,
          "default": null
        },
        {
          "name": "brokers",
          "type": "list(string)",
          "doc": "Kafka brokers to connect to.",
          "required": false,
          "default": "[\"localhost:9092\"]"
        },
        {
          "name": "topic",
          "type": "string",
          "doc": "Kafka topic to send to.",
          "required": false,
          "default": "_See below_"
        },
        {
          "name": "topic_from_attribute",
          "type": "string",
          "doc": "A resource attribute whose value should be used as the message's topic.",
          "required": false,
          "default": "\"\""
        },
        {
          "name": "encoding",
          "type": "string",
          "doc": "Encoding of payload read from Kafka.",
          "required": false,
          "default": "\"otlp_proto\""
        },
        {
          "name": "client_id",
          "type": "string",
          "doc": "Consumer client ID to use. The ID will be used for all produce requests.",
          "required": false,
          "default": "\"sarama\""
        },
        {
          "name": "timeout",
          "type": "duration",
          "doc": "The timeout for every attempt to send data to the backend.",
          "required": false,
          "default": "\"5s\""
        },
        {
          "name": "resolve_canonical_bootstrap_servers_only",
          "type": "bool",
          "doc": "Whether to resolve then reverse-lookup broker IPs during startup.",
          "required": false,
          "default": "\"false\""
        },
        {
          "name": "partition_traces_by_id",
          "type": "bool",
          "doc": "Whether to include the trace ID as the message key in trace messages sent to Kafka.",
          "required": false,
          "default": "\"false\""
        },
        {
          "name": "partition_metrics_by_resource_attributes",
          "type": "bool",
          "doc": "Whether to include the hash of sorted resource attributes as the message partitioning key in metric messages sent to Kafka.",
          "required": false,
          "default": "\"false\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "authentication",
          "doc": "Configures authentication for connecting to Kafka brokers.",
          "required": false,
          "arguments": [],
          "blocks": [
            {
              "name": "plaintext",
              "doc": "Authenticates against Kafka brokers with plaintext.",
              "required": false,
              "arguments": [
                {
                  "name": "username",
                  "type": "string",
                  "doc": "Username to use for plain text authentication.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "password",
                  "type": "secret",
                  "doc": "Password to use for plain text authentication.",
                  "required": true,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "sasl",
              "doc": "Authenticates against Kafka brokers with SASL.",
              "required": false,
              "arguments": [
                {
                  "name": "username",
                  "type": "string",
                  "doc": "Username to use for SASL authentication.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "password",
                  "type": "secret",
                  "doc": "Password to use for SASL authentication.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "mechanism",
                  "type": "string",
                  "doc": "SASL mechanism to use when authenticating.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "version",
                  "type": "number",
                  "doc": "Version of the SASL Protocol to use when authenticating.",
                  "required": false,
                  "default": "0"
                }
              ],
              "blocks": [
                {
                  "name": "aws_msk",
                  "doc": "Additional SASL parameters when using AWS_MSK_IAM.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "region",
                      "type": "string",
                      "doc": "AWS region the MSK cluster is based in.",
                      "required": true,
                      "default": null
                    },
                    {
                      "name": "broker_addr",
                      "type": "string",
                      "doc": "MSK address to connect to for authentication.",
                      "required": true,
                      "default": null
                    }
                  ],
                  "blocks": []
                }
              ]
            },
            {
              "name": "tls",
              "doc": "Configures TLS for connecting to the Kafka brokers.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "Path to the CA file.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Path to the TLS certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "boolean",
                  "doc": "Ignores insecure server TLS certificates.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "include_system_ca_certs_pool",
                  "type": "boolean",
                  "doc": "Whether to load the system certificate authorities pool alongside the certificate authority.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "insecure",
                  "type": "boolean",
                  "doc": "Disables TLS when connecting to the configured server.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Path to the TLS certificate key.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "max_version",
                  "type": "string",
                  "doc": "Maximum acceptable TLS version for connections.",
                  "required": false,
                  "default": "\"TLS 1.3\""
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version for connections.",
                  "required": false,
                  "default": "\"TLS 1.2\""
                },
                {
                  "name": "cipher_suites",
                  "type": "list(string)",
                  "doc": "A list of TLS cipher suites that the TLS transport can use.",
                  "required": false,
                  "default": "[]"
                },
                {
                  "name": "reload_interval",
                  "type": "duration",
                  "doc": "The duration after which the certificate is reloaded.",
                  "required": false,
                  "default": "\"0s\""
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "Verifies the hostname of server certificates when set.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "kerberos",
              "doc": "Authenticates against Kafka brokers with Kerberos.",
              "required": false,
              "arguments": [
                {
                  "name": "service_name",
                  "type": "string",
                  "doc": "Kerberos service name.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "realm",
                  "type": "string",
                  "doc": "Kerberos realm.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "use_keytab",
                  "type": "string",
                  "doc": "Enables using keytab instead of password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "username",
                  "type": "string",
                  "doc": "Kerberos username to authenticate as.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "password",
                  "type": "secret",
                  "doc": "Kerberos password to authenticate with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "config_file",
                  "type": "string",
                  "doc": "Path to Kerberos location (for example, /etc/krb5.conf).",
                  "required": false,
                  "default": null
                },
                {
                  "name": "keytab_file",
                  "type": "string",
                  "doc": "Path to keytab file (for example, /etc/security/kafka.keytab).",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "metadata",
          "doc": "Configures how to retrieve metadata from Kafka brokers.",
          "required": false,
          "arguments": [
            {
              "name": "include_all_topics",
              "type": "bool",
              "doc": "When true, maintains metadata for all topics.",
              "required": false,
              "default": "true"
            }
          ],
          "blocks": [
            {
              "name": "retry",
              "doc": "Configures how to retry metadata retrieval.",
              "required": false,
              "arguments": [
                {
                  "name": "max_retries",
                  "type": "number",
                  "doc": "How many times to reattempt retrieving metadata.",
                  "required": false,
                  "default": "3"
                },
                {
                  "name": "backoff",
                  "type": "duration",
                  "doc": "Time to wait between retries.",
                  "required": false,
                  "default": "\"250ms\""
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "retry_on_failure",
          "doc": "Configures retry mechanism for failed requests.",
          "required": false,
          "arguments": [
            {
              "name": "enabled",
              "type": "boolean",
              "doc": "Enables retrying failed requests.",
              "required": false,
              "default": "true"
            },
            {
              "name": "initial_interval",
              "type": "duration",
              "doc": "Initial time to wait before retrying a failed request.",
              "required": false,
              "default": "\"5s\""
            },
            {
              "name": "max_elapsed_time",
              "type": "duration",
              "doc": "Maximum time to wait before discarding a failed batch.",
              "required": false,
              "default": "\"5m\""
            },
            {
              "name": "max_interval",
              "type": "duration",
              "doc": "Maximum time to wait between retries.",
              "required": false,
              "default": "\"30s\""
            },
            {
              "name": "multiplier",
              "type": "number",
              "doc": "Factor to grow wait time before retrying.",
              "required": false,
              "default": "1.5"
            },
            {
              "name": "randomization_factor",
              "type": "number",
              "doc": "Factor to randomize wait time before retrying.",
              "required": false,
              "default": "0.5"
            }
          ],
          "blocks": []
        },
        {
          "name": "queue",
          "doc": "Configures batching of data before sending.",
          "required": false,
          "arguments": [
            {
              "name": "enabled",
              "type": "boolean",
              "doc": "Enables an in-memory buffer before sending data to the client.",
              "required": false,
              "default": "true"
            },
            {
              "name": "num_consumers",
              "type": "number",
              "doc": "Number of readers to send batches written to the queue in parallel.",
              "required": false,
              "default": "10"
            },
            {
              "name": "queue_size",
              "type": "number",
              "doc": "Maximum number of unwritten batches allowed in the queue at the same time.",
              "required": false,
              "default": "1000"
            }
          ],
          "blocks": []
        },
        {
          "name": "producer",
          "doc": "Kafka producer configuration,",
          "required": false,
          "arguments": [
            {
              "name": "max_message_bytes",
              "type": "number",
              "doc": "The maximum permitted size of a message in bytes.",
              "required": false,
              "default": "1000000"
            },
            {
              "name": "required_acks",
              "type": "number",
              "doc": "Controls when a message is regarded as transmitted.",
              "required": false,
              "default": "1"
            },
            {
              "name": "compression",
              "type": "string",
              "doc": "Time to wait between retries.",
              "required": false,
              "default": "\"none\""
            },
            {
              "name": "flush_max_messages",
              "type": "number",
              "doc": "Time to wait between retries.",
              "required": false,
              "default": "0"
            }
          ],
          "blocks": []
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics which this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.exporter.loadbalancing": {
      "name": "otelcol.exporter.loadbalancing",
      "doc": "`otelcol.exporter.loadbalancing` accepts logs and traces from other `otelcol` components\nand writes them over the network using the OpenTelemetry Protocol (OTLP) protocol.",
      "arguments": [
        {
          "name": "routing_key",
          "type": "string",
          "doc": "Routing strategy for load balancing.",
          "required": false,
          "default": "\"traceID\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "resolver",
          "doc": "Configures discovering the endpoints to export to.",
          "required": true,
          "arguments": [],
          "blocks": [
            {
              "name": "static",
              "doc": "Static list of endpoints to export to.",
              "required": false,
              "arguments": [
                {
                  "name": "hostnames",
                  "type": "list(string)",
                  "doc": "List of endpoints to export to.",
                  "required": true,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "dns",
              "doc": "DNS-sourced list of endpoints to export to.",
              "required": false,
              "arguments": [
                {
                  "name": "hostname",
                  "type": "string",
                  "doc": "DNS hostname to resolve.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "interval",
                  "type": "duration",
                  "doc": "Resolver interval.",
                  "required": false,
                  "default": "\"5s\""
                },
                {
                  "name": "timeout",
                  "type": "duration",
                  "doc": "Resolver timeout.",
                  "required": false,
                  "default": "\"1s\""
                },
                {
                  "name": "port",
                  "type": "string",
                  "doc": "Port to be used with the IP addresses resolved from the DNS hostname.",
                  "required": false,
                  "default": "\"4317\""
                }
              ],
              "blocks": []
            },
            {
              "name": "kubernetes",
              "doc": "Kubernetes-sourced list of endpoints to export to.",
              "required": false,
              "arguments": [
                {
                  "name": "service",
                  "type": "string",
                  "doc": "Kubernetes service to resolve.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "ports",
                  "type": "list(number)",
                  "doc": "Ports to use with the IP addresses resolved from service.",
                  "required": false,
                  "default": "[4317]"
                },
                {
                  "name": "timeout",
                  "type": "duration",
                  "doc": "Resolver timeout.",
                  "required": false,
                  "default": "\"1s\""
                }
              ],
              "blocks": []
            },
            {
              "name": "aws_cloud_map",
              "doc": "AWS CloudMap-sourced list of endpoints to export to.",
              "required": false,
              "arguments": [
                {
                  "name": "namespace",
                  "type": "string",
                  "doc": "The CloudMap namespace where the service is registered.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "service_name",
                  "type": "string",
                  "doc": "The name of the service which was specified when registering the instance.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "interval",
                  "type": "duration",
                  "doc": "Resolver interval.",
                  "required": false,
                  "default": "\"30s\""
                },
                {
                  "name": "timeout",
                  "type": "duration",
                  "doc": "Resolver timeout.",
                  "required": false,
                  "default": "\"5s\""
                },
                {
                  "name": "health_status",
                  "type": "string",
                  "doc": "Ports to use with the IP addresses resolved from service.",
                  "required": false,
                  "default": "\"HEALTHY\""
                },
                {
                  "name": "port",
                  "type": "number",
                  "doc": "Port to be used for exporting the traces to the addresses resolved from service.",
                  "required": false,
                  "default": "null"
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "protocol",
          "doc": "Protocol settings. Only OTLP is supported at the moment.",
          "required": false,
          "arguments": [],
          "blocks": [
            {
              "name": "otlp",
              "doc": "Configures an OTLP exporter.",
              "required": false,
              "arguments": [],
              "blocks": [
                {
                  "name": "client",
                  "doc": "Configures the exporter gRPC client.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "compression",
                      "type": "string",
                      "doc": "Compression mechanism to use for requests.",
                      "required": false,
                      "default": "\"gzip\""
                    },
                    {
                      "name": "read_buffer_size",
                      "type": "string",
                      "doc": "Size of the read buffer the gRPC client to use for reading server responses.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "write_buffer_size",
                      "type": "string",
                      "doc": "Size of the write buffer the gRPC client to use for writing requests.",
                      "required": false,
                      "default": "\"512KiB\""
                    },
                    {
                      "name": "wait_for_ready",
                      "type": "boolean",
                      "doc": "Waits for gRPC connection to be in the READY state before sending data.",
                      "required": false,
                      "default": "false"
                    },
                    {
                      "name": "headers",
                      "type": "map(string)",
                      "doc": "Additional headers to send with the request.",
                      "required": false,
                      "default": "{}"
                    },
                    {
                      "name": "balancer_name",
                      "type": "string",
                      "doc": "Which gRPC client-side load balancer to use for requests.",
                      "required": false,
                      "default": "pick_first"
                    },
                    {
                      "name": "authority",
                      "type": "string",
                      "doc": "Overrides the default :authority header in gRPC requests from the gRPC client.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "auth",
                      "type": "capsule(otelcol.Handler)",
                      "doc": "Handler from an otelcol.auth component to use for authenticating requests.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": [
                    {
                      "name": "tls",
                      "doc": "Configures TLS for the gRPC client.",
                      "required": false,
                      "arguments": [
                        {
                          "name": "ca_file",
                          "type": "string",
                          "doc": "Path to the CA file.",
                          "required": false,
                          "default": null
                        },
                        {
                          "name": "ca_pem",
                          "type": "string",
                          "doc": "CA PEM-encoded text to validate the server with.",
                          "required": false,
                          "default": null
                        },
                        {
                          "name": "cert_file",
                          "type": "string",
                          "doc": "Path to the TLS certificate.",
                          "required": false,
                          "default": null
                        },
                        {
                          "name": "cert_pem",
                          "type": "string",
                          "doc": "Certificate PEM-encoded text for client authentication.",
                          "required": false,
                          "default": null
                        },
                        {
                          "name": "insecure_skip_verify",
                          "type": "boolean",
                          "doc": "Ignores insecure server TLS certificates.",
                          "required": false,
                          "default": null
                        },
                        {
                          "name": "include_system_ca_certs_pool",
                          "type": "boolean",
                          "doc": "Whether to load the system certificate authorities pool alongside the certificate authority.",
                          "required": false,
                          "default": "false"
                        },
                        {
                          "name": "insecure",
                          "type": "boolean",
                          "doc": "Disables TLS when connecting to the configured server.",
                          "required": false,
                          "default": null
                        },
                        {
                          "name": "key_file",
                          "type": "string",
                          "doc": "Path to the TLS certificate key.",
                          "required": false,
                          "default": null
                        },
                        {
                          "name": "key_pem",
                          "type": "secret",
                          "doc": "Key PEM-encoded text for client authentication.",
                          "required": false,
                          "default": null
                        },
                        {
                          "name": "max_version",
                          "type": "string",
                          "doc": "Maximum acceptable TLS version for connections.",
                          "required": false,
                          "default": "\"TLS 1.3\""
                        },
                        {
                          "name": "min_version",
                          "type": "string",
                          "doc": "Minimum acceptable TLS version for connections.",
                          "required": false,
                          "default": "\"TLS 1.2\""
                        },
                        {
                          "name": "cipher_suites",
                          "type": "list(string)",
                          "doc": "A list of TLS cipher suites that the TLS transport can use.",
                          "required": false,
                          "default": "[]"
                        },
                        {
                          "name": "reload_interval",
                          "type": "duration",
                          "doc": "The duration after which the certificate is reloaded.",
                          "required": false,
                          "default": "\"0s\""
                        },
                        {
                          "name": "server_name",
                          "type": "string",
                          "doc": "Verifies the hostname of server certificates when set.",
                          "required": false,
                          "default": null
                        }
                      ],
                      "blocks": []
                    },
                    {
                      "name": "keepalive",
                      "doc": "Configures keepalive settings for the gRPC client.",
                      "required": false,
                      "arguments": [
                        {
                          "name": "ping_wait",
                          "type": "duration",
                          "doc": "How often to ping the server after no activity.",
                          "required": false,
                          "default": null
                        },
                        {
                          "name": "ping_response_timeout",
                          "type": "duration",
                          "doc": "Time to wait before closing inactive connections if the server does not respond to a ping.",
                          "required": false,
                          "default": null
                        },
                        {
                          "name": "ping_without_stream",
                          "type": "boolean",
                          "doc": "Send pings even if there is no active stream request.",
                          "required": false,
                          "default": null
                        }
                      ],
                      "blocks": []
                    }
                  ]
                },
                {
                  "name": "queue",
                  "doc": "Configures batching of data before sending.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "enabled",
                      "type": "boolean",
                      "doc": "Enables an in-memory buffer before sending data to the client.",
                      "required": false,
                      "default": "true"
                    },
                    {
                      "name": "num_consumers",
                      "type": "number",
                      "doc": "Number of readers to send batches written to the queue in parallel.",
                      "required": false,
                      "default": "10"
                    },
                    {
                      "name": "queue_size",
                      "type": "number",
                      "doc": "Maximum number of unwritten batches allowed in the queue at the same time.",
                      "required": false,
                      "default": "1000"
                    }
                  ],
                  "blocks": []
                },
                {
                  "name": "retry",
                  "doc": "Configures retry mechanism for failed requests.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "enabled",
                      "type": "boolean",
                      "doc": "Enables retrying failed requests.",
                      "required": false,
                      "default": "true"
                    },
                    {
                      "name": "initial_interval",
                      "type": "duration",
                      "doc": "Initial time to wait before retrying a failed request.",
                      "required": false,
                      "default": "\"5s\""
                    },
                    {
                      "name": "max_elapsed_time",
                      "type": "duration",
                      "doc": "Maximum time to wait before discarding a failed batch.",
                      "required": false,
                      "default": "\"5m\""
                    },
                    {
                      "name": "max_interval",
                      "type": "duration",
                      "doc": "Maximum time to wait between retries.",
                      "required": false,
                      "default": "\"30s\""
                    },
                    {
                      "name": "multiplier",
                      "type": "number",
                      "doc": "Factor to grow wait time before retrying.",
                      "required": false,
                      "default": "1.5"
                    },
                    {
                      "name": "randomization_factor",
                      "type": "number",
                      "doc": "Factor to randomize wait time before retrying.",
                      "required": false,
                      "default": "0.5"
                    }
                  ],
                  "blocks": []
                }
              ]
            }
          ]
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.exporter.logging": {
      "name": "otelcol.exporter.logging",
      "doc": "`otelcol.exporter.logging` accepts telemetry data from other `otelcol` components\nand writes them to the console.",
      "arguments": [
        {
          "name": "verbosity",
          "type": "string",
          "doc": "Verbosity of the generated logs.",
          "required": false,
          "default": "\"normal\""
        },
        {
          "name": "sampling_initial",
          "type": "int",
          "doc": "Number of messages initially logged each second.",
          "required": false,
          "default": "2"
        },
        {
          "name": "sampling_thereafter",
          "type": "int",
          "doc": "Sampling rate after the initial messages are logged.",
          "required": false,
          "default": "500"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.exporter.loki": {
      "name": "otelcol.exporter.loki",
      "doc": "`otelcol.exporter.loki` accepts OTLP-formatted logs from other `otelcol`\ncomponents, converts them to Loki-formatted log entries, and forwards them\nto `loki` components.",
      "arguments": [
        {
          "name": "forward_to",
          "type": "list(receiver)",
          "doc": "Where to forward converted Loki logs.",
          "required": true,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": []
    },
    "otelcol.exporter.otlp": {
      "name": "otelcol.exporter.otlp",
      "doc": "`otelcol.exporter.otlp` accepts telemetry data from other `otelcol` components\nand writes them over the network using the OTLP gRPC protocol.",
      "arguments": [
        {
          "name": "timeout",
          "type": "duration",
          "doc": "Time to wait before marking a request as failed.",
          "required": false,
          "default": "\"5s\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "client",
          "doc": "Configures the gRPC server to send telemetry data to.",
          "required": true,
          "arguments": [
            {
              "name": "endpoint",
              "type": "string",
              "doc": "host:port to send telemetry data to.",
              "required": true,
              "default": null
            },
            {
              "name": "compression",
              "type": "string",
              "doc": "Compression mechanism to use for requests.",
              "required": false,
              "default": "\"gzip\""
            },
            {
              "name": "read_buffer_size",
              "type": "string",
              "doc": "Size of the read buffer the gRPC client to use for reading server responses.",
              "required": false,
              "default": null
            },
            {
              "name": "write_buffer_size",
              "type": "string",
              "doc": "Size of the write buffer the gRPC client to use for writing requests.",
              "required": false,
              "default": "\"512KiB\""
            },
            {
              "name": "wait_for_ready",
              "type": "boolean",
              "doc": "Waits for gRPC connection to be in the READY state before sending data.",
              "required": false,
              "default": "false"
            },
            {
              "name": "headers",
              "type": "map(string)",
              "doc": "Additional headers to send with the request.",
              "required": false,
              "default": "{}"
            },
            {
              "name": "balancer_name",
              "type": "string",
              "doc": "Which gRPC client-side load balancer to use for requests.",
              "required": false,
              "default": "pick_first"
            },
            {
              "name": "authority",
              "type": "string",
              "doc": "Overrides the default :authority header in gRPC requests from the gRPC client.",
              "required": false,
              "default": null
            },
            {
              "name": "auth",
              "type": "capsule(otelcol.Handler)",
              "doc": "Handler from an otelcol.auth component to use for authenticating requests.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls",
              "doc": "Configures TLS for the gRPC client.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "Path to the CA file.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Path to the TLS certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "boolean",
                  "doc": "Ignores insecure server TLS certificates.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "include_system_ca_certs_pool",
                  "type": "boolean",
                  "doc": "Whether to load the system certificate authorities pool alongside the certificate authority.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "insecure",
                  "type": "boolean",
                  "doc": "Disables TLS when connecting to the configured server.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Path to the TLS certificate key.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "max_version",
                  "type": "string",
                  "doc": "Maximum acceptable TLS version for connections.",
                  "required": false,
                  "default": "\"TLS 1.3\""
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version for connections.",
                  "required": false,
                  "default": "\"TLS 1.2\""
                },
                {
                  "name": "cipher_suites",
                  "type": "list(string)",
                  "doc": "A list of TLS cipher suites that the TLS transport can use.",
                  "required": false,
                  "default": "[]"
                },
                {
                  "name": "reload_interval",
                  "type": "duration",
                  "doc": "The duration after which the certificate is reloaded.",
                  "required": false,
                  "default": "\"0s\""
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "Verifies the hostname of server certificates when set.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "keepalive",
              "doc": "Configures keepalive settings for the gRPC client.",
              "required": false,
              "arguments": [
                {
                  "name": "ping_wait",
                  "type": "duration",
                  "doc": "How often to ping the server after no activity.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ping_response_timeout",
                  "type": "duration",
                  "doc": "Time to wait before closing inactive connections if the server does not respond to a ping.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ping_without_stream",
                  "type": "boolean",
                  "doc": "Send pings even if there is no active stream request.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "sending_queue",
          "doc": "Configures batching of data before sending.",
          "required": false,
          "arguments": [
            {
              "name": "enabled",
              "type": "boolean",
              "doc": "Enables an in-memory buffer before sending data to the client.",
              "required": false,
              "default": "true"
            },
            {
              "name": "num_consumers",
              "type": "number",
              "doc": "Number of readers to send batches written to the queue in parallel.",
              "required": false,
              "default": "10"
            },
            {
              "name": "queue_size",
              "type": "number",
              "doc": "Maximum number of unwritten batches allowed in the queue at the same time.",
              "required": false,
              "default": "1000"
            }
          ],
          "blocks": []
        },
        {
          "name": "retry_on_failure",
          "doc": "Configures retry mechanism for failed requests.",
          "required": false,
          "arguments": [
            {
              "name": "enabled",
              "type": "boolean",
              "doc": "Enables retrying failed requests.",
              "required": false,
              "default": "true"
            },
            {
              "name": "initial_interval",
              "type": "duration",
              "doc": "Initial time to wait before retrying a failed request.",
              "required": false,
              "default": "\"5s\""
            },
            {
              "name": "max_elapsed_time",
              "type": "duration",
              "doc": "Maximum time to wait before discarding a failed batch.",
              "required": false,
              "default": "\"5m\""
            },
            {
              "name": "max_interval",
              "type": "duration",
              "doc": "Maximum time to wait between retries.",
              "required": false,
              "default": "\"30s\""
            },
            {
              "name": "multiplier",
              "type": "number",
              "doc": "Factor to grow wait time before retrying.",
              "required": false,
              "default": "1.5"
            },
            {
              "name": "randomization_factor",
              "type": "number",
              "doc": "Factor to randomize wait time before retrying.",
              "required": false,
              "default": "0.5"
            }
          ],
          "blocks": []
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.exporter.otlphttp": {
      "name": "otelcol.exporter.otlphttp",
      "doc": "`otelcol.exporter.otlphttp` accepts telemetry data from other `otelcol` components and writes them over the network using the OTLP HTTP protocol.",
      "arguments": [
        {
          "name": "metrics_endpoint",
          "type": "string",
          "doc": "The endpoint to send metrics to.",
          "required": false,
          "default": "client.endpoint + \"/v1/metrics\""
        },
        {
          "name": "logs_endpoint",
          "type": "string",
          "doc": "The endpoint to send logs to.",
          "required": false,
          "default": "client.endpoint + \"/v1/logs\""
        },
        {
          "name": "traces_endpoint",
          "type": "string",
          "doc": "The endpoint to send traces to.",
          "required": false,
          "default": "client.endpoint + \"/v1/traces\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "client",
          "doc": "Configures the HTTP server to send telemetry data to.",
          "required": true,
          "arguments": [
            {
              "name": "endpoint",
              "type": "string",
              "doc": "The target URL to send telemetry data to.",
              "required": true,
              "default": null
            },
            {
              "name": "encoding",
              "type": "string",
              "doc": "The encoding to use for messages. Should be either \"proto\" or \"json\".",
              "required": false,
              "default": "\"proto\""
            },
            {
              "name": "read_buffer_size",
              "type": "string",
              "doc": "Size of the read buffer the HTTP client uses for reading server responses.",
              "required": false,
              "default": "0"
            },
            {
              "name": "write_buffer_size",
              "type": "string",
              "doc": "Size of the write buffer the HTTP client uses for writing requests.",
              "required": false,
              "default": "\"512KiB\""
            },
            {
              "name": "timeout",
              "type": "duration",
              "doc": "Time to wait before marking a request as failed.",
              "required": false,
              "default": "\"30s\""
            },
            {
              "name": "headers",
              "type": "map(string)",
              "doc": "Additional headers to send with the request.",
              "required": false,
              "default": "{}"
            },
            {
              "name": "compression",
              "type": "string",
              "doc": "Compression mechanism to use for requests.",
              "required": false,
              "default": "\"gzip\""
            },
            {
              "name": "max_idle_conns",
              "type": "int",
              "doc": "Limits the number of idle HTTP connections the client can keep open.",
              "required": false,
              "default": "100"
            },
            {
              "name": "max_idle_conns_per_host",
              "type": "int",
              "doc": "Limits the number of idle HTTP connections the host can keep open.",
              "required": false,
              "default": "0"
            },
            {
              "name": "max_conns_per_host",
              "type": "int",
              "doc": "Limits the total (dialing,active, and idle) number of connections per host.",
              "required": false,
              "default": "0"
            },
            {
              "name": "idle_conn_timeout",
              "type": "duration",
              "doc": "Time to wait before an idle connection closes itself.",
              "required": false,
              "default": "\"90s\""
            },
            {
              "name": "disable_keep_alives",
              "type": "bool",
              "doc": "Disable HTTP keep-alive.",
              "required": false,
              "default": "false"
            },
            {
              "name": "http2_read_idle_timeout",
              "type": "duration",
              "doc": "Timeout after which a health check using ping frame will be carried out if no frame is received on the connection.",
              "required": false,
              "default": "0s"
            },
            {
              "name": "http2_ping_timeout",
              "type": "duration",
              "doc": "Timeout after which the connection will be closed if a response to Ping isn't received.",
              "required": false,
              "default": "15s"
            },
            {
              "name": "auth",
              "type": "capsule(otelcol.Handler)",
              "doc": "Handler from an otelcol.auth component to use for authenticating requests.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls",
              "doc": "Configures TLS for the HTTP client.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "Path to the CA file.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Path to the TLS certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "boolean",
                  "doc": "Ignores insecure server TLS certificates.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "include_system_ca_certs_pool",
                  "type": "boolean",
                  "doc": "Whether to load the system certificate authorities pool alongside the certificate authority.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "insecure",
                  "type": "boolean",
                  "doc": "Disables TLS when connecting to the configured server.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Path to the TLS certificate key.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "max_version",
                  "type": "string",
                  "doc": "Maximum acceptable TLS version for connections.",
                  "required": false,
                  "default": "\"TLS 1.3\""
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version for connections.",
                  "required": false,
                  "default": "\"TLS 1.2\""
                },
                {
                  "name": "cipher_suites",
                  "type": "list(string)",
                  "doc": "A list of TLS cipher suites that the TLS transport can use.",
                  "required": false,
                  "default": "[]"
                },
                {
                  "name": "reload_interval",
                  "type": "duration",
                  "doc": "The duration after which the certificate is reloaded.",
                  "required": false,
                  "default": "\"0s\""
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "Verifies the hostname of server certificates when set.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "sending_queue",
          "doc": "Configures batching of data before sending.",
          "required": false,
          "arguments": [
            {
              "name": "enabled",
              "type": "boolean",
              "doc": "Enables an in-memory buffer before sending data to the client.",
              "required": false,
              "default": "true"
            },
            {
              "name": "num_consumers",
              "type": "number",
              "doc": "Number of readers to send batches written to the queue in parallel.",
              "required": false,
              "default": "10"
            },
            {
              "name": "queue_size",
              "type": "number",
              "doc": "Maximum number of unwritten batches allowed in the queue at the same time.",
              "required": false,
              "default": "1000"
            }
          ],
          "blocks": []
        },
        {
          "name": "retry_on_failure",
          "doc": "Configures retry mechanism for failed requests.",
          "required": false,
          "arguments": [
            {
              "name": "enabled",
              "type": "boolean",
              "doc": "Enables retrying failed requests.",
              "required": false,
              "default": "true"
            },
            {
              "name": "initial_interval",
              "type": "duration",
              "doc": "Initial time to wait before retrying a failed request.",
              "required": false,
              "default": "\"5s\""
            },
            {
              "name": "max_elapsed_time",
              "type": "duration",
              "doc": "Maximum time to wait before discarding a failed batch.",
              "required": false,
              "default": "\"5m\""
            },
            {
              "name": "max_interval",
              "type": "duration",
              "doc": "Maximum time to wait between retries.",
              "required": false,
              "default": "\"30s\""
            },
            {
              "name": "multiplier",
              "type": "number",
              "doc": "Factor to grow wait time before retrying.",
              "required": false,
              "default": "1.5"
            },
            {
              "name": "randomization_factor",
              "type": "number",
              "doc": "Factor to randomize wait time before retrying.",
              "required": false,
              "default": "0.5"
            }
          ],
          "blocks": []
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.exporter.prometheus": {
      "name": "otelcol.exporter.prometheus",
      "doc": "`otelcol.exporter.prometheus` accepts OTLP-formatted metrics from other\n`otelcol` components, converts metrics to Prometheus-formatted metrics,\nand forwards the resulting metrics to `prometheus` components.",
      "arguments": [
        {
          "name": "include_target_info",
          "type": "boolean",
          "doc": "Whether to include target_info metrics.",
          "required": false,
          "default": "true"
        },
        {
          "name": "include_scope_info",
          "type": "boolean",
          "doc": "Whether to include otel_scope_info metrics.",
          "required": false,
          "default": "false"
        },
        {
          "name": "include_scope_labels",
          "type": "boolean",
          "doc": "Whether to include additional OTLP labels in all metrics.",
          "required": false,
          "default": "true"
        },
        {
          "name": "add_metric_suffixes",
          "type": "boolean",
          "doc": "Whether to add type and unit suffixes to metrics names.",
          "required": false,
          "default": "true"
        },
        {
          "name": "gc_frequency",
          "type": "duration",
          "doc": "How often to clean up stale metrics from memory.",
          "required": false,
          "default": "\"5m\""
        },
        {
          "name": "forward_to",
          "type": "list(MetricsReceiver)",
          "doc": "Where to forward converted Prometheus metrics.",
          "required": true,
          "default": null
        },
        {
          "name": "resource_to_telemetry_conversion",
          "type": "boolean",
          "doc": "Whether to convert OTel resource attributes to Prometheus labels.",
          "required": false,
          "default": "false"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.extension.jaeger_remote_sampling": {
      "name": "otelcol.extension.jaeger_remote_sampling",
      "doc": "`otelcol.extension.jaeger_remote_sampling` serves a specified Jaeger remote sampling document.",
      "arguments": [],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "http",
          "doc": "Configures the http server to serve Jaeger remote sampling.",
          "required": false,
          "arguments": [
            {
              "name": "endpoint",
              "type": "string",
              "doc": "host:port to listen for traffic on.",
              "required": false,
              "default": "\"0.0.0.0:5778\""
            },
            {
              "name": "max_request_body_size",
              "type": "string",
              "doc": "Maximum request body size the server will allow.",
              "required": false,
              "default": "20MiB"
            },
            {
              "name": "include_metadata",
              "type": "boolean",
              "doc": "Propagate incoming connection metadata to downstream consumers.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls",
              "doc": "Configures TLS for the HTTP server.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "Path to the CA file.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Path to the TLS certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "boolean",
                  "doc": "Ignores insecure server TLS certificates.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "include_system_ca_certs_pool",
                  "type": "boolean",
                  "doc": "Whether to load the system certificate authorities pool alongside the certificate authority.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "insecure",
                  "type": "boolean",
                  "doc": "Disables TLS when connecting to the configured server.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Path to the TLS certificate key.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "max_version",
                  "type": "string",
                  "doc": "Maximum acceptable TLS version for connections.",
                  "required": false,
                  "default": "\"TLS 1.3\""
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version for connections.",
                  "required": false,
                  "default": "\"TLS 1.2\""
                },
                {
                  "name": "cipher_suites",
                  "type": "list(string)",
                  "doc": "A list of TLS cipher suites that the TLS transport can use.",
                  "required": false,
                  "default": "[]"
                },
                {
                  "name": "reload_interval",
                  "type": "duration",
                  "doc": "The duration after which the certificate is reloaded.",
                  "required": false,
                  "default": "\"0s\""
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "Verifies the hostname of server certificates when set.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "cors",
              "doc": "Configures CORS for the HTTP server.",
              "required": false,
              "arguments": [
                {
                  "name": "allowed_origins",
                  "type": "list(string)",
                  "doc": "Allowed values for the Origin header.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "allowed_headers",
                  "type": "list(string)",
                  "doc": "Accepted headers from CORS requests.",
                  "required": false,
                  "default": "[\"X-Requested-With\"]"
                },
                {
                  "name": "max_age",
                  "type": "number",
                  "doc": "Configures the Access-Control-Max-Age response header.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "grpc",
          "doc": "Configures the grpc server to serve Jaeger remote sampling.",
          "required": false,
          "arguments": [
            {
              "name": "endpoint",
              "type": "string",
              "doc": "host:port to listen for traffic on.",
              "required": false,
              "default": "\"0.0.0.0:14250\""
            },
            {
              "name": "transport",
              "type": "string",
              "doc": "Transport to use for the gRPC server.",
              "required": false,
              "default": "\"tcp\""
            },
            {
              "name": "max_recv_msg_size",
              "type": "string",
              "doc": "Maximum size of messages the server will accept.",
              "required": false,
              "default": "\"4MiB\""
            },
            {
              "name": "max_concurrent_streams",
              "type": "number",
              "doc": "Limit the number of concurrent streaming RPC calls.",
              "required": false,
              "default": null
            },
            {
              "name": "read_buffer_size",
              "type": "string",
              "doc": "Size of the read buffer the gRPC server will use for reading from clients.",
              "required": false,
              "default": "\"512KiB\""
            },
            {
              "name": "write_buffer_size",
              "type": "string",
              "doc": "Size of the write buffer the gRPC server will use for writing to clients.",
              "required": false,
              "default": null
            },
            {
              "name": "include_metadata",
              "type": "boolean",
              "doc": "Propagate incoming connection metadata to downstream consumers.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls",
              "doc": "Configures TLS for the gRPC server.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "Path to the CA file.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Path to the TLS certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "boolean",
                  "doc": "Ignores insecure server TLS certificates.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "include_system_ca_certs_pool",
                  "type": "boolean",
                  "doc": "Whether to load the system certificate authorities pool alongside the certificate authority.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "insecure",
                  "type": "boolean",
                  "doc": "Disables TLS when connecting to the configured server.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Path to the TLS certificate key.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "max_version",
                  "type": "string",
                  "doc": "Maximum acceptable TLS version for connections.",
                  "required": false,
                  "default": "\"TLS 1.3\""
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version for connections.",
                  "required": false,
                  "default": "\"TLS 1.2\""
                },
                {
                  "name": "cipher_suites",
                  "type": "list(string)",
                  "doc": "A list of TLS cipher suites that the TLS transport can use.",
                  "required": false,
                  "default": "[]"
                },
                {
                  "name": "reload_interval",
                  "type": "duration",
                  "doc": "The duration after which the certificate is reloaded.",
                  "required": false,
                  "default": "\"0s\""
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "Verifies the hostname of server certificates when set.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "keepalive",
              "doc": "Configures keepalive settings for the configured server.",
              "required": false,
              "arguments": [
                {
                  "name": "ping_wait",
                  "type": "duration",
                  "doc": "How often to ping the server after no activity.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ping_response_timeout",
                  "type": "duration",
                  "doc": "Time to wait before closing inactive connections if the server does not respond to a ping.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ping_without_stream",
                  "type": "boolean",
                  "doc": "Send pings even if there is no active stream request.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": [
                {
                  "name": "server_parameters",
                  "doc": "Server parameters used to configure keepalive settings.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "max_connection_idle",
                      "type": "duration",
                      "doc": "Maximum age for idle connections.",
                      "required": false,
                      "default": "\"infinity\""
                    },
                    {
                      "name": "max_connection_age",
                      "type": "duration",
                      "doc": "Maximum age for non-idle connections.",
                      "required": false,
                      "default": "\"infinity\""
                    },
                    {
                      "name": "max_connection_age_grace",
                      "type": "duration",
                      "doc": "Time to wait before forcibly closing connections.",
                      "required": false,
                      "default": "\"infinity\""
                    },
                    {
                      "name": "time",
                      "type": "duration",
                      "doc": "How often to ping inactive clients to check for liveness.",
                      "required": false,
                      "default": "\"2h\""
                    },
                    {
                      "name": "timeout",
                      "type": "duration",
                      "doc": "Time to wait before closing inactive clients that do not respond to liveness checks.",
                      "required": false,
                      "default": "\"20s\""
                    }
                  ],
                  "blocks": []
                },
                {
                  "name": "enforcement_policy",
                  "doc": "Enforcement policy for keepalive settings.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "min_time",
                      "type": "duration",
                      "doc": "Minimum time clients should wait before sending a keepalive ping.",
                      "required": false,
                      "default": "\"5m\""
                    },
                    {
                      "name": "permit_without_stream",
                      "type": "boolean",
                      "doc": "Allow clients to send keepalive pings when there are no active streams.",
                      "required": false,
                      "default": "false"
                    }
                  ],
                  "blocks": []
                }
              ]
            }
          ]
        },
        {
          "name": "source",
          "doc": "Configures the Jaeger remote sampling document.",
          "required": true,
          "arguments": [
            {
              "name": "file",
              "type": "string",
              "doc": "A local file containing a Jaeger remote sampling document.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "reload_interval",
              "type": "duration",
              "doc": "The interval at which to reload the specified file. Leave at 0 to never reload.",
              "required": false,
              "default": "0"
            },
            {
              "name": "content",
              "type": "string",
              "doc": "A string containing the Jaeger remote sampling contents directly.",
              "required": false,
              "default": "\"\""
            }
          ],
          "blocks": [
            {
              "name": "remote",
              "doc": "Configures the gRPC client used to retrieve the Jaeger remote sampling document.",
              "required": false,
              "arguments": [
                {
                  "name": "endpoint",
                  "type": "string",
                  "doc": "host:port to send telemetry data to.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "compression",
                  "type": "string",
                  "doc": "Compression mechanism to use for requests.",
                  "required": false,
                  "default": "\"gzip\""
                },
                {
                  "name": "read_buffer_size",
                  "type": "string",
                  "doc": "Size of the read buffer the gRPC client to use for reading server responses.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "write_buffer_size",
                  "type": "string",
                  "doc": "Size of the write buffer the gRPC client to use for writing requests.",
                  "required": false,
                  "default": "\"512KiB\""
                },
                {
                  "name": "wait_for_ready",
                  "type": "boolean",
                  "doc": "Waits for gRPC connection to be in the READY state before sending data.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "headers",
                  "type": "map(string)",
                  "doc": "Additional headers to send with the request.",
                  "required": false,
                  "default": "{}"
                },
                {
                  "name": "balancer_name",
                  "type": "string",
                  "doc": "Which gRPC client-side load balancer to use for requests.",
                  "required": false,
                  "default": "pick_first"
                },
                {
                  "name": "authority",
                  "type": "string",
                  "doc": "Overrides the default :authority header in gRPC requests from the gRPC client.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "auth",
                  "type": "capsule(otelcol.Handler)",
                  "doc": "Handler from an otelcol.auth component to use for authenticating requests.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": [
                {
                  "name": "tls",
                  "doc": "Configures TLS for the gRPC client.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "ca_file",
                      "type": "string",
                      "doc": "Path to the CA file.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "ca_pem",
                      "type": "string",
                      "doc": "CA PEM-encoded text to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_file",
                      "type": "string",
                      "doc": "Path to the TLS certificate.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_pem",
                      "type": "string",
                      "doc": "Certificate PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "insecure_skip_verify",
                      "type": "boolean",
                      "doc": "Ignores insecure server TLS certificates.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "include_system_ca_certs_pool",
                      "type": "boolean",
                      "doc": "Whether to load the system certificate authorities pool alongside the certificate authority.",
                      "required": false,
                      "default": "false"
                    },
                    {
                      "name": "insecure",
                      "type": "boolean",
                      "doc": "Disables TLS when connecting to the configured server.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_file",
                      "type": "string",
                      "doc": "Path to the TLS certificate key.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_pem",
                      "type": "secret",
                      "doc": "Key PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "max_version",
                      "type": "string",
                      "doc": "Maximum acceptable TLS version for connections.",
                      "required": false,
                      "default": "\"TLS 1.3\""
                    },
                    {
                      "name": "min_version",
                      "type": "string",
                      "doc": "Minimum acceptable TLS version for connections.",
                      "required": false,
                      "default": "\"TLS 1.2\""
                    },
                    {
                      "name": "cipher_suites",
                      "type": "list(string)",
                      "doc": "A list of TLS cipher suites that the TLS transport can use.",
                      "required": false,
                      "default": "[]"
                    },
                    {
                      "name": "reload_interval",
                      "type": "duration",
                      "doc": "The duration after which the certificate is reloaded.",
                      "required": false,
                      "default": "\"0s\""
                    },
                    {
                      "name": "server_name",
                      "type": "string",
                      "doc": "Verifies the hostname of server certificates when set.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                },
                {
                  "name": "keepalive",
                  "doc": "Configures keepalive settings for the gRPC client.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "ping_wait",
                      "type": "duration",
                      "doc": "How often to ping the server after no activity.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "ping_response_timeout",
                      "type": "duration",
                      "doc": "Time to wait before closing inactive connections if the server does not respond to a ping.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "ping_without_stream",
                      "type": "boolean",
                      "doc": "Send pings even if there is no active stream request.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                }
              ]
            }
          ]
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.processor.attributes": {
      "name": "otelcol.processor.attributes",
      "doc": "`otelcol.processor.attributes` accepts telemetry data from other `otelcol`\ncomponents and modifies attributes of a span, log, or metric.\nIt also supports the ability to filter and match input data to determine if it should be included or excluded for attribute modifications.",
      "arguments": [],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "output",
          "doc": "Configures where to send received telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "logs",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send logs to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        },
        {
          "name": "action",
          "doc": "Actions to take on the attributes of incoming metrics/logs/traces.",
          "required": false,
          "arguments": [
            {
              "name": "key",
              "type": "string",
              "doc": "The attribute that the action relates to.",
              "required": true,
              "default": null
            },
            {
              "name": "action",
              "type": "string",
              "doc": "The type of action performed.",
              "required": true,
              "default": null
            },
            {
              "name": "value",
              "type": "any",
              "doc": "The value to populate for the key.",
              "required": false,
              "default": null
            },
            {
              "name": "pattern",
              "type": "string",
              "doc": "A regex pattern.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "from_attribute",
              "type": "string",
              "doc": "The attribute from the input data used to populate the attribute value.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "from_context",
              "type": "string",
              "doc": "The context value used to populate the attribute value.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "converted_type",
              "type": "string",
              "doc": "The type to convert the attribute value to.",
              "required": false,
              "default": "\"\""
            }
          ],
          "blocks": []
        },
        {
          "name": "include",
          "doc": "Filter for data included in this processor's actions.",
          "required": false,
          "arguments": [
            {
              "name": "match_type",
              "type": "string",
              "doc": "Controls how items to match against are interpreted.",
              "required": true,
              "default": null
            },
            {
              "name": "log_bodies",
              "type": "list(string)",
              "doc": "A list of strings that the LogRecord's body field must match against.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "log_severity_texts",
              "type": "list(string)",
              "doc": "A list of strings that the LogRecord's severity text field must match against.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "metric_names",
              "type": "list(string)",
              "doc": "A list of strings to match the metric name against.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "services",
              "type": "list(string)",
              "doc": "A list of items to match the service name against.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "span_kinds",
              "type": "list(string)",
              "doc": "A list of items to match the span kind against.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "span_names",
              "type": "list(string)",
              "doc": "A list of items to match the span name against.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": [
            {
              "name": "regexp",
              "doc": "Regex cache settings.",
              "required": false,
              "arguments": [
                {
                  "name": "cache_enabled",
                  "type": "bool",
                  "doc": "Determines whether match results are LRU cached.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "cache_max_num_entries",
                  "type": "int",
                  "doc": "The max number of entries of the LRU cache that stores match results.",
                  "required": false,
                  "default": "0"
                }
              ],
              "blocks": []
            },
            {
              "name": "attribute",
              "doc": "A list of attributes to match against.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "The attribute key.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "value",
                  "type": "any",
                  "doc": "The attribute value to match against.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "resource",
              "doc": "A list of items to match the resources against.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "The resource key.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "value",
                  "type": "any",
                  "doc": "The resource value to match against.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "library",
              "doc": "A list of items to match the implementation library against.",
              "required": false,
              "arguments": [
                {
                  "name": "name",
                  "type": "string",
                  "doc": "The attribute key.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "version",
                  "type": "string",
                  "doc": "The version to match against.",
                  "required": false,
                  "default": "null"
                }
              ],
              "blocks": []
            },
            {
              "name": "log_severity",
              "doc": "How to match against a log record's SeverityNumber, if defined.",
              "required": false,
              "arguments": [
                {
                  "name": "match_undefined",
                  "type": "bool",
                  "doc": "Whether logs with \"undefined\" severity match.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "min",
                  "type": "string",
                  "doc": "The lowest severity that may be matched.",
                  "required": true,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "exclude",
          "doc": "Filter for data excluded from this processor's actions",
          "required": false,
          "arguments": [
            {
              "name": "match_type",
              "type": "string",
              "doc": "Controls how items to match against are interpreted.",
              "required": true,
              "default": null
            },
            {
              "name": "log_bodies",
              "type": "list(string)",
              "doc": "A list of strings that the LogRecord's body field must match against.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "log_severity_texts",
              "type": "list(string)",
              "doc": "A list of strings that the LogRecord's severity text field must match against.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "metric_names",
              "type": "list(string)",
              "doc": "A list of strings to match the metric name against.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "services",
              "type": "list(string)",
              "doc": "A list of items to match the service name against.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "span_kinds",
              "type": "list(string)",
              "doc": "A list of items to match the span kind against.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "span_names",
              "type": "list(string)",
              "doc": "A list of items to match the span name against.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": [
            {
              "name": "regexp",
              "doc": "Regex cache settings.",
              "required": false,
              "arguments": [
                {
                  "name": "cache_enabled",
                  "type": "bool",
                  "doc": "Determines whether match results are LRU cached.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "cache_max_num_entries",
                  "type": "int",
                  "doc": "The max number of entries of the LRU cache that stores match results.",
                  "required": false,
                  "default": "0"
                }
              ],
              "blocks": []
            },
            {
              "name": "attribute",
              "doc": "A list of attributes to match against.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "The attribute key.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "value",
                  "type": "any",
                  "doc": "The attribute value to match against.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "resource",
              "doc": "A list of items to match the resources against.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "The resource key.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "value",
                  "type": "any",
                  "doc": "The resource value to match against.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "library",
              "doc": "A list of items to match the implementation library against.",
              "required": false,
              "arguments": [
                {
                  "name": "name",
                  "type": "string",
                  "doc": "The attribute key.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "version",
                  "type": "string",
                  "doc": "The version to match against.",
                  "required": false,
                  "default": "null"
                }
              ],
              "blocks": []
            },
            {
              "name": "log_severity",
              "doc": "How to match against a log record's SeverityNumber, if defined.",
              "required": false,
              "arguments": [
                {
                  "name": "match_undefined",
                  "type": "bool",
                  "doc": "Whether logs with \"undefined\" severity match.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "min",
                  "type": "string",
                  "doc": "The lowest severity that may be matched.",
                  "required": true,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.processor.batch": {
      "name": "otelcol.processor.batch",
      "doc": "`otelcol.processor.batch` accepts telemetry data from other `otelcol`\ncomponents and places them into batches. Batching improves the compression of\ndata and reduces the number of outgoing network requests required to transmit\ndata. This processor supports both size and time based batching.",
      "arguments": [
        {
          "name": "timeout",
          "type": "duration",
          "doc": "How long to wait before flushing the batch.",
          "required": false,
          "default": "\"200ms\""
        },
        {
          "name": "send_batch_size",
          "type": "number",
          "doc": "Amount of data to buffer before flushing the batch.",
          "required": false,
          "default": "8192"
        },
        {
          "name": "send_batch_max_size",
          "type": "number",
          "doc": "Upper limit of a batch size.",
          "required": false,
          "default": "0"
        },
        {
          "name": "metadata_keys",
          "type": "list(string)",
          "doc": "Creates a different batcher for each key/value combination of metadata.",
          "required": false,
          "default": "[]"
        },
        {
          "name": "metadata_cardinality_limit",
          "type": "number",
          "doc": "Limit of the unique metadata key/value combinations.",
          "required": false,
          "default": "1000"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "output",
          "doc": "Configures where to send received telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "logs",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send logs to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.processor.deltatocumulative": {
      "name": "otelcol.processor.deltatocumulative",
      "doc": "`otelcol.processor.deltatocumulative` accepts metrics from other `otelcol` components and converts metrics with the delta temporality to cumulative.",
      "arguments": [
        {
          "name": "max_stale",
          "type": "duration",
          "doc": "How long to wait for a new sample before marking a stream as stale.",
          "required": false,
          "default": "\"5m\""
        },
        {
          "name": "max_streams",
          "type": "number",
          "doc": "Upper limit of streams to track. Set to 0 to disable.",
          "required": false,
          "default": "0"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "output",
          "doc": "Configures where to send received telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "logs",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send logs to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.processor.discovery": {
      "name": "otelcol.processor.discovery",
      "doc": "`otelcol.processor.discovery` accepts traces telemetry data from other `otelcol` components.\nIt can be paired with `discovery.*` components, which supply a list of labels for each discovered target.\n`otelcol.processor.discovery` adds resource attributes to spans which have a hostname matching the one in the `__address__` label provided by the `discovery.*` component.",
      "arguments": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "List of target labels to apply to the spans.",
          "required": true,
          "default": null
        },
        {
          "name": "operation_type",
          "type": "string",
          "doc": "Configures whether to update a span's attribute if it already exists.",
          "required": false,
          "default": "upsert"
        },
        {
          "name": "pod_associations",
          "type": "list(string)",
          "doc": "Configures how to decide the hostname of the span.",
          "required": false,
          "default": "[\"ip\", \"net.host.ip\", \"k8s.pod.ip\", \"hostname\", \"connection\"]"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "output",
          "doc": "Configures where to send received telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.processor.filter": {
      "name": "otelcol.processor.filter",
      "doc": "`otelcol.processor.filter` accepts and filters telemetry data from other `otelcol`\ncomponents using the [OpenTelemetry Transformation Language (OTTL)][OTTL].\nIf any of the OTTL statements evaluates to true, the telemetry data is dropped.",
      "arguments": [
        {
          "name": "error_mode",
          "type": "string",
          "doc": "How to react to errors if they occur while processing a statement.",
          "required": false,
          "default": "\"propagate\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "traces",
          "doc": "Statements which filter traces.",
          "required": false,
          "arguments": [
            {
              "name": "span",
              "type": "list(string)",
              "doc": "List of OTTL statements filtering OTLP spans.",
              "required": false,
              "default": null
            },
            {
              "name": "spanevent",
              "type": "list(string)",
              "doc": "List of OTTL statements filtering OTLP span events.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "metrics",
          "doc": "Statements which filter metrics.",
          "required": false,
          "arguments": [
            {
              "name": "metric",
              "type": "list(string)",
              "doc": "List of OTTL statements filtering OTLP metric.",
              "required": false,
              "default": null
            },
            {
              "name": "datapoint",
              "type": "list(string)",
              "doc": "List of OTTL statements filtering OTLP metric datapoints.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "logs",
          "doc": "Statements which filter logs.",
          "required": false,
          "arguments": [
            {
              "name": "log_record",
              "type": "list(string)",
              "doc": "List of OTTL statements filtering OTLP metric.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "output",
          "doc": "Configures where to send received telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "logs",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send logs to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.processor.k8sattributes": {
      "name": "otelcol.processor.k8sattributes",
      "doc": "`otelcol.processor.k8sattributes` accepts telemetry data from other `otelcol`\ncomponents and adds Kubernetes metadata to the resource attributes of spans, logs, or metrics.",
      "arguments": [
        {
          "name": "auth_type",
          "type": "string",
          "doc": "Authentication method when connecting to the Kubernetes API.",
          "required": false,
          "default": "serviceAccount"
        },
        {
          "name": "passthrough",
          "type": "bool",
          "doc": "Passthrough signals as-is, only adding a k8s.pod.ip resource attribute.",
          "required": false,
          "default": "false"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "output",
          "doc": "Configures where to send received telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "logs",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send logs to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        },
        {
          "name": "extract",
          "doc": "Rules for extracting data from Kubernetes.",
          "required": false,
          "arguments": [
            {
              "name": "metadata",
              "type": "list(string)",
              "doc": "Pre-configured metadata keys to add.",
              "required": false,
              "default": "_See below_"
            }
          ],
          "blocks": [
            {
              "name": "annotation",
              "doc": "Creating resource attributes from Kubernetes annotations.",
              "required": false,
              "arguments": [
                {
                  "name": "from",
                  "type": "string",
                  "doc": "The source of the labels or annotations. Allowed values are pod, namespace, and node.",
                  "required": false,
                  "default": "pod"
                },
                {
                  "name": "key_regex",
                  "type": "string",
                  "doc": "A regular expression used to extract a key that matches the regular expression.",
                  "required": false,
                  "default": "\"\""
                },
                {
                  "name": "key",
                  "type": "string",
                  "doc": "The annotation or label name. This key must exactly match an annotation or label name.",
                  "required": false,
                  "default": "\"\""
                },
                {
                  "name": "regex",
                  "type": "string",
                  "doc": "An optional field used to extract a sub-string from a complex field value.",
                  "required": false,
                  "default": "\"\""
                },
                {
                  "name": "tag_name",
                  "type": "string",
                  "doc": "The name of the resource attribute added to logs, metrics, or spans.",
                  "required": false,
                  "default": "\"\""
                }
              ],
              "blocks": []
            },
            {
              "name": "label",
              "doc": "Creating resource attributes from Kubernetes labels.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "The key or name of the field or labels that a filter can use.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "value",
                  "type": "string",
                  "doc": "The value associated with the key that a filter can use.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "op",
                  "type": "string",
                  "doc": "The filter operation to apply on the given key: value pair.",
                  "required": false,
                  "default": "equals"
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "filter",
          "doc": "Filters the data loaded from Kubernetes.",
          "required": false,
          "arguments": [
            {
              "name": "node",
              "type": "string",
              "doc": "Configures a Kubernetes node name or host name.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "namespace",
              "type": "string",
              "doc": "Filters all pods by the provided namespace. All other pods are ignored.",
              "required": false,
              "default": "\"\""
            }
          ],
          "blocks": [
            {
              "name": "field",
              "doc": "Filter pods by generic Kubernetes fields.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "The key or name of the field or labels that a filter can use.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "value",
                  "type": "string",
                  "doc": "The value associated with the key that a filter can use.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "op",
                  "type": "string",
                  "doc": "The filter operation to apply on the given key: value pair.",
                  "required": false,
                  "default": "equals"
                }
              ],
              "blocks": []
            },
            {
              "name": "label",
              "doc": "Filter pods by Kubernetes labels.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "The key or name of the field or labels that a filter can use.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "value",
                  "type": "string",
                  "doc": "The value associated with the key that a filter can use.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "op",
                  "type": "string",
                  "doc": "The filter operation to apply on the given key: value pair.",
                  "required": false,
                  "default": "equals"
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "pod_association",
          "doc": "Rules to associate pod metadata with telemetry signals.",
          "required": false,
          "arguments": [],
          "blocks": [
            {
              "name": "source",
              "doc": "Source information to identify a pod.",
              "required": false,
              "arguments": [
                {
                  "name": "from",
                  "type": "string",
                  "doc": "The association method. Currently supports resource_attribute and connection",
                  "required": true,
                  "default": null
                },
                {
                  "name": "name",
                  "type": "string",
                  "doc": "Name represents extracted key name. For example, ip, pod_uid, k8s.pod.ip",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "exclude",
          "doc": "Exclude pods from being processed.",
          "required": false,
          "arguments": [],
          "blocks": [
            {
              "name": "pod",
              "doc": "Pod information.",
              "required": false,
              "arguments": [
                {
                  "name": "name",
                  "type": "string",
                  "doc": "The name of the pod",
                  "required": true,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.processor.memory_limiter": {
      "name": "otelcol.processor.memory_limiter",
      "doc": "`otelcol.processor.memory_limiter` is used to prevent out of memory situations\non a telemetry pipeline by performing periodic checks of memory usage. If\nusage exceeds the defined limits, data is dropped and garbage collections\nare triggered to reduce it.",
      "arguments": [
        {
          "name": "check_interval",
          "type": "duration",
          "doc": "How often to check memory usage.",
          "required": true,
          "default": null
        },
        {
          "name": "limit",
          "type": "string",
          "doc": "Maximum amount of memory targeted to be allocated by the process heap.",
          "required": false,
          "default": "\"0MiB\""
        },
        {
          "name": "spike_limit",
          "type": "string",
          "doc": "Maximum spike expected between the measurements of memory usage.",
          "required": false,
          "default": "20% of limit"
        },
        {
          "name": "limit_percentage",
          "type": "int",
          "doc": "Maximum amount of total available memory targeted to be allocated by the process heap.",
          "required": false,
          "default": "0"
        },
        {
          "name": "spike_limit_percentage",
          "type": "int",
          "doc": "Maximum spike expected between the measurements of memory usage.",
          "required": false,
          "default": "0"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "output",
          "doc": "Configures where to send received telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "logs",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send logs to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.processor.probabilistic_sampler": {
      "name": "otelcol.processor.probabilistic_sampler",
      "doc": "`otelcol.processor.probabilistic_sampler` accepts logs and traces data from other otelcol components and applies probabilistic sampling based on configuration options.",
      "arguments": [
        {
          "name": "hash_seed",
          "type": "uint32",
          "doc": "An integer used to compute the hash algorithm.",
          "required": false,
          "default": "0"
        },
        {
          "name": "sampling_percentage",
          "type": "float32",
          "doc": "Percentage of traces or logs sampled.",
          "required": false,
          "default": "0"
        },
        {
          "name": "fail_closed",
          "type": "bool",
          "doc": "Whether to reject items with sampling-related errors.",
          "required": false,
          "default": "true"
        },
        {
          "name": "attribute_source",
          "type": "string",
          "doc": "Defines where to look for the attribute in from_attribute.",
          "required": false,
          "default": "\"traceID\""
        },
        {
          "name": "from_attribute",
          "type": "string",
          "doc": "The name of a log record attribute used for sampling purposes.",
          "required": false,
          "default": "\"\""
        },
        {
          "name": "sampling_priority",
          "type": "string",
          "doc": "The name of a log record attribute used to set a different sampling priority from the sampling_percentage setting.",
          "required": false,
          "default": "\"\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.processor.resourcedetection": {
      "name": "otelcol.processor.resourcedetection",
      "doc": "`otelcol.processor.resourcedetection` detects resource information from the host in a format that conforms to the [OpenTelemetry resource semantic conventions][], and appends or overrides the resource values in the telemetry data with this information.",
      "arguments": [
        {
          "name": "detectors",
          "type": "list(string)",
          "doc": "An ordered list of named detectors used to detect resource information.",
          "required": false,
          "default": "[\"env\"]"
        },
        {
          "name": "override",
          "type": "bool",
          "doc": "Configures whether existing resource attributes should be overridden or preserved.",
          "required": false,
          "default": "true"
        },
        {
          "name": "timeout",
          "type": "duration",
          "doc": "Timeout by which all specified detectors must complete.",
          "required": false,
          "default": "\"5s\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "output",
          "doc": "Configures where to send received telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "logs",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send logs to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        },
        {
          "name": "ec2",
          "doc": "",
          "required": false,
          "arguments": [
            {
              "name": "tags",
              "type": "list(string)",
              "doc": "A list of regular expressions to match against tag keys of an EC2 instance.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        },
        {
          "name": "ecs",
          "doc": "",
          "required": false,
          "arguments": [],
          "blocks": []
        },
        {
          "name": "eks",
          "doc": "",
          "required": false,
          "arguments": [],
          "blocks": []
        },
        {
          "name": "elasticbeanstalk",
          "doc": "",
          "required": false,
          "arguments": [],
          "blocks": []
        },
        {
          "name": "lambda",
          "doc": "",
          "required": false,
          "arguments": [],
          "blocks": []
        },
        {
          "name": "azure",
          "doc": "",
          "required": false,
          "arguments": [
            {
              "name": "tags",
              "type": "list(string)",
              "doc": "A list of regex's to match tag keys to add as resource attributes can be specified.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        },
        {
          "name": "aks",
          "doc": "",
          "required": false,
          "arguments": [],
          "blocks": []
        },
        {
          "name": "consul",
          "doc": "",
          "required": false,
          "arguments": [
            {
              "name": "address",
              "type": "string",
              "doc": "The address of the Consul server",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "datacenter",
              "type": "string",
              "doc": "Datacenter to use. If not provided, the default agent datacenter is used.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "token",
              "type": "secret",
              "doc": "A per-request ACL token which overrides the Consul agent's default (empty) token.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "namespace",
              "type": "string",
              "doc": "The name of the namespace to send along for the request.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "meta",
              "type": "list(string)",
              "doc": "Allowlist of [Consul Metadata][] keys to use as resource attributes.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        },
        {
          "name": "docker",
          "doc": "",
          "required": false,
          "arguments": [],
          "blocks": []
        },
        {
          "name": "gcp",
          "doc": "",
          "required": false,
          "arguments": [],
          "blocks": []
        },
        {
          "name": "heroku",
          "doc": "",
          "required": false,
          "arguments": [],
          "blocks": []
        },
        {
          "name": "system",
          "doc": "",
          "required": false,
          "arguments": [
            {
              "name": "hostname_sources",
              "type": "list(string)",
              "doc": "A priority list of sources from which the hostname will be fetched.",
              "required": false,
              "default": "[\"dns\", \"os\"]"
            }
          ],
          "blocks": []
        },
        {
          "name": "openshift",
          "doc": "",
          "required": false,
          "arguments": [
            {
              "name": "address",
              "type": "string",
              "doc": "Address of the OpenShift API server.",
              "required": false,
              "default": "_See below_"
            },
            {
              "name": "token",
              "type": "string",
              "doc": "Token used to identify against the OpenShift API server.",
              "required": false,
              "default": "\"\""
            }
          ],
          "blocks": []
        },
        {
          "name": "kubernetes_node",
          "doc": "",
          "required": false,
          "arguments": [
            {
              "name": "auth_type",
              "type": "string",
              "doc": "Configures how to authenticate to the K8s API server.",
              "required": false,
              "default": "\"none\""
            },
            {
              "name": "context",
              "type": "string",
              "doc": "Override the current context when auth_type is set to \"kubeConfig\".",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "node_from_env_var",
              "type": "string",
              "doc": "The name of an environment variable from which to retrieve the node name.",
              "required": false,
              "default": "\"K8S_NODE_NAME\""
            }
          ],
          "blocks": []
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.processor.span": {
      "name": "otelcol.processor.span",
      "doc": "`otelcol.processor.span` accepts traces telemetry data from other `otelcol` components and modifies the names and attributes of the spans.\nIt also supports the ability to filter input data to determine if it should be included or excluded from this processor.",
      "arguments": [],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "output",
          "doc": "Configures where to send received telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        },
        {
          "name": "name",
          "doc": "Configures how to rename a span and add attributes.",
          "required": false,
          "arguments": [
            {
              "name": "from_attributes",
              "type": "list(string)",
              "doc": "Attribute keys to pull values from, to generate a new span name.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "separator",
              "type": "string",
              "doc": "Separates attributes values in the new span name.",
              "required": false,
              "default": "\"\""
            }
          ],
          "blocks": [
            {
              "name": "to_attributes",
              "doc": "Configuration to create attributes from a span name.",
              "required": false,
              "arguments": [
                {
                  "name": "rules",
                  "type": "list(string)",
                  "doc": "A list of regex rules to extract attribute values from span name.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "break_after_match",
                  "type": "bool",
                  "doc": "Configures if processing of rules should stop after the first match.",
                  "required": false,
                  "default": "false"
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "status",
          "doc": "Specifies a status which should be set for this span.",
          "required": false,
          "arguments": [
            {
              "name": "code",
              "type": "string",
              "doc": "A status code.",
              "required": true,
              "default": null
            },
            {
              "name": "description",
              "type": "string",
              "doc": "An optional field documenting Error status codes.",
              "required": false,
              "default": "\"\""
            }
          ],
          "blocks": []
        },
        {
          "name": "include",
          "doc": "Filter for data included in this processor's actions.",
          "required": false,
          "arguments": [
            {
              "name": "match_type",
              "type": "string",
              "doc": "Controls how items to match against are interpreted.",
              "required": true,
              "default": null
            },
            {
              "name": "services",
              "type": "list(string)",
              "doc": "A list of items to match the service name against.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "span_names",
              "type": "list(string)",
              "doc": "A list of items to match the span name against.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "span_kinds",
              "type": "list(string)",
              "doc": "A list of items to match the span kind against.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": [
            {
              "name": "regexp",
              "doc": "Regex cache settings.",
              "required": false,
              "arguments": [
                {
                  "name": "cache_enabled",
                  "type": "bool",
                  "doc": "Determines whether match results are LRU cached.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "cache_max_num_entries",
                  "type": "int",
                  "doc": "The max number of entries of the LRU cache that stores match results.",
                  "required": false,
                  "default": "0"
                }
              ],
              "blocks": []
            },
            {
              "name": "attribute",
              "doc": "A list of attributes to match against.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "The attribute key.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "value",
                  "type": "any",
                  "doc": "The attribute value to match against.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "resource",
              "doc": "A list of items to match the resources against.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "The resource key.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "value",
                  "type": "any",
                  "doc": "The resource value to match against.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "library",
              "doc": "A list of items to match the implementation library against.",
              "required": false,
              "arguments": [
                {
                  "name": "name",
                  "type": "string",
                  "doc": "The attribute key.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "version",
                  "type": "string",
                  "doc": "The version to match against.",
                  "required": false,
                  "default": "null"
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "exclude",
          "doc": "Filter for data excluded from this processor's actions",
          "required": false,
          "arguments": [
            {
              "name": "match_type",
              "type": "string",
              "doc": "Controls how items to match against are interpreted.",
              "required": true,
              "default": null
            },
            {
              "name": "services",
              "type": "list(string)",
              "doc": "A list of items to match the service name against.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "span_names",
              "type": "list(string)",
              "doc": "A list of items to match the span name against.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "span_kinds",
              "type": "list(string)",
              "doc": "A list of items to match the span kind against.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": [
            {
              "name": "regexp",
              "doc": "Regex cache settings.",
              "required": false,
              "arguments": [
                {
                  "name": "cache_enabled",
                  "type": "bool",
                  "doc": "Determines whether match results are LRU cached.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "cache_max_num_entries",
                  "type": "int",
                  "doc": "The max number of entries of the LRU cache that stores match results.",
                  "required": false,
                  "default": "0"
                }
              ],
              "blocks": []
            },
            {
              "name": "attribute",
              "doc": "A list of attributes to match against.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "The attribute key.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "value",
                  "type": "any",
                  "doc": "The attribute value to match against.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "resource",
              "doc": "A list of items to match the resources against.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "The resource key.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "value",
                  "type": "any",
                  "doc": "The resource value to match against.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "library",
              "doc": "A list of items to match the implementation library against.",
              "required": false,
              "arguments": [
                {
                  "name": "name",
                  "type": "string",
                  "doc": "The attribute key.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "version",
                  "type": "string",
                  "doc": "The version to match against.",
                  "required": false,
                  "default": "null"
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.processor.tail_sampling": {
      "name": "otelcol.processor.tail_sampling",
      "doc": "`otelcol.processor.tail_sampling` samples traces based on a set of defined\npolicies. All spans for a given trace *must* be received by the same collector\ninstance for effective sampling decisions.",
      "arguments": [
        {
          "name": "decision_wait",
          "type": "duration",
          "doc": "Wait time since the first span of a trace before making a sampling decision.",
          "required": false,
          "default": "\"30s\""
        },
        {
          "name": "num_traces",
          "type": "int",
          "doc": "Number of traces kept in memory.",
          "required": false,
          "default": "50000"
        },
        {
          "name": "expected_new_traces_per_sec",
          "type": "int",
          "doc": "Expected number of new traces (helps in allocating data structures).",
          "required": false,
          "default": "0"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "policy",
          "doc": "Policies used to make a sampling decision.",
          "required": true,
          "arguments": [
            {
              "name": "name",
              "type": "string",
              "doc": "The custom name given to the policy.",
              "required": true,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "The valid policy type for this policy.",
              "required": true,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "latency",
              "doc": "The policy will sample based on the duration of the trace.",
              "required": false,
              "arguments": [
                {
                  "name": "threshold_ms",
                  "type": "number",
                  "doc": "Lower latency threshold for sampling, in milliseconds.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "upper_threshold_ms",
                  "type": "number",
                  "doc": "Upper latency threshold for sampling, in milliseconds.",
                  "required": false,
                  "default": "0"
                }
              ],
              "blocks": []
            },
            {
              "name": "numeric_attribute",
              "doc": "The policy will sample based on number attributes (resource and record).",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "Tag that the filter is matched against.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "min_value",
                  "type": "number",
                  "doc": "The minimum value of the attribute to be considered a match.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "max_value",
                  "type": "number",
                  "doc": "The maximum value of the attribute to be considered a match.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "invert_match",
                  "type": "bool",
                  "doc": "Indicates that values must not match against attribute values.",
                  "required": false,
                  "default": "false"
                }
              ],
              "blocks": []
            },
            {
              "name": "probabilistic",
              "doc": "The policy will sample a percentage of traces.",
              "required": false,
              "arguments": [
                {
                  "name": "sampling_percentage",
                  "type": "number",
                  "doc": "The percentage rate at which traces are sampled.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "hash_salt",
                  "type": "string",
                  "doc": "See below.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "status_code",
              "doc": "The policy will sample based upon the status code.",
              "required": false,
              "arguments": [
                {
                  "name": "status_codes",
                  "type": "list(string)",
                  "doc": "Holds the configurable settings to create a status code filter sampling policy evaluator.",
                  "required": true,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "string_attribute",
              "doc": "The policy will sample based on string attributes (resource and record) value matches.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "Tag that the filter is matched against.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "values",
                  "type": "list(string)",
                  "doc": "Set of values or regular expressions to use when matching against attribute values.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "enabled_regex_matching",
                  "type": "bool",
                  "doc": "Determines whether to match attribute values by regexp string.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "cache_max_size",
                  "type": "string",
                  "doc": "The maximum number of attribute entries of Least Recently Used (LRU) Cache that stores the matched result from the regular expressions defined in values.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "invert_match",
                  "type": "bool",
                  "doc": "Indicates that values or regular expressions must not match against attribute values.",
                  "required": false,
                  "default": "false"
                }
              ],
              "blocks": []
            },
            {
              "name": "rate_limiting",
              "doc": "The policy will sample based on rate.",
              "required": false,
              "arguments": [
                {
                  "name": "spans_per_second",
                  "type": "number",
                  "doc": "Sets the maximum number of spans that can be processed each second.",
                  "required": true,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "span_count",
              "doc": "The policy will sample based on the minimum number of spans within a batch.",
              "required": false,
              "arguments": [
                {
                  "name": "min_spans",
                  "type": "number",
                  "doc": "Minimum number of spans in a trace.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "max_spans",
                  "type": "number",
                  "doc": "Maximum number of spans in a trace.",
                  "required": false,
                  "default": "0"
                }
              ],
              "blocks": []
            },
            {
              "name": "boolean_attribute",
              "doc": "The policy will sample based on a boolean attribute (resource and record).",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "Attribute key to match against.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "value",
                  "type": "bool",
                  "doc": "The bool value (true or false) to use when matching against attribute values.",
                  "required": true,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "ottl_condition",
              "doc": "The policy will sample based on a given boolean OTTL condition (span and span event).",
              "required": false,
              "arguments": [
                {
                  "name": "error_mode",
                  "type": "string",
                  "doc": "Error handling if OTTL conditions fail to evaluate.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "span",
                  "type": "list(string)",
                  "doc": "OTTL conditions for spans.",
                  "required": false,
                  "default": "[]"
                },
                {
                  "name": "spanevent",
                  "type": "list(string)",
                  "doc": "OTTL conditions for span events.",
                  "required": false,
                  "default": "[]"
                }
              ],
              "blocks": []
            },
            {
              "name": "trace_state",
              "doc": "The policy will sample based on TraceState value matches.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "Tag that the filter is matched against.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "values",
                  "type": "list(string)",
                  "doc": "Set of values to use when matching against trace_state values.",
                  "required": true,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "and",
              "doc": "The policy will sample based on multiple policies, creates an and policy.",
              "required": false,
              "arguments": [],
              "blocks": [
                {
                  "name": "and_sub_policy",
                  "doc": "A set of policies underneath an and policy type.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "name",
                      "type": "string",
                      "doc": "The custom name given to the policy.",
                      "required": true,
                      "default": null
                    },
                    {
                      "name": "type",
                      "type": "string",
                      "doc": "The valid policy type for this policy.",
                      "required": true,
                      "default": null
                    }
                  ],
                  "blocks": [
                    {
                      "name": "latency",
                      "doc": "The policy will sample based on the duration of the trace.",
                      "required": false,
                      "arguments": [
                        {
                          "name": "threshold_ms",
                          "type": "number",
                          "doc": "Lower latency threshold for sampling, in milliseconds.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "upper_threshold_ms",
                          "type": "number",
                          "doc": "Upper latency threshold for sampling, in milliseconds.",
                          "required": false,
                          "default": "0"
                        }
                      ],
                      "blocks": []
                    },
                    {
                      "name": "numeric_attribute",
                      "doc": "The policy will sample based on number attributes (resource and record).",
                      "required": false,
                      "arguments": [
                        {
                          "name": "key",
                          "type": "string",
                          "doc": "Tag that the filter is matched against.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "min_value",
                          "type": "number",
                          "doc": "The minimum value of the attribute to be considered a match.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "max_value",
                          "type": "number",
                          "doc": "The maximum value of the attribute to be considered a match.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "invert_match",
                          "type": "bool",
                          "doc": "Indicates that values must not match against attribute values.",
                          "required": false,
                          "default": "false"
                        }
                      ],
                      "blocks": []
                    },
                    {
                      "name": "probabilistic",
                      "doc": "The policy will sample a percentage of traces.",
                      "required": false,
                      "arguments": [
                        {
                          "name": "sampling_percentage",
                          "type": "number",
                          "doc": "The percentage rate at which traces are sampled.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "hash_salt",
                          "type": "string",
                          "doc": "See below.",
                          "required": false,
                          "default": null
                        }
                      ],
                      "blocks": []
                    },
                    {
                      "name": "status_code",
                      "doc": "The policy will sample based upon the status code.",
                      "required": false,
                      "arguments": [
                        {
                          "name": "status_codes",
                          "type": "list(string)",
                          "doc": "Holds the configurable settings to create a status code filter sampling policy evaluator.",
                          "required": true,
                          "default": null
                        }
                      ],
                      "blocks": []
                    },
                    {
                      "name": "string_attribute",
                      "doc": "The policy will sample based on string attributes (resource and record) value matches.",
                      "required": false,
                      "arguments": [
                        {
                          "name": "key",
                          "type": "string",
                          "doc": "Tag that the filter is matched against.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "values",
                          "type": "list(string)",
                          "doc": "Set of values or regular expressions to use when matching against attribute values.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "enabled_regex_matching",
                          "type": "bool",
                          "doc": "Determines whether to match attribute values by regexp string.",
                          "required": false,
                          "default": "false"
                        },
                        {
                          "name": "cache_max_size",
                          "type": "string",
                          "doc": "The maximum number of attribute entries of Least Recently Used (LRU) Cache that stores the matched result from the regular expressions defined in values.",
                          "required": false,
                          "default": null
                        },
                        {
                          "name": "invert_match",
                          "type": "bool",
                          "doc": "Indicates that values or regular expressions must not match against attribute values.",
                          "required": false,
                          "default": "false"
                        }
                      ],
                      "blocks": []
                    },
                    {
                      "name": "rate_limiting",
                      "doc": "The policy will sample based on rate.",
                      "required": false,
                      "arguments": [
                        {
                          "name": "spans_per_second",
                          "type": "number",
                          "doc": "Sets the maximum number of spans that can be processed each second.",
                          "required": true,
                          "default": null
                        }
                      ],
                      "blocks": []
                    },
                    {
                      "name": "span_count",
                      "doc": "The policy will sample based on the minimum number of spans within a batch.",
                      "required": false,
                      "arguments": [
                        {
                          "name": "min_spans",
                          "type": "number",
                          "doc": "Minimum number of spans in a trace.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "max_spans",
                          "type": "number",
                          "doc": "Maximum number of spans in a trace.",
                          "required": false,
                          "default": "0"
                        }
                      ],
                      "blocks": []
                    },
                    {
                      "name": "boolean_attribute",
                      "doc": "The policy will sample based on a boolean attribute (resource and record).",
                      "required": false,
                      "arguments": [
                        {
                          "name": "key",
                          "type": "string",
                          "doc": "Attribute key to match against.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "value",
                          "type": "bool",
                          "doc": "The bool value (true or false) to use when matching against attribute values.",
                          "required": true,
                          "default": null
                        }
                      ],
                      "blocks": []
                    },
                    {
                      "name": "ottl_condition",
                      "doc": "The policy will sample based on a given boolean OTTL condition (span and span event).",
                      "required": false,
                      "arguments": [
                        {
                          "name": "error_mode",
                          "type": "string",
                          "doc": "Error handling if OTTL conditions fail to evaluate.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "span",
                          "type": "list(string)",
                          "doc": "OTTL conditions for spans.",
                          "required": false,
                          "default": "[]"
                        },
                        {
                          "name": "spanevent",
                          "type": "list(string)",
                          "doc": "OTTL conditions for span events.",
                          "required": false,
                          "default": "[]"
                        }
                      ],
                      "blocks": []
                    },
                    {
                      "name": "trace_state",
                      "doc": "The policy will sample based on TraceState value matches.",
                      "required": false,
                      "arguments": [
                        {
                          "name": "key",
                          "type": "string",
                          "doc": "Tag that the filter is matched against.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "values",
                          "type": "list(string)",
                          "doc": "Set of values to use when matching against trace_state values.",
                          "required": true,
                          "default": null
                        }
                      ],
                      "blocks": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "composite",
              "doc": "This policy will sample based on a combination of above samplers, with ordering and rate allocation per sampler.",
              "required": false,
              "arguments": [],
              "blocks": [
                {
                  "name": "composite_sub_policy",
                  "doc": "A set of policies underneath a composite policy type.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "name",
                      "type": "string",
                      "doc": "The custom name given to the policy.",
                      "required": true,
                      "default": null
                    },
                    {
                      "name": "type",
                      "type": "string",
                      "doc": "The valid policy type for this policy.",
                      "required": true,
                      "default": null
                    }
                  ],
                  "blocks": [
                    {
                      "name": "latency",
                      "doc": "The policy will sample based on the duration of the trace.",
                      "required": false,
                      "arguments": [
                        {
                          "name": "threshold_ms",
                          "type": "number",
                          "doc": "Lower latency threshold for sampling, in milliseconds.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "upper_threshold_ms",
                          "type": "number",
                          "doc": "Upper latency threshold for sampling, in milliseconds.",
                          "required": false,
                          "default": "0"
                        }
                      ],
                      "blocks": []
                    },
                    {
                      "name": "numeric_attribute",
                      "doc": "The policy will sample based on number attributes (resource and record).",
                      "required": false,
                      "arguments": [
                        {
                          "name": "key",
                          "type": "string",
                          "doc": "Tag that the filter is matched against.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "min_value",
                          "type": "number",
                          "doc": "The minimum value of the attribute to be considered a match.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "max_value",
                          "type": "number",
                          "doc": "The maximum value of the attribute to be considered a match.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "invert_match",
                          "type": "bool",
                          "doc": "Indicates that values must not match against attribute values.",
                          "required": false,
                          "default": "false"
                        }
                      ],
                      "blocks": []
                    },
                    {
                      "name": "probabilistic",
                      "doc": "The policy will sample a percentage of traces.",
                      "required": false,
                      "arguments": [
                        {
                          "name": "sampling_percentage",
                          "type": "number",
                          "doc": "The percentage rate at which traces are sampled.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "hash_salt",
                          "type": "string",
                          "doc": "See below.",
                          "required": false,
                          "default": null
                        }
                      ],
                      "blocks": []
                    },
                    {
                      "name": "status_code",
                      "doc": "The policy will sample based upon the status code.",
                      "required": false,
                      "arguments": [
                        {
                          "name": "status_codes",
                          "type": "list(string)",
                          "doc": "Holds the configurable settings to create a status code filter sampling policy evaluator.",
                          "required": true,
                          "default": null
                        }
                      ],
                      "blocks": []
                    },
                    {
                      "name": "string_attribute",
                      "doc": "The policy will sample based on string attributes (resource and record) value matches.",
                      "required": false,
                      "arguments": [
                        {
                          "name": "key",
                          "type": "string",
                          "doc": "Tag that the filter is matched against.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "values",
                          "type": "list(string)",
                          "doc": "Set of values or regular expressions to use when matching against attribute values.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "enabled_regex_matching",
                          "type": "bool",
                          "doc": "Determines whether to match attribute values by regexp string.",
                          "required": false,
                          "default": "false"
                        },
                        {
                          "name": "cache_max_size",
                          "type": "string",
                          "doc": "The maximum number of attribute entries of Least Recently Used (LRU) Cache that stores the matched result from the regular expressions defined in values.",
                          "required": false,
                          "default": null
                        },
                        {
                          "name": "invert_match",
                          "type": "bool",
                          "doc": "Indicates that values or regular expressions must not match against attribute values.",
                          "required": false,
                          "default": "false"
                        }
                      ],
                      "blocks": []
                    },
                    {
                      "name": "rate_limiting",
                      "doc": "The policy will sample based on rate.",
                      "required": false,
                      "arguments": [
                        {
                          "name": "spans_per_second",
                          "type": "number",
                          "doc": "Sets the maximum number of spans that can be processed each second.",
                          "required": true,
                          "default": null
                        }
                      ],
                      "blocks": []
                    },
                    {
                      "name": "span_count",
                      "doc": "The policy will sample based on the minimum number of spans within a batch.",
                      "required": false,
                      "arguments": [
                        {
                          "name": "min_spans",
                          "type": "number",
                          "doc": "Minimum number of spans in a trace.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "max_spans",
                          "type": "number",
                          "doc": "Maximum number of spans in a trace.",
                          "required": false,
                          "default": "0"
                        }
                      ],
                      "blocks": []
                    },
                    {
                      "name": "boolean_attribute",
                      "doc": "The policy will sample based on a boolean attribute (resource and record).",
                      "required": false,
                      "arguments": [
                        {
                          "name": "key",
                          "type": "string",
                          "doc": "Attribute key to match against.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "value",
                          "type": "bool",
                          "doc": "The bool value (true or false) to use when matching against attribute values.",
                          "required": true,
                          "default": null
                        }
                      ],
                      "blocks": []
                    },
                    {
                      "name": "ottl_condition",
                      "doc": "The policy will sample based on a given boolean OTTL condition (span and span event).",
                      "required": false,
                      "arguments": [
                        {
                          "name": "error_mode",
                          "type": "string",
                          "doc": "Error handling if OTTL conditions fail to evaluate.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "span",
                          "type": "list(string)",
                          "doc": "OTTL conditions for spans.",
                          "required": false,
                          "default": "[]"
                        },
                        {
                          "name": "spanevent",
                          "type": "list(string)",
                          "doc": "OTTL conditions for span events.",
                          "required": false,
                          "default": "[]"
                        }
                      ],
                      "blocks": []
                    },
                    {
                      "name": "trace_state",
                      "doc": "The policy will sample based on TraceState value matches.",
                      "required": false,
                      "arguments": [
                        {
                          "name": "key",
                          "type": "string",
                          "doc": "Tag that the filter is matched against.",
                          "required": true,
                          "default": null
                        },
                        {
                          "name": "values",
                          "type": "list(string)",
                          "doc": "Set of values to use when matching against trace_state values.",
                          "required": true,
                          "default": null
                        }
                      ],
                      "blocks": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "output",
          "doc": "Configures where to send received telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "logs",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send logs to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.processor.transform": {
      "name": "otelcol.processor.transform",
      "doc": "`otelcol.processor.transform` accepts telemetry data from other `otelcol`\ncomponents and modifies it using the [OpenTelemetry Transformation Language (OTTL)][OTTL].\nOTTL statements consist of [OTTL functions][], which act on paths.\nA path is a reference to a telemetry data such as:\n* Resource attributes.\n* Instrumentation scope name.\n* Span attributes.",
      "arguments": [
        {
          "name": "error_mode",
          "type": "string",
          "doc": "How to react to errors if they occur while processing a statement.",
          "required": false,
          "default": "\"propagate\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "input",
          "type": "otelcol.Consumer",
          "doc": "A value that other components can use to send telemetry data to."
        }
      ],
      "blocks": [
        {
          "name": "trace_statements",
          "doc": "Statements which transform traces.",
          "required": false,
          "arguments": [
            {
              "name": "context",
              "type": "string",
              "doc": "OTTL Context to use when interpreting the associated statements.",
              "required": true,
              "default": null
            },
            {
              "name": "statements",
              "type": "list(string)",
              "doc": "A list of OTTL statements.",
              "required": true,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "metric_statements",
          "doc": "Statements which transform metrics.",
          "required": false,
          "arguments": [
            {
              "name": "context",
              "type": "string",
              "doc": "OTTL Context to use when interpreting the associated statements.",
              "required": true,
              "default": null
            },
            {
              "name": "statements",
              "type": "list(string)",
              "doc": "A list of OTTL statements.",
              "required": true,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "log_statements",
          "doc": "Statements which transform logs.",
          "required": false,
          "arguments": [
            {
              "name": "context",
              "type": "string",
              "doc": "OTTL Context to use when interpreting the associated statements.",
              "required": true,
              "default": null
            },
            {
              "name": "statements",
              "type": "list(string)",
              "doc": "A list of OTTL statements.",
              "required": true,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "output",
          "doc": "Configures where to send received telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "logs",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send logs to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.receiver.datadog": {
      "name": "otelcol.receiver.datadog",
      "doc": "`otelcol.receiver.datadog` accepts Datadog metrics and traces over the network and forwards it to other `otelcol.*` components.",
      "arguments": [
        {
          "name": "endpoint",
          "type": "string",
          "doc": "host:port to listen for traffic on.",
          "required": false,
          "default": "\"localhost:8126\""
        },
        {
          "name": "max_request_body_size",
          "type": "string",
          "doc": "Maximum request body size the server will allow.",
          "required": false,
          "default": "20MiB"
        },
        {
          "name": "include_metadata",
          "type": "boolean",
          "doc": "Propagate incoming connection metadata to downstream consumers.",
          "required": false,
          "default": "false"
        },
        {
          "name": "read_timeout",
          "type": "duration",
          "doc": "Read timeout for requests of the HTTP server.",
          "required": false,
          "default": "\"60s\""
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "tls",
          "doc": "Configures TLS for the HTTP server.",
          "required": false,
          "arguments": [
            {
              "name": "ca_file",
              "type": "string",
              "doc": "Path to the CA file.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Path to the TLS certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "include_system_ca_certs_pool",
              "type": "boolean",
              "doc": "Whether to load the system certificate authorities pool alongside the certificate authority.",
              "required": false,
              "default": "false"
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Path to the TLS certificate key.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "max_version",
              "type": "string",
              "doc": "Maximum acceptable TLS version for connections.",
              "required": false,
              "default": "\"TLS 1.3\""
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version for connections.",
              "required": false,
              "default": "\"TLS 1.2\""
            },
            {
              "name": "cipher_suites",
              "type": "list(string)",
              "doc": "A list of TLS cipher suites that the TLS transport can use.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "reload_interval",
              "type": "duration",
              "doc": "The duration after which the certificate is reloaded.",
              "required": false,
              "default": "\"0s\""
            },
            {
              "name": "client_ca_file",
              "type": "string",
              "doc": "Path to the TLS cert to use by the server to verify a client certificate.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "cors",
          "doc": "Configures CORS for the HTTP server.",
          "required": false,
          "arguments": [
            {
              "name": "allowed_origins",
              "type": "list(string)",
              "doc": "Allowed values for the Origin header.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "allowed_headers",
              "type": "list(string)",
              "doc": "Accepted headers from CORS requests.",
              "required": false,
              "default": "[\"X-Requested-With\"]"
            },
            {
              "name": "max_age",
              "type": "number",
              "doc": "Configures the Access-Control-Max-Age response header.",
              "required": false,
              "default": "0"
            }
          ],
          "blocks": []
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        },
        {
          "name": "output",
          "doc": "Configures where to send received traces.",
          "required": true,
          "arguments": [
            {
              "name": "logs",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send logs to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.receiver.file_stats": {
      "name": "otelcol.receiver.file_stats",
      "doc": "`otelcol.receiver.file_stats` collects metrics from files and folders specified with a glob pattern.",
      "arguments": [
        {
          "name": "include",
          "type": "string",
          "doc": "Glob path for paths to collect stats from.",
          "required": true,
          "default": null
        },
        {
          "name": "collection_interval",
          "type": "duration",
          "doc": "How often to collect statistics.",
          "required": false,
          "default": "\"1m\""
        },
        {
          "name": "initial_delay",
          "type": "duration",
          "doc": "Initial time to wait before collecting statistics.",
          "required": false,
          "default": "\"1s\""
        },
        {
          "name": "timeout",
          "type": "duration",
          "doc": "Timeout for a collection; 0s means no timeout.",
          "required": false,
          "default": "\"0s\""
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "metrics",
          "doc": "Configures which metrics will be sent to downstream components.",
          "required": false,
          "arguments": [],
          "blocks": [
            {
              "name": "file.atime",
              "doc": "Configures the file.atime metric.",
              "required": false,
              "arguments": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "doc": "Whether to collect the file.atime metric.",
                  "required": false,
                  "default": "false"
                }
              ],
              "blocks": []
            },
            {
              "name": "file.count",
              "doc": "Configures the file.count metric.",
              "required": false,
              "arguments": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "doc": "Whether to collect the file.count metric.",
                  "required": false,
                  "default": "false"
                }
              ],
              "blocks": []
            },
            {
              "name": "file.ctime",
              "doc": "Configures the file.ctime metric.",
              "required": false,
              "arguments": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "doc": "Whether to collect the file.ctime metric.",
                  "required": false,
                  "default": "false"
                }
              ],
              "blocks": []
            },
            {
              "name": "file.mtime",
              "doc": "Configures the file.mtime metric.",
              "required": false,
              "arguments": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "doc": "Whether to collect the file.mtime metric.",
                  "required": false,
                  "default": "true"
                }
              ],
              "blocks": []
            },
            {
              "name": "file.size",
              "doc": "Configures the file.size metric.",
              "required": false,
              "arguments": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "doc": "Whether to collect the file.size metric.",
                  "required": false,
                  "default": "true"
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "resource_attributes",
          "doc": "Configures resource attributes for metrics sent to downstream components.",
          "required": false,
          "arguments": [],
          "blocks": [
            {
              "name": "file.name",
              "doc": "Configures the file.name resource attribute.",
              "required": false,
              "arguments": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "doc": "Whether to include the file.name resource attribute.",
                  "required": false,
                  "default": "true"
                }
              ],
              "blocks": [
                {
                  "name": "metrics_include",
                  "doc": "Metrics to include the file.name resource attribute in.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "strict",
                      "type": "string",
                      "doc": "The exact name of the metric to include.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "regexp",
                      "type": "string",
                      "doc": "A regular expression for the metrics to include.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                },
                {
                  "name": "metrics_exclude",
                  "doc": "Metrics to exclude the file.name resource attribute from.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "strict",
                      "type": "string",
                      "doc": "The exact name of the metric to exclude.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "regexp",
                      "type": "string",
                      "doc": "A regular expression for the metrics to exclude.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                }
              ]
            },
            {
              "name": "file.path",
              "doc": "Configures the file.path resource attribute.",
              "required": false,
              "arguments": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "doc": "Whether to include the file.path resource attribute.",
                  "required": false,
                  "default": "false"
                }
              ],
              "blocks": [
                {
                  "name": "metrics_include",
                  "doc": "Metrics to include the file.path resource attribute in.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "strict",
                      "type": "string",
                      "doc": "The exact name of the metric to include.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "regexp",
                      "type": "string",
                      "doc": "A regular expression for the metrics to include.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                },
                {
                  "name": "metrics_exclude",
                  "doc": "Metrics to exclude the file.path resource attribute from.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "strict",
                      "type": "string",
                      "doc": "The exact name of the metric to exclude.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "regexp",
                      "type": "string",
                      "doc": "A regular expression for the metrics to exclude.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                }
              ]
            }
          ]
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        },
        {
          "name": "output",
          "doc": "Configures where to send received telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "logs",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send logs to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.receiver.jaeger": {
      "name": "otelcol.receiver.jaeger",
      "doc": "`otelcol.receiver.jaeger` accepts Jaeger-formatted data over the network and forwards it to other `otelcol.*` components.",
      "arguments": [],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "protocols",
          "doc": "Configures the protocols the component can accept traffic over.",
          "required": true,
          "arguments": [],
          "blocks": [
            {
              "name": "grpc",
              "doc": "Configures a Jaeger gRPC server to receive traces.",
              "required": false,
              "arguments": [
                {
                  "name": "endpoint",
                  "type": "string",
                  "doc": "host:port to listen for traffic on.",
                  "required": false,
                  "default": "\"0.0.0.0:14250\""
                },
                {
                  "name": "transport",
                  "type": "string",
                  "doc": "Transport to use for the gRPC server.",
                  "required": false,
                  "default": "\"tcp\""
                },
                {
                  "name": "max_recv_msg_size",
                  "type": "string",
                  "doc": "Maximum size of messages the server will accept.",
                  "required": false,
                  "default": "\"4MiB\""
                },
                {
                  "name": "max_concurrent_streams",
                  "type": "number",
                  "doc": "Limit the number of concurrent streaming RPC calls.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "read_buffer_size",
                  "type": "string",
                  "doc": "Size of the read buffer the gRPC server will use for reading from clients.",
                  "required": false,
                  "default": "\"512KiB\""
                },
                {
                  "name": "write_buffer_size",
                  "type": "string",
                  "doc": "Size of the write buffer the gRPC server will use for writing to clients.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "include_metadata",
                  "type": "boolean",
                  "doc": "Propagate incoming connection metadata to downstream consumers.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": [
                {
                  "name": "tls",
                  "doc": "Configures TLS for the gRPC server.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "ca_file",
                      "type": "string",
                      "doc": "Path to the CA file.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "ca_pem",
                      "type": "string",
                      "doc": "CA PEM-encoded text to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_file",
                      "type": "string",
                      "doc": "Path to the TLS certificate.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_pem",
                      "type": "string",
                      "doc": "Certificate PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "include_system_ca_certs_pool",
                      "type": "boolean",
                      "doc": "Whether to load the system certificate authorities pool alongside the certificate authority.",
                      "required": false,
                      "default": "false"
                    },
                    {
                      "name": "key_file",
                      "type": "string",
                      "doc": "Path to the TLS certificate key.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_pem",
                      "type": "secret",
                      "doc": "Key PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "max_version",
                      "type": "string",
                      "doc": "Maximum acceptable TLS version for connections.",
                      "required": false,
                      "default": "\"TLS 1.3\""
                    },
                    {
                      "name": "min_version",
                      "type": "string",
                      "doc": "Minimum acceptable TLS version for connections.",
                      "required": false,
                      "default": "\"TLS 1.2\""
                    },
                    {
                      "name": "cipher_suites",
                      "type": "list(string)",
                      "doc": "A list of TLS cipher suites that the TLS transport can use.",
                      "required": false,
                      "default": "[]"
                    },
                    {
                      "name": "reload_interval",
                      "type": "duration",
                      "doc": "The duration after which the certificate is reloaded.",
                      "required": false,
                      "default": "\"0s\""
                    },
                    {
                      "name": "client_ca_file",
                      "type": "string",
                      "doc": "Path to the TLS cert to use by the server to verify a client certificate.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                },
                {
                  "name": "keepalive",
                  "doc": "Configures keepalive settings for the configured server.",
                  "required": false,
                  "arguments": [],
                  "blocks": [
                    {
                      "name": "server_parameters",
                      "doc": "Server parameters used to configure keepalive settings.",
                      "required": false,
                      "arguments": [
                        {
                          "name": "max_connection_idle",
                          "type": "duration",
                          "doc": "Maximum age for idle connections.",
                          "required": false,
                          "default": "\"infinity\""
                        },
                        {
                          "name": "max_connection_age",
                          "type": "duration",
                          "doc": "Maximum age for non-idle connections.",
                          "required": false,
                          "default": "\"infinity\""
                        },
                        {
                          "name": "max_connection_age_grace",
                          "type": "duration",
                          "doc": "Time to wait before forcibly closing connections.",
                          "required": false,
                          "default": "\"infinity\""
                        },
                        {
                          "name": "time",
                          "type": "duration",
                          "doc": "How often to ping inactive clients to check for liveness.",
                          "required": false,
                          "default": "\"2h\""
                        },
                        {
                          "name": "timeout",
                          "type": "duration",
                          "doc": "Time to wait before closing inactive clients that don't respond to liveness checks.",
                          "required": false,
                          "default": "\"20s\""
                        }
                      ],
                      "blocks": []
                    },
                    {
                      "name": "enforcement_policy",
                      "doc": "Enforcement policy for keepalive settings.",
                      "required": false,
                      "arguments": [
                        {
                          "name": "min_time",
                          "type": "duration",
                          "doc": "Minimum time clients should wait before sending a keepalive ping.",
                          "required": false,
                          "default": "\"5m\""
                        },
                        {
                          "name": "permit_without_stream",
                          "type": "boolean",
                          "doc": "Allow clients to send keepalive pings when there are no active streams.",
                          "required": false,
                          "default": "false"
                        }
                      ],
                      "blocks": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "thrift_http",
              "doc": "Configures a Thrift HTTP server to receive traces.",
              "required": false,
              "arguments": [
                {
                  "name": "endpoint",
                  "type": "string",
                  "doc": "host:port to listen for traffic on.",
                  "required": false,
                  "default": "\"0.0.0.0:14268\""
                },
                {
                  "name": "max_request_body_size",
                  "type": "string",
                  "doc": "Maximum request body size the server will allow.",
                  "required": false,
                  "default": "20MiB"
                },
                {
                  "name": "include_metadata",
                  "type": "boolean",
                  "doc": "Propagate incoming connection metadata to downstream consumers.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": [
                {
                  "name": "tls",
                  "doc": "Configures TLS for the Thrift HTTP server.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "ca_file",
                      "type": "string",
                      "doc": "Path to the CA file.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "ca_pem",
                      "type": "string",
                      "doc": "CA PEM-encoded text to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_file",
                      "type": "string",
                      "doc": "Path to the TLS certificate.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_pem",
                      "type": "string",
                      "doc": "Certificate PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "include_system_ca_certs_pool",
                      "type": "boolean",
                      "doc": "Whether to load the system certificate authorities pool alongside the certificate authority.",
                      "required": false,
                      "default": "false"
                    },
                    {
                      "name": "key_file",
                      "type": "string",
                      "doc": "Path to the TLS certificate key.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_pem",
                      "type": "secret",
                      "doc": "Key PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "max_version",
                      "type": "string",
                      "doc": "Maximum acceptable TLS version for connections.",
                      "required": false,
                      "default": "\"TLS 1.3\""
                    },
                    {
                      "name": "min_version",
                      "type": "string",
                      "doc": "Minimum acceptable TLS version for connections.",
                      "required": false,
                      "default": "\"TLS 1.2\""
                    },
                    {
                      "name": "cipher_suites",
                      "type": "list(string)",
                      "doc": "A list of TLS cipher suites that the TLS transport can use.",
                      "required": false,
                      "default": "[]"
                    },
                    {
                      "name": "reload_interval",
                      "type": "duration",
                      "doc": "The duration after which the certificate is reloaded.",
                      "required": false,
                      "default": "\"0s\""
                    },
                    {
                      "name": "client_ca_file",
                      "type": "string",
                      "doc": "Path to the TLS cert to use by the server to verify a client certificate.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                },
                {
                  "name": "cors",
                  "doc": "Configures CORS for the Thrift HTTP server.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "allowed_origins",
                      "type": "list(string)",
                      "doc": "Allowed values for the Origin header.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "allowed_headers",
                      "type": "list(string)",
                      "doc": "Accepted headers from CORS requests.",
                      "required": false,
                      "default": "[\"X-Requested-With\"]"
                    },
                    {
                      "name": "max_age",
                      "type": "number",
                      "doc": "Configures the Access-Control-Max-Age response header.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                }
              ]
            },
            {
              "name": "thrift_binary",
              "doc": "Configures a Thrift binary UDP server to receive traces.",
              "required": false,
              "arguments": [
                {
                  "name": "endpoint",
                  "type": "string",
                  "doc": "host:port to listen for traffic on.",
                  "required": false,
                  "default": "\"0.0.0.0:6832\""
                },
                {
                  "name": "queue_size",
                  "type": "number",
                  "doc": "Maximum number of UDP messages that can be queued at once.",
                  "required": false,
                  "default": "1000"
                },
                {
                  "name": "max_packet_size",
                  "type": "string",
                  "doc": "Maximum UDP message size.",
                  "required": false,
                  "default": "\"65KiB\""
                },
                {
                  "name": "workers",
                  "type": "number",
                  "doc": "Number of workers to concurrently read from the message queue.",
                  "required": false,
                  "default": "10"
                },
                {
                  "name": "socket_buffer_size",
                  "type": "string",
                  "doc": "Buffer to allocate for the UDP socket.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "thrift_compact",
              "doc": "Configures a Thrift compact UDP server to receive traces.",
              "required": false,
              "arguments": [
                {
                  "name": "endpoint",
                  "type": "string",
                  "doc": "host:port to listen for traffic on.",
                  "required": false,
                  "default": "\"0.0.0.0:6831\""
                },
                {
                  "name": "queue_size",
                  "type": "number",
                  "doc": "Maximum number of UDP messages that can be queued at once.",
                  "required": false,
                  "default": "1000"
                },
                {
                  "name": "max_packet_size",
                  "type": "string",
                  "doc": "Maximum UDP message size.",
                  "required": false,
                  "default": "\"65KiB\""
                },
                {
                  "name": "workers",
                  "type": "number",
                  "doc": "Number of workers to concurrently read from the message queue.",
                  "required": false,
                  "default": "10"
                },
                {
                  "name": "socket_buffer_size",
                  "type": "string",
                  "doc": "Buffer to allocate for the UDP socket.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        },
        {
          "name": "output",
          "doc": "Configures where to send received telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "logs",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send logs to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.receiver.kafka": {
      "name": "otelcol.receiver.kafka",
      "doc": "`otelcol.receiver.kafka` accepts telemetry data from a Kafka broker and\nforwards it to other `otelcol.*` components.",
      "arguments": [
        {
          "name": "brokers",
          "type": "array(string)",
          "doc": "Kafka brokers to connect to.",
          "required": true,
          "default": null
        },
        {
          "name": "protocol_version",
          "type": "string",
          "doc": "Kafka protocol version to use.",
          "required": true,
          "default": null
        },
        {
          "name": "topic",
          "type": "string",
          "doc": "Kafka topic to read from.",
          "required": false,
          "default": "_See below_"
        },
        {
          "name": "encoding",
          "type": "string",
          "doc": "Encoding of payload read from Kafka.",
          "required": false,
          "default": "\"otlp_proto\""
        },
        {
          "name": "group_id",
          "type": "string",
          "doc": "Consumer group to consume messages from.",
          "required": false,
          "default": "\"otel-collector\""
        },
        {
          "name": "client_id",
          "type": "string",
          "doc": "Consumer client ID to use.",
          "required": false,
          "default": "\"otel-collector\""
        },
        {
          "name": "initial_offset",
          "type": "string",
          "doc": "Initial offset to use if no offset was previously committed.",
          "required": false,
          "default": "\"latest\""
        },
        {
          "name": "resolve_canonical_bootstrap_servers_only",
          "type": "bool",
          "doc": "Whether to resolve then reverse-lookup broker IPs during startup.",
          "required": false,
          "default": "\"false\""
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "authentication",
          "doc": "Configures authentication for connecting to Kafka brokers.",
          "required": false,
          "arguments": [],
          "blocks": [
            {
              "name": "plaintext",
              "doc": "Authenticates against Kafka brokers with plaintext.",
              "required": false,
              "arguments": [
                {
                  "name": "username",
                  "type": "string",
                  "doc": "Username to use for plain text authentication.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "password",
                  "type": "secret",
                  "doc": "Password to use for plain text authentication.",
                  "required": true,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "sasl",
              "doc": "Authenticates against Kafka brokers with SASL.",
              "required": false,
              "arguments": [
                {
                  "name": "username",
                  "type": "string",
                  "doc": "Username to use for SASL authentication.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "password",
                  "type": "secret",
                  "doc": "Password to use for SASL authentication.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "mechanism",
                  "type": "string",
                  "doc": "SASL mechanism to use when authenticating.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "version",
                  "type": "number",
                  "doc": "Version of the SASL Protocol to use when authenticating.",
                  "required": false,
                  "default": "0"
                }
              ],
              "blocks": [
                {
                  "name": "aws_msk",
                  "doc": "Additional SASL parameters when using AWS_MSK_IAM.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "region",
                      "type": "string",
                      "doc": "AWS region the MSK cluster is based in.",
                      "required": true,
                      "default": null
                    },
                    {
                      "name": "broker_addr",
                      "type": "string",
                      "doc": "MSK address to connect to for authentication.",
                      "required": true,
                      "default": null
                    }
                  ],
                  "blocks": []
                }
              ]
            },
            {
              "name": "tls",
              "doc": "Configures TLS for connecting to the Kafka brokers.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "Path to the CA file.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Path to the TLS certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "boolean",
                  "doc": "Ignores insecure server TLS certificates.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "include_system_ca_certs_pool",
                  "type": "boolean",
                  "doc": "Whether to load the system certificate authorities pool alongside the certificate authority.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "insecure",
                  "type": "boolean",
                  "doc": "Disables TLS when connecting to the configured server.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Path to the TLS certificate key.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "max_version",
                  "type": "string",
                  "doc": "Maximum acceptable TLS version for connections.",
                  "required": false,
                  "default": "\"TLS 1.3\""
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version for connections.",
                  "required": false,
                  "default": "\"TLS 1.2\""
                },
                {
                  "name": "cipher_suites",
                  "type": "list(string)",
                  "doc": "A list of TLS cipher suites that the TLS transport can use.",
                  "required": false,
                  "default": "[]"
                },
                {
                  "name": "reload_interval",
                  "type": "duration",
                  "doc": "The duration after which the certificate is reloaded.",
                  "required": false,
                  "default": "\"0s\""
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "Verifies the hostname of server certificates when set.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "kerberos",
              "doc": "Authenticates against Kafka brokers with Kerberos.",
              "required": false,
              "arguments": [
                {
                  "name": "service_name",
                  "type": "string",
                  "doc": "Kerberos service name.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "realm",
                  "type": "string",
                  "doc": "Kerberos realm.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "use_keytab",
                  "type": "string",
                  "doc": "Enables using keytab instead of password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "username",
                  "type": "string",
                  "doc": "Kerberos username to authenticate as.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "password",
                  "type": "secret",
                  "doc": "Kerberos password to authenticate with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "config_file",
                  "type": "string",
                  "doc": "Path to Kerberos location (for example, /etc/krb5.conf).",
                  "required": false,
                  "default": null
                },
                {
                  "name": "keytab_file",
                  "type": "string",
                  "doc": "Path to keytab file (for example, /etc/security/kafka.keytab).",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "metadata",
          "doc": "Configures how to retrieve metadata from Kafka brokers.",
          "required": false,
          "arguments": [
            {
              "name": "include_all_topics",
              "type": "bool",
              "doc": "When true, maintains metadata for all topics.",
              "required": false,
              "default": "true"
            }
          ],
          "blocks": [
            {
              "name": "retry",
              "doc": "Configures how to retry metadata retrieval.",
              "required": false,
              "arguments": [
                {
                  "name": "max_retries",
                  "type": "number",
                  "doc": "How many times to reattempt retrieving metadata.",
                  "required": false,
                  "default": "3"
                },
                {
                  "name": "backoff",
                  "type": "duration",
                  "doc": "Time to wait between retries.",
                  "required": false,
                  "default": "\"250ms\""
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "autocommit",
          "doc": "Configures how to automatically commit updated topic offsets to back to the Kafka brokers.",
          "required": false,
          "arguments": [
            {
              "name": "enable",
              "type": "bool",
              "doc": "Enable autocommitting updated topic offsets.",
              "required": false,
              "default": "true"
            },
            {
              "name": "interval",
              "type": "duration",
              "doc": "How frequently to autocommit.",
              "required": false,
              "default": "\"1s\""
            }
          ],
          "blocks": []
        },
        {
          "name": "message_marking",
          "doc": "Configures when Kafka messages are marked as read.",
          "required": false,
          "arguments": [
            {
              "name": "after_execution",
              "type": "bool",
              "doc": "Mark messages after forwarding telemetry data to other components.",
              "required": false,
              "default": "false"
            },
            {
              "name": "include_unsuccessful",
              "type": "bool",
              "doc": "Whether failed forwards should be marked as read.",
              "required": false,
              "default": "false"
            }
          ],
          "blocks": []
        },
        {
          "name": "header_extraction",
          "doc": "Extract headers from Kafka records.",
          "required": false,
          "arguments": [
            {
              "name": "extract_headers",
              "type": "bool",
              "doc": "Enables attaching header fields to resource attributes.",
              "required": false,
              "default": "false"
            },
            {
              "name": "headers",
              "type": "list(string)",
              "doc": "A list of headers to extract from the Kafka record.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics which this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        },
        {
          "name": "output",
          "doc": "Configures where to send received telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "logs",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send logs to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.receiver.loki": {
      "name": "otelcol.receiver.loki",
      "doc": "`otelcol.receiver.loki` receives Loki log entries, converts them to the\nOpenTelemetry logs format, and forwards them to other `otelcol.*` components.",
      "arguments": [],
      "hasLabel": true,
      "exports": [
        {
          "name": "receiver",
          "type": "LogsReceiver",
          "doc": "A value that other components can use to send Loki logs to."
        }
      ],
      "blocks": [
        {
          "name": "output",
          "doc": "Configures where to send converted telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "logs",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send logs to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.receiver.opencensus": {
      "name": "otelcol.receiver.opencensus",
      "doc": "`otelcol.receiver.opencensus` accepts telemetry data via gRPC or HTTP\nusing the [OpenCensus](https://opencensus.io/) format and\nforwards it to other `otelcol.*` components.",
      "arguments": [
        {
          "name": "cors_allowed_origins",
          "type": "list(string)",
          "doc": "A list of allowed Cross-Origin Resource Sharing (CORS) origins.",
          "required": false,
          "default": null
        },
        {
          "name": "endpoint",
          "type": "string",
          "doc": "host:port to listen for traffic on.",
          "required": false,
          "default": "\"0.0.0.0:55678\""
        },
        {
          "name": "transport",
          "type": "string",
          "doc": "Transport to use for the gRPC server.",
          "required": false,
          "default": "\"tcp\""
        },
        {
          "name": "max_recv_msg_size",
          "type": "string",
          "doc": "Maximum size of messages the server will accept.",
          "required": false,
          "default": "\"4MiB\""
        },
        {
          "name": "max_concurrent_streams",
          "type": "number",
          "doc": "Limit the number of concurrent streaming RPC calls.",
          "required": false,
          "default": null
        },
        {
          "name": "read_buffer_size",
          "type": "string",
          "doc": "Size of the read buffer the gRPC server will use for reading from clients.",
          "required": false,
          "default": "\"512KiB\""
        },
        {
          "name": "write_buffer_size",
          "type": "string",
          "doc": "Size of the write buffer the gRPC server will use for writing to clients.",
          "required": false,
          "default": null
        },
        {
          "name": "include_metadata",
          "type": "boolean",
          "doc": "Propagate incoming connection metadata to downstream consumers.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "tls",
          "doc": "Configures TLS for the gRPC server.",
          "required": false,
          "arguments": [
            {
              "name": "ca_file",
              "type": "string",
              "doc": "Path to the CA file.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Path to the TLS certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "include_system_ca_certs_pool",
              "type": "boolean",
              "doc": "Whether to load the system certificate authorities pool alongside the certificate authority.",
              "required": false,
              "default": "false"
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Path to the TLS certificate key.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "max_version",
              "type": "string",
              "doc": "Maximum acceptable TLS version for connections.",
              "required": false,
              "default": "\"TLS 1.3\""
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version for connections.",
              "required": false,
              "default": "\"TLS 1.2\""
            },
            {
              "name": "cipher_suites",
              "type": "list(string)",
              "doc": "A list of TLS cipher suites that the TLS transport can use.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "reload_interval",
              "type": "duration",
              "doc": "The duration after which the certificate is reloaded.",
              "required": false,
              "default": "\"0s\""
            },
            {
              "name": "client_ca_file",
              "type": "string",
              "doc": "Path to the TLS cert to use by the server to verify a client certificate.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "keepalive",
          "doc": "Configures keepalive settings for the configured server.",
          "required": false,
          "arguments": [],
          "blocks": [
            {
              "name": "server_parameters",
              "doc": "Server parameters used to configure keepalive settings.",
              "required": false,
              "arguments": [
                {
                  "name": "max_connection_idle",
                  "type": "duration",
                  "doc": "Maximum age for idle connections.",
                  "required": false,
                  "default": "\"infinity\""
                },
                {
                  "name": "max_connection_age",
                  "type": "duration",
                  "doc": "Maximum age for non-idle connections.",
                  "required": false,
                  "default": "\"infinity\""
                },
                {
                  "name": "max_connection_age_grace",
                  "type": "duration",
                  "doc": "Time to wait before forcibly closing connections.",
                  "required": false,
                  "default": "\"infinity\""
                },
                {
                  "name": "time",
                  "type": "duration",
                  "doc": "How often to ping inactive clients to check for liveness.",
                  "required": false,
                  "default": "\"2h\""
                },
                {
                  "name": "timeout",
                  "type": "duration",
                  "doc": "Time to wait before closing inactive clients that do not respond to liveness checks.",
                  "required": false,
                  "default": "\"20s\""
                }
              ],
              "blocks": []
            },
            {
              "name": "enforcement_policy",
              "doc": "Enforcement policy for keepalive settings.",
              "required": false,
              "arguments": [
                {
                  "name": "min_time",
                  "type": "duration",
                  "doc": "Minimum time clients should wait before sending a keepalive ping.",
                  "required": false,
                  "default": "\"5m\""
                },
                {
                  "name": "permit_without_stream",
                  "type": "boolean",
                  "doc": "Allow clients to send keepalive pings when there are no active streams.",
                  "required": false,
                  "default": "false"
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        },
        {
          "name": "output",
          "doc": "Configures where to send received telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "logs",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send logs to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.receiver.otlp": {
      "name": "otelcol.receiver.otlp",
      "doc": "`otelcol.receiver.otlp` accepts OTLP-formatted data over the network and\nforwards it to other `otelcol.*` components.",
      "arguments": [],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "grpc",
          "doc": "Configures the gRPC server to receive telemetry data.",
          "required": false,
          "arguments": [
            {
              "name": "endpoint",
              "type": "string",
              "doc": "host:port to listen for traffic on.",
              "required": false,
              "default": "\"0.0.0.0:4317\""
            },
            {
              "name": "transport",
              "type": "string",
              "doc": "Transport to use for the gRPC server.",
              "required": false,
              "default": "\"tcp\""
            },
            {
              "name": "max_recv_msg_size",
              "type": "string",
              "doc": "Maximum size of messages the server will accept.",
              "required": false,
              "default": "\"4MiB\""
            },
            {
              "name": "max_concurrent_streams",
              "type": "number",
              "doc": "Limit the number of concurrent streaming RPC calls.",
              "required": false,
              "default": null
            },
            {
              "name": "read_buffer_size",
              "type": "string",
              "doc": "Size of the read buffer the gRPC server will use for reading from clients.",
              "required": false,
              "default": "\"512KiB\""
            },
            {
              "name": "write_buffer_size",
              "type": "string",
              "doc": "Size of the write buffer the gRPC server will use for writing to clients.",
              "required": false,
              "default": null
            },
            {
              "name": "include_metadata",
              "type": "boolean",
              "doc": "Propagate incoming connection metadata to downstream consumers.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls",
              "doc": "Configures TLS for the gRPC server.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "Path to the CA file.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Path to the TLS certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "include_system_ca_certs_pool",
                  "type": "boolean",
                  "doc": "Whether to load the system certificate authorities pool alongside the certificate authority.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Path to the TLS certificate key.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "max_version",
                  "type": "string",
                  "doc": "Maximum acceptable TLS version for connections.",
                  "required": false,
                  "default": "\"TLS 1.3\""
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version for connections.",
                  "required": false,
                  "default": "\"TLS 1.2\""
                },
                {
                  "name": "cipher_suites",
                  "type": "list(string)",
                  "doc": "A list of TLS cipher suites that the TLS transport can use.",
                  "required": false,
                  "default": "[]"
                },
                {
                  "name": "reload_interval",
                  "type": "duration",
                  "doc": "The duration after which the certificate is reloaded.",
                  "required": false,
                  "default": "\"0s\""
                },
                {
                  "name": "client_ca_file",
                  "type": "string",
                  "doc": "Path to the TLS cert to use by the server to verify a client certificate.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "keepalive",
              "doc": "Configures keepalive settings for the configured server.",
              "required": false,
              "arguments": [],
              "blocks": [
                {
                  "name": "server_parameters",
                  "doc": "Server parameters used to configure keepalive settings.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "max_connection_idle",
                      "type": "duration",
                      "doc": "Maximum age for idle connections.",
                      "required": false,
                      "default": "\"infinity\""
                    },
                    {
                      "name": "max_connection_age",
                      "type": "duration",
                      "doc": "Maximum age for non-idle connections.",
                      "required": false,
                      "default": "\"infinity\""
                    },
                    {
                      "name": "max_connection_age_grace",
                      "type": "duration",
                      "doc": "Time to wait before forcibly closing connections.",
                      "required": false,
                      "default": "\"infinity\""
                    },
                    {
                      "name": "time",
                      "type": "duration",
                      "doc": "How often to ping inactive clients to check for liveness.",
                      "required": false,
                      "default": "\"2h\""
                    },
                    {
                      "name": "timeout",
                      "type": "duration",
                      "doc": "Time to wait before closing inactive clients that do not respond to liveness checks.",
                      "required": false,
                      "default": "\"20s\""
                    }
                  ],
                  "blocks": []
                },
                {
                  "name": "enforcement_policy",
                  "doc": "Enforcement policy for keepalive settings.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "min_time",
                      "type": "duration",
                      "doc": "Minimum time clients should wait before sending a keepalive ping.",
                      "required": false,
                      "default": "\"5m\""
                    },
                    {
                      "name": "permit_without_stream",
                      "type": "boolean",
                      "doc": "Allow clients to send keepalive pings when there are no active streams.",
                      "required": false,
                      "default": "false"
                    }
                  ],
                  "blocks": []
                }
              ]
            }
          ]
        },
        {
          "name": "http",
          "doc": "Configures the HTTP server to receive telemetry data.",
          "required": false,
          "arguments": [
            {
              "name": "endpoint",
              "type": "string",
              "doc": "host:port to listen for traffic on.",
              "required": false,
              "default": "\"0.0.0.0:4318\""
            },
            {
              "name": "max_request_body_size",
              "type": "string",
              "doc": "Maximum request body size the server will allow.",
              "required": false,
              "default": "20MiB"
            },
            {
              "name": "include_metadata",
              "type": "boolean",
              "doc": "Propagate incoming connection metadata to downstream consumers.",
              "required": false,
              "default": null
            },
            {
              "name": "traces_url_path",
              "type": "string",
              "doc": "The URL path to receive traces on.",
              "required": false,
              "default": "\"/v1/traces\""
            },
            {
              "name": "metrics_url_path",
              "type": "string",
              "doc": "The URL path to receive metrics on.",
              "required": false,
              "default": "\"/v1/metrics\""
            },
            {
              "name": "logs_url_path",
              "type": "string",
              "doc": "The URL path to receive logs on.",
              "required": false,
              "default": "\"/v1/logs\""
            }
          ],
          "blocks": [
            {
              "name": "tls",
              "doc": "Configures TLS for the HTTP server.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "Path to the CA file.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Path to the TLS certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "include_system_ca_certs_pool",
                  "type": "boolean",
                  "doc": "Whether to load the system certificate authorities pool alongside the certificate authority.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Path to the TLS certificate key.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "max_version",
                  "type": "string",
                  "doc": "Maximum acceptable TLS version for connections.",
                  "required": false,
                  "default": "\"TLS 1.3\""
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version for connections.",
                  "required": false,
                  "default": "\"TLS 1.2\""
                },
                {
                  "name": "cipher_suites",
                  "type": "list(string)",
                  "doc": "A list of TLS cipher suites that the TLS transport can use.",
                  "required": false,
                  "default": "[]"
                },
                {
                  "name": "reload_interval",
                  "type": "duration",
                  "doc": "The duration after which the certificate is reloaded.",
                  "required": false,
                  "default": "\"0s\""
                },
                {
                  "name": "client_ca_file",
                  "type": "string",
                  "doc": "Path to the TLS cert to use by the server to verify a client certificate.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "cors",
              "doc": "Configures CORS for the HTTP server.",
              "required": false,
              "arguments": [
                {
                  "name": "allowed_origins",
                  "type": "list(string)",
                  "doc": "Allowed values for the Origin header.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "allowed_headers",
                  "type": "list(string)",
                  "doc": "Accepted headers from CORS requests.",
                  "required": false,
                  "default": "[\"X-Requested-With\"]"
                },
                {
                  "name": "max_age",
                  "type": "number",
                  "doc": "Configures the Access-Control-Max-Age response header.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        },
        {
          "name": "output",
          "doc": "Configures where to send received telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "logs",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send logs to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.receiver.prometheus": {
      "name": "otelcol.receiver.prometheus",
      "doc": "`otelcol.receiver.prometheus` receives Prometheus metrics, converts them to the\nOpenTelemetry metrics format, and forwards them to other `otelcol.*`\ncomponents.",
      "arguments": [],
      "hasLabel": true,
      "exports": [
        {
          "name": "receiver",
          "type": "MetricsReceiver",
          "doc": "A value that other components can use to send Prometheus metrics to."
        }
      ],
      "blocks": [
        {
          "name": "output",
          "doc": "Configures where to send received telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "logs",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send logs to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.receiver.vcenter": {
      "name": "otelcol.receiver.vcenter",
      "doc": "`otelcol.receiver.vcenter` accepts metrics from a\nvCenter or ESXi host running VMware vSphere APIs and\nforwards it to other `otelcol.*` components.",
      "arguments": [
        {
          "name": "endpoint",
          "type": "string",
          "doc": "Endpoint to a vCenter Server or ESXi host which has the SDK path enabled.",
          "required": true,
          "default": null
        },
        {
          "name": "username",
          "type": "string",
          "doc": "Username to use for authentication.",
          "required": true,
          "default": null
        },
        {
          "name": "password",
          "type": "string",
          "doc": "Password to use for authentication.",
          "required": true,
          "default": null
        },
        {
          "name": "collection_interval",
          "type": "duration",
          "doc": "Defines how often to collect metrics.",
          "required": false,
          "default": "\"1m\""
        },
        {
          "name": "initial_delay",
          "type": "duration",
          "doc": "Defines how long this receiver waits before starting.",
          "required": false,
          "default": "\"1s\""
        },
        {
          "name": "timeout",
          "type": "duration",
          "doc": "Defines the timeout for the underlying HTTP client.",
          "required": false,
          "default": "\"0s\""
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "tls",
          "doc": "Configures TLS for the HTTP client.",
          "required": false,
          "arguments": [
            {
              "name": "ca_file",
              "type": "string",
              "doc": "Path to the CA file.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Path to the TLS certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "boolean",
              "doc": "Ignores insecure server TLS certificates.",
              "required": false,
              "default": null
            },
            {
              "name": "include_system_ca_certs_pool",
              "type": "boolean",
              "doc": "Whether to load the system certificate authorities pool alongside the certificate authority.",
              "required": false,
              "default": "false"
            },
            {
              "name": "insecure",
              "type": "boolean",
              "doc": "Disables TLS when connecting to the configured server.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Path to the TLS certificate key.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "max_version",
              "type": "string",
              "doc": "Maximum acceptable TLS version for connections.",
              "required": false,
              "default": "\"TLS 1.3\""
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version for connections.",
              "required": false,
              "default": "\"TLS 1.2\""
            },
            {
              "name": "cipher_suites",
              "type": "list(string)",
              "doc": "A list of TLS cipher suites that the TLS transport can use.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "reload_interval",
              "type": "duration",
              "doc": "The duration after which the certificate is reloaded.",
              "required": false,
              "default": "\"0s\""
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "Verifies the hostname of server certificates when set.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "metrics",
          "doc": "Configures which metrics will be sent to downstream components.",
          "required": false,
          "arguments": [
            {
              "name": "vcenter.cluster.cpu.effective",
              "type": "[metric][]",
              "doc": "Enables the vcenter.cluster.cpu.effective metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.cluster.cpu.usage",
              "type": "[metric][]",
              "doc": "Enables the vcenter.cluster.cpu.usage metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.cluster.host.count",
              "type": "[metric][]",
              "doc": "Enables the vcenter.cluster.host.count metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.cluster.memory.effective",
              "type": "[metric][]",
              "doc": "Enables the vcenter.cluster.memory.effective metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.cluster.memory.limit",
              "type": "[metric][]",
              "doc": "Enables the vcenter.cluster.memory.limit metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.cluster.vm.count",
              "type": "[metric][]",
              "doc": "Enables the vcenter.cluster.vm.count metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.cluster.vm_template.count",
              "type": "[metric][]",
              "doc": "Enables the vcenter.cluster.vm_template.count metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.datastore.disk.usage",
              "type": "[metric][]",
              "doc": "Enables the vcenter.datastore.disk.usage metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.datastore.disk.utilization",
              "type": "[metric][]",
              "doc": "Enables the vcenter.datastore.disk.utilization metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.host.cpu.usage",
              "type": "[metric][]",
              "doc": "Enables the vcenter.host.cpu.usage metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.host.cpu.utilization",
              "type": "[metric][]",
              "doc": "Enables the vcenter.host.cpu.utilization metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.host.disk.latency.avg",
              "type": "[metric][]",
              "doc": "Enables the vcenter.host.disk.latency.avg metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.host.disk.latency.max",
              "type": "[metric][]",
              "doc": "Enables the vcenter.host.disk.latency.max metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.host.disk.throughput",
              "type": "[metric][]",
              "doc": "Enables the vcenter.host.disk.throughput metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.host.memory.usage",
              "type": "[metric][]",
              "doc": "Enables the vcenter.host.memory.usage metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.host.memory.utilization",
              "type": "[metric][]",
              "doc": "Enables the vcenter.host.memory.utilization metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.host.network.packet.rate",
              "type": "[metric][]",
              "doc": "Enables the vcenter.host.network.packet.rate metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.host.network.packet.error.rate",
              "type": "[metric][]",
              "doc": "Enables the vcenter.host.network.packet.error.rate metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.host.network.throughput",
              "type": "[metric][]",
              "doc": "Enables the vcenter.host.network.throughput metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.host.network.usage",
              "type": "[metric][]",
              "doc": "Enables the vcenter.host.network.usage metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.resource_pool.cpu.shares",
              "type": "[metric][]",
              "doc": "Enables the vcenter.resource_pool.cpu.shares metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.resource_pool.cpu.usage",
              "type": "[metric][]",
              "doc": "Enables the vcenter.resource_pool.cpu.usage metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.resource_pool.memory.shares",
              "type": "[metric][]",
              "doc": "Enables the vcenter.resource_pool.memory.shares metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.resource_pool.memory.usage",
              "type": "[metric][]",
              "doc": "Enables the vcenter.resource_pool.memory.usage metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.vm.cpu.usage",
              "type": "[metric][]",
              "doc": "Enables the vcenter.vm.cpu.usage metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.vm.cpu.utilization",
              "type": "[metric][]",
              "doc": "Enables the vcenter.vm.cpu.utilization metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.vm.disk.latency.avg",
              "type": "[metric][]",
              "doc": "Enables the vcenter.vm.disk.latency.avg metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.vm.disk.latency.max",
              "type": "[metric][]",
              "doc": "Enables the vcenter.vm.disk.latency.max metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.vm.disk.throughput",
              "type": "[metric][]",
              "doc": "Enables the vcenter.vm.disk.throughput metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.vm.disk.usage",
              "type": "[metric][]",
              "doc": "Enables the vcenter.vm.disk.usage metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.vm.disk.utilization",
              "type": "[metric][]",
              "doc": "Enables the vcenter.vm.disk.utilization metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.vm.memory.ballooned",
              "type": "[metric][]",
              "doc": "Enables the vcenter.vm.memory.ballooned metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.vm.memory.swapped",
              "type": "[metric][]",
              "doc": "Enables the vcenter.vm.memory.swapped metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.vm.memory.swapped_ssd",
              "type": "[metric][]",
              "doc": "Enables the vcenter.vm.memory.swapped_ssd metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.vm.memory.usage",
              "type": "[metric][]",
              "doc": "Enables the vcenter.vm.memory.usage metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.vm.memory.utilization",
              "type": "[metric][]",
              "doc": "Enables the vcenter.vm.memory.utilization metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.vm.network.packet.rate",
              "type": "[metric][]",
              "doc": "Enables the vcenter.vm.network.packet.rate metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.vm.network.packet.drop.rate",
              "type": "[metric][]",
              "doc": "Enables the vcenter.vm.network.packet.drop.rate metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.vm.network.throughput",
              "type": "[metric][]",
              "doc": "Enables the vcenter.vm.network.throughput metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.vm.network.usage",
              "type": "[metric][]",
              "doc": "Enables the vcenter.vm.network.usage metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "Name",
              "type": "Type",
              "doc": "Description",
              "required": false,
              "default": "Default"
            },
            {
              "name": "----",
              "type": "----",
              "doc": "-----------",
              "required": false,
              "default": "-------"
            },
            {
              "name": "enabled",
              "type": "boolean",
              "doc": "Whether to enable the metric.",
              "required": false,
              "default": "true"
            }
          ],
          "blocks": []
        },
        {
          "name": "resource_attributes",
          "doc": "Configures resource attributes for metrics sent to downstream components.",
          "required": false,
          "arguments": [
            {
              "name": "vcenter.datacenter.name",
              "type": "[resource_attribute][]",
              "doc": "Enables the vcenter.datacenter.name resource attribute.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.cluster.name",
              "type": "[resource_attribute][]",
              "doc": "Enables the vcenter.cluster.name resource attribute.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.datastore.name",
              "type": "[resource_attribute][]",
              "doc": "Enables the vcenter.cluster.resource_pool resource attribute.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.host.name",
              "type": "[resource_attribute][]",
              "doc": "Enables the vcenter.host.name resource attribute.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.resource_pool.inventory_path",
              "type": "[resource_attribute][]",
              "doc": "Enables the vcenter.resource_pool.inventory_path resource attribute.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.resource_pool.name",
              "type": "[resource_attribute][]",
              "doc": "Enables the vcenter.resource_pool.name resource attribute.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.virtual_app.inventory_path",
              "type": "[resource_attribute][]",
              "doc": "Enables the vcenter.virtual_app.inventory_path resource attribute.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.virtual_app.name",
              "type": "[resource_attribute][]",
              "doc": "Enables the vcenter.virtual_app.name resource attribute.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.vm.id",
              "type": "[resource_attribute][]",
              "doc": "Enables the vcenter.vm.id resource attribute.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.vm.name",
              "type": "[resource_attribute][]",
              "doc": "Enables the vcenter.vm.name resource attribute.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.vm_template.id",
              "type": "[resource_attribute][]",
              "doc": "Enables the vcenter.vm_template.id resource attribute.",
              "required": false,
              "default": "true"
            },
            {
              "name": "vcenter.vm_template.name",
              "type": "[resource_attribute][]",
              "doc": "Enables the vcenter.vm_template.name resource attribute.",
              "required": false,
              "default": "true"
            },
            {
              "name": "Name",
              "type": "Type",
              "doc": "Description",
              "required": false,
              "default": "Default"
            },
            {
              "name": "----",
              "type": "----",
              "doc": "-----------",
              "required": false,
              "default": "-------"
            },
            {
              "name": "enabled",
              "type": "boolean",
              "doc": "Whether to enable the resource attribute.",
              "required": false,
              "default": "true"
            }
          ],
          "blocks": []
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        },
        {
          "name": "output",
          "doc": "Configures where to send received telemetry data.",
          "required": true,
          "arguments": [
            {
              "name": "logs",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send logs to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        }
      ]
    },
    "otelcol.receiver.zipkin": {
      "name": "otelcol.receiver.zipkin",
      "doc": "`otelcol.receiver.zipkin` accepts Zipkin-formatted traces over the network and\nforwards it to other `otelcol.*` components.",
      "arguments": [
        {
          "name": "parse_string_tags",
          "type": "bool",
          "doc": "Parse string tags and binary annotations into non-string types.",
          "required": false,
          "default": "false"
        },
        {
          "name": "endpoint",
          "type": "string",
          "doc": "host:port to listen for traffic on.",
          "required": false,
          "default": "\"0.0.0.0:9411\""
        },
        {
          "name": "max_request_body_size",
          "type": "string",
          "doc": "Maximum request body size the server will allow.",
          "required": false,
          "default": "20MiB"
        },
        {
          "name": "include_metadata",
          "type": "boolean",
          "doc": "Propagate incoming connection metadata to downstream consumers.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "tls",
          "doc": "Configures TLS for the HTTP server.",
          "required": false,
          "arguments": [
            {
              "name": "ca_file",
              "type": "string",
              "doc": "Path to the CA file.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Path to the TLS certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "include_system_ca_certs_pool",
              "type": "boolean",
              "doc": "Whether to load the system certificate authorities pool alongside the certificate authority.",
              "required": false,
              "default": "false"
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Path to the TLS certificate key.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "max_version",
              "type": "string",
              "doc": "Maximum acceptable TLS version for connections.",
              "required": false,
              "default": "\"TLS 1.3\""
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version for connections.",
              "required": false,
              "default": "\"TLS 1.2\""
            },
            {
              "name": "cipher_suites",
              "type": "list(string)",
              "doc": "A list of TLS cipher suites that the TLS transport can use.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "reload_interval",
              "type": "duration",
              "doc": "The duration after which the certificate is reloaded.",
              "required": false,
              "default": "\"0s\""
            },
            {
              "name": "client_ca_file",
              "type": "string",
              "doc": "Path to the TLS cert to use by the server to verify a client certificate.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "cors",
          "doc": "Configures CORS for the HTTP server.",
          "required": false,
          "arguments": [
            {
              "name": "allowed_origins",
              "type": "list(string)",
              "doc": "Allowed values for the Origin header.",
              "required": false,
              "default": null
            },
            {
              "name": "allowed_headers",
              "type": "list(string)",
              "doc": "Accepted headers from CORS requests.",
              "required": false,
              "default": "[\"X-Requested-With\"]"
            },
            {
              "name": "max_age",
              "type": "number",
              "doc": "Configures the Access-Control-Max-Age response header.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "debug_metrics",
          "doc": "Configures the metrics that this component generates to monitor its state.",
          "required": false,
          "arguments": [
            {
              "name": "disable_high_cardinality_metrics",
              "type": "boolean",
              "doc": "Whether to disable certain high cardinality metrics.",
              "required": false,
              "default": "true"
            },
            {
              "name": "level",
              "type": "string",
              "doc": "Controls the level of detail for metrics emitted by the wrapped collector.",
              "required": false,
              "default": "\"detailed\""
            }
          ],
          "blocks": []
        },
        {
          "name": "output",
          "doc": "Configures where to send received traces.",
          "required": true,
          "arguments": [
            {
              "name": "logs",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send logs to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "metrics",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send metrics to.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "traces",
              "type": "list(otelcol.Consumer)",
              "doc": "List of consumers to send traces to.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        }
      ]
    }
  },
  "prometheus": {
    "prometheus.exporter.apache": {
      "name": "prometheus.exporter.apache",
      "doc": "`prometheus.exporter.apache` component embeds\n[apache_exporter](https://github.com/Lusitaniae/apache_exporter) for collecting mod_status statistics from an apache server.",
      "arguments": [
        {
          "name": "scrape_uri",
          "type": "string",
          "doc": "URI to Apache stub status page.",
          "required": false,
          "default": "http://localhost/server-status?auto"
        },
        {
          "name": "host_override",
          "type": "string",
          "doc": "Override for HTTP Host header.",
          "required": false,
          "default": null
        },
        {
          "name": "insecure",
          "type": "bool",
          "doc": "Ignore server certificate if using https.",
          "required": false,
          "default": "false"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": []
    },
    "prometheus.exporter.azure": {
      "name": "prometheus.exporter.azure",
      "doc": "`prometheus.exporter.azure` component embeds [`azure-metrics-exporter`](https://github.com/webdevops/azure-metrics-exporter) to collect metrics from [Azure Monitor](https://azure.microsoft.com/en-us/products/monitor).",
      "arguments": [
        {
          "name": "subscriptions",
          "type": "list(string)",
          "doc": "List of subscriptions to scrape metrics from.",
          "required": true,
          "default": null
        },
        {
          "name": "resource_type",
          "type": "string",
          "doc": "The Azure Resource Type to scrape metrics for.",
          "required": true,
          "default": null
        },
        {
          "name": "metrics",
          "type": "list(string)",
          "doc": "The metrics to scrape from resources.",
          "required": true,
          "default": null
        },
        {
          "name": "resource_graph_query_filter",
          "type": "string",
          "doc": "The [Kusto query][] filter to apply when searching for resources. Can't be used if regions is set.",
          "required": false,
          "default": null
        },
        {
          "name": "regions",
          "type": "list(string)",
          "doc": "The list of regions for gathering metrics and enables gathering metrics for all resources in the subscription. Can't be used if resource_graph_query_filter is set.",
          "required": false,
          "default": null
        },
        {
          "name": "metric_aggregations",
          "type": "list(string)",
          "doc": "Aggregations to apply for the metrics produced.",
          "required": false,
          "default": null
        },
        {
          "name": "timespan",
          "type": "string",
          "doc": "[ISO8601 Duration][] over which the metrics are being queried.",
          "required": false,
          "default": "\"PT1M\" (1 minute)"
        },
        {
          "name": "included_dimensions",
          "type": "list(string)",
          "doc": "List of dimensions to include on the final metrics.",
          "required": false,
          "default": null
        },
        {
          "name": "included_resource_tags",
          "type": "list(string)",
          "doc": "List of resource tags to include on the final metrics.",
          "required": false,
          "default": "[\"owner\"]"
        },
        {
          "name": "metric_namespace",
          "type": "string",
          "doc": "Namespace for resource_type which have multiple levels of metrics.",
          "required": false,
          "default": null
        },
        {
          "name": "azure_cloud_environment",
          "type": "string",
          "doc": "Name of the cloud environment to connect to.",
          "required": false,
          "default": "\"azurecloud\""
        },
        {
          "name": "metric_name_template",
          "type": "string",
          "doc": "Metric template used to expose the metrics.",
          "required": false,
          "default": "\"azure_{type}_{metric}_{aggregation}_{unit}\""
        },
        {
          "name": "metric_help_template",
          "type": "string",
          "doc": "Description of the metric.",
          "required": false,
          "default": "\"Azure metric {metric} for {type} with aggregation {aggregation} as {unit}\""
        },
        {
          "name": "validate_dimensions",
          "type": "bool",
          "doc": "Enable dimension validation in the azure sdk",
          "required": false,
          "default": "false"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": []
    },
    "prometheus.exporter.blackbox": {
      "name": "prometheus.exporter.blackbox",
      "doc": "`prometheus.exporter.blackbox` component embeds\n[`blackbox_exporter`](https://github.com/prometheus/blackbox_exporter). `blackbox_exporter` lets you collect blackbox metrics (probes) and expose them as Prometheus metrics.",
      "arguments": [
        {
          "name": "config_file",
          "type": "string",
          "doc": "blackbox_exporter configuration file path.",
          "required": false,
          "default": null
        },
        {
          "name": "config",
          "type": "string or secret",
          "doc": "blackbox_exporter configuration as inline string.",
          "required": false,
          "default": null
        },
        {
          "name": "probe_timeout_offset",
          "type": "duration",
          "doc": "Offset in seconds to subtract from timeout when probing targets.",
          "required": false,
          "default": "\"0.5s\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": [
        {
          "name": "target",
          "doc": "Configures a blackbox target.",
          "required": true,
          "arguments": [
            {
              "name": "name",
              "type": "string",
              "doc": "The name of the target to probe.",
              "required": true,
              "default": null
            },
            {
              "name": "address",
              "type": "string",
              "doc": "The address of the target to probe.",
              "required": true,
              "default": null
            },
            {
              "name": "module",
              "type": "string",
              "doc": "Blackbox module to use to probe.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "labels",
              "type": "map(string)",
              "doc": "Labels to add to the target.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "prometheus.exporter.cadvisor": {
      "name": "prometheus.exporter.cadvisor",
      "doc": "`prometheus.exporter.cadvisor` component exposes container metrics using\n[cAdvisor](https://github.com/google/cadvisor).",
      "arguments": [
        {
          "name": "store_container_labels",
          "type": "bool",
          "doc": "Whether to convert container labels and environment variables into labels on Prometheus metrics for each container.",
          "required": false,
          "default": "true"
        },
        {
          "name": "allowlisted_container_labels",
          "type": "list(string)",
          "doc": "Allowlist of container labels to convert to Prometheus labels.",
          "required": false,
          "default": "[]"
        },
        {
          "name": "env_metadata_allowlist",
          "type": "list(string)",
          "doc": "Allowlist of environment variable keys matched with a specified prefix that needs to be collected for containers.",
          "required": false,
          "default": "[]"
        },
        {
          "name": "raw_cgroup_prefix_allowlist",
          "type": "list(string)",
          "doc": "List of cgroup path prefixes that need to be collected, even when docker_only is specified.",
          "required": false,
          "default": "[]"
        },
        {
          "name": "perf_events_config",
          "type": "string",
          "doc": "Path to a JSON file containing the configuration of perf events to measure.",
          "required": false,
          "default": "\"\""
        },
        {
          "name": "resctrl_interval",
          "type": "duration",
          "doc": "Interval to update resctrl mon groups.",
          "required": false,
          "default": "0"
        },
        {
          "name": "disabled_metrics",
          "type": "list(string)",
          "doc": "List of metrics to be disabled which, if set, overrides the default disabled metrics.",
          "required": false,
          "default": "(see below)"
        },
        {
          "name": "enabled_metrics",
          "type": "list(string)",
          "doc": "List of metrics to be enabled which, if set, overrides disabled_metrics.",
          "required": false,
          "default": "[]"
        },
        {
          "name": "storage_duration",
          "type": "duration",
          "doc": "Length of time to keep data stored in memory.",
          "required": false,
          "default": "2m"
        },
        {
          "name": "containerd_host",
          "type": "string",
          "doc": "Containerd endpoint.",
          "required": false,
          "default": "/run/containerd/containerd.sock"
        },
        {
          "name": "containerd_namespace",
          "type": "string",
          "doc": "Containerd namespace.",
          "required": false,
          "default": "k8s.io"
        },
        {
          "name": "docker_host",
          "type": "string",
          "doc": "Docker endpoint.",
          "required": false,
          "default": "unix:///var/run/docker.sock"
        },
        {
          "name": "use_docker_tls",
          "type": "bool",
          "doc": "Use TLS to connect to docker.",
          "required": false,
          "default": "false"
        },
        {
          "name": "docker_tls_cert",
          "type": "string",
          "doc": "Path to client certificate for TLS connection to docker.",
          "required": false,
          "default": "cert.pem"
        },
        {
          "name": "docker_tls_key",
          "type": "string",
          "doc": "Path to private key for TLS connection to docker.",
          "required": false,
          "default": "key.pem"
        },
        {
          "name": "docker_tls_ca",
          "type": "string",
          "doc": "Path to a trusted CA for TLS connection to docker.",
          "required": false,
          "default": "ca.pem"
        },
        {
          "name": "docker_only",
          "type": "bool",
          "doc": "Only report docker containers in addition to root stats.",
          "required": false,
          "default": "false"
        },
        {
          "name": "disable_root_cgroup_stats",
          "type": "bool",
          "doc": "Disable collecting root Cgroup stats.",
          "required": false,
          "default": "false"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": []
    },
    "prometheus.exporter.cloudwatch": {
      "name": "prometheus.exporter.cloudwatch",
      "doc": "`prometheus.exporter.cloudwatch` component\nembeds [`yet-another-cloudwatch-exporter`](https://github.com/nerdswords/yet-another-cloudwatch-exporter), letting you\ncollect [CloudWatch metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html),\ntranslate them to a prometheus-compatible format and remote write them.",
      "arguments": [
        {
          "name": "sts_region",
          "type": "string",
          "doc": "AWS region to use when calling [STS][] for retrieving account information.",
          "required": true,
          "default": null
        },
        {
          "name": "fips_disabled",
          "type": "bool",
          "doc": "Disable use of FIPS endpoints. Set 'true' when running outside of USA regions.",
          "required": false,
          "default": "true"
        },
        {
          "name": "debug",
          "type": "bool",
          "doc": "Enable debug logging on CloudWatch exporter internals.",
          "required": false,
          "default": "false"
        },
        {
          "name": "discovery_exported_tags",
          "type": "map(list(string))",
          "doc": "List of tags (value) per service (key) to export in all metrics. For example, defining the [\"name\", \"type\"] under \"AWS/EC2\" will export the name and type tags and its values as labels in all metrics. Affects all discovery jobs.",
          "required": false,
          "default": "{}"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": [
        {
          "name": "discovery",
          "doc": "Configures a discovery job. Multiple jobs can be configured.",
          "required": false,
          "arguments": [
            {
              "name": "regions",
              "type": "list(string)",
              "doc": "List of AWS regions.",
              "required": true,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Cloudwatch service alias (\"alb\", \"ec2\", etc) or namespace name (\"AWS/EC2\", \"AWS/S3\", etc). Refer to [supported-services][] for a complete list.",
              "required": true,
              "default": null
            },
            {
              "name": "custom_tags",
              "type": "map(string)",
              "doc": "Custom tags to be added as a list of key / value pairs. When exported to Prometheus format, the label name follows the following format: custom_tag_{key}.",
              "required": false,
              "default": "{}"
            },
            {
              "name": "search_tags",
              "type": "map(string)",
              "doc": "List of key / value pairs to use for tag filtering (all must match). Value can be a regex.",
              "required": false,
              "default": "{}"
            },
            {
              "name": "dimension_name_requirements",
              "type": "list(string)",
              "doc": "List of metric dimensions to query. Before querying metric values, the total list of metrics will be filtered to only those that contain exactly this list of dimensions. An empty or undefined list results in all dimension combinations being included.",
              "required": false,
              "default": "{}"
            },
            {
              "name": "nil_to_zero",
              "type": "bool",
              "doc": "When true, NaN metric values are converted to 0. Individual metrics can override this value in the [metric][] block.",
              "required": false,
              "default": "true"
            }
          ],
          "blocks": [
            {
              "name": "role",
              "doc": "Configures the IAM roles the job should assume to scrape metrics. Defaults to the role configured in the environment {{< param \"PRODUCT_NAME\" >}} runs on.",
              "required": false,
              "arguments": [
                {
                  "name": "role_arn",
                  "type": "string",
                  "doc": "AWS IAM Role ARN the exporter should assume to perform AWS API calls.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "external_id",
                  "type": "string",
                  "doc": "External ID used when calling STS AssumeRole API. Refer to the [IAM User Guide][details] for more information.",
                  "required": false,
                  "default": "\"\""
                }
              ],
              "blocks": []
            },
            {
              "name": "metric",
              "doc": "Configures the list of metrics the job should scrape. Multiple metrics can be defined inside one job.",
              "required": true,
              "arguments": [
                {
                  "name": "name",
                  "type": "string",
                  "doc": "Metric name.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "statistics",
                  "type": "list(string)",
                  "doc": "List of statistics to scrape. For example, \"Minimum\", \"Maximum\", etc.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "period",
                  "type": "duration",
                  "doc": "Refer to the [period][] section below.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "length",
                  "type": "duration",
                  "doc": "Refer to the [period][] section below.",
                  "required": false,
                  "default": "Calculated based on period. Refer to [period][] for details."
                },
                {
                  "name": "nil_to_zero",
                  "type": "bool",
                  "doc": "When true, NaN metric values are converted to 0.",
                  "required": false,
                  "default": "The value of nil_to_zero in the parent [static][] or [discovery][] block. true if not set in the parent block."
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "static",
          "doc": "Configures a static job. Multiple jobs can be configured.",
          "required": false,
          "arguments": [
            {
              "name": "regions",
              "type": "list(string)",
              "doc": "List of AWS regions.",
              "required": true,
              "default": null
            },
            {
              "name": "namespace",
              "type": "string",
              "doc": "CloudWatch metric namespace.",
              "required": true,
              "default": null
            },
            {
              "name": "dimensions",
              "type": "map(string)",
              "doc": "CloudWatch metric dimensions as a list of name / value pairs. Must uniquely define all metrics in this job.",
              "required": true,
              "default": null
            },
            {
              "name": "custom_tags",
              "type": "map(string)",
              "doc": "Custom tags to be added as a list of key / value pairs. When exported to Prometheus format, the label name follows the following format: custom_tag_{key}.",
              "required": false,
              "default": "{}"
            },
            {
              "name": "nil_to_zero",
              "type": "bool",
              "doc": "When true, NaN metric values are converted to 0. Individual metrics can override this value in the [metric][] block.",
              "required": false,
              "default": "true"
            }
          ],
          "blocks": [
            {
              "name": "role",
              "doc": "Configures the IAM roles the job should assume to scrape metrics. Defaults to the role configured in the environment {{< param \"PRODUCT_NAME\" >}} runs on.",
              "required": false,
              "arguments": [
                {
                  "name": "role_arn",
                  "type": "string",
                  "doc": "AWS IAM Role ARN the exporter should assume to perform AWS API calls.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "external_id",
                  "type": "string",
                  "doc": "External ID used when calling STS AssumeRole API. Refer to the [IAM User Guide][details] for more information.",
                  "required": false,
                  "default": "\"\""
                }
              ],
              "blocks": []
            },
            {
              "name": "metric",
              "doc": "Configures the list of metrics the job should scrape. Multiple metrics can be defined inside one job.",
              "required": true,
              "arguments": [
                {
                  "name": "name",
                  "type": "string",
                  "doc": "Metric name.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "statistics",
                  "type": "list(string)",
                  "doc": "List of statistics to scrape. For example, \"Minimum\", \"Maximum\", etc.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "period",
                  "type": "duration",
                  "doc": "Refer to the [period][] section below.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "length",
                  "type": "duration",
                  "doc": "Refer to the [period][] section below.",
                  "required": false,
                  "default": "Calculated based on period. Refer to [period][] for details."
                },
                {
                  "name": "nil_to_zero",
                  "type": "bool",
                  "doc": "When true, NaN metric values are converted to 0.",
                  "required": false,
                  "default": "The value of nil_to_zero in the parent [static][] or [discovery][] block. true if not set in the parent block."
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "decoupled_scraping",
          "doc": "Configures the decoupled scraping feature to retrieve metrics on a schedule and return the cached metrics.",
          "required": false,
          "arguments": [
            {
              "name": "enabled",
              "type": "bool",
              "doc": "Controls whether the decoupled scraping featured is enabled",
              "required": false,
              "default": "false"
            },
            {
              "name": "scrape_interval",
              "type": "string",
              "doc": "Controls how frequently to asynchronously gather new CloudWatch metrics",
              "required": false,
              "default": "5m"
            }
          ],
          "blocks": []
        }
      ]
    },
    "prometheus.exporter.consul": {
      "name": "prometheus.exporter.consul",
      "doc": "`prometheus.exporter.consul` component embeds\n[consul_exporter](https://github.com/prometheus/consul_exporter) for collecting metrics from a consul install.",
      "arguments": [
        {
          "name": "server",
          "type": "string",
          "doc": "Address (host and port) of the Consul instance we should connect to. This could be a local {{< param \"PRODUCT_NAME\" >}} (localhost:8500, for instance), or the address of a Consul server.",
          "required": false,
          "default": "http://localhost:8500"
        },
        {
          "name": "ca_file",
          "type": "string",
          "doc": "File path to a PEM-encoded certificate authority used to validate the authenticity of a server certificate.",
          "required": false,
          "default": null
        },
        {
          "name": "cert_file",
          "type": "string",
          "doc": "File path to a PEM-encoded certificate used with the private key to verify the exporter's authenticity.",
          "required": false,
          "default": null
        },
        {
          "name": "key_file",
          "type": "string",
          "doc": "File path to a PEM-encoded private key used with the certificate to verify the exporter's authenticity.",
          "required": false,
          "default": null
        },
        {
          "name": "server_name",
          "type": "string",
          "doc": "When provided, this overrides the hostname for the TLS certificate. It can be used to ensure that the certificate name matches the hostname we declare.",
          "required": false,
          "default": null
        },
        {
          "name": "timeout",
          "type": "duration",
          "doc": "Timeout on HTTP requests to consul.",
          "required": false,
          "default": "500ms"
        },
        {
          "name": "insecure_skip_verify",
          "type": "bool",
          "doc": "Disable TLS host verification.",
          "required": false,
          "default": "false"
        },
        {
          "name": "concurrent_request_limit",
          "type": "string",
          "doc": "Limit the maximum number of concurrent requests to consul, 0 means no limit.",
          "required": false,
          "default": null
        },
        {
          "name": "allow_stale",
          "type": "bool",
          "doc": "Allows any Consul server (non-leader) to service a read.",
          "required": false,
          "default": "true"
        },
        {
          "name": "require_consistent",
          "type": "bool",
          "doc": "Forces the read to be fully consistent.",
          "required": false,
          "default": null
        },
        {
          "name": "kv_prefix",
          "type": "string",
          "doc": "Prefix under which to look for KV pairs.",
          "required": false,
          "default": null
        },
        {
          "name": "kv_filter",
          "type": "string",
          "doc": "Only store keys that match this regex pattern.",
          "required": false,
          "default": ".*"
        },
        {
          "name": "generate_health_summary",
          "type": "bool",
          "doc": "Collects information about each registered service and exports consul_catalog_service_node_healthy.",
          "required": false,
          "default": "true"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": []
    },
    "prometheus.exporter.dnsmasq": {
      "name": "prometheus.exporter.dnsmasq",
      "doc": "`prometheus.exporter.dnsmasq` component embeds\n[dnsmasq_exporter](https://github.com/google/dnsmasq_exporter) for collecting statistics from a dnsmasq server.",
      "arguments": [
        {
          "name": "address",
          "type": "string",
          "doc": "The address of the dnsmasq server.",
          "required": false,
          "default": "\"localhost:53\""
        },
        {
          "name": "leases_file",
          "type": "string",
          "doc": "The path to the dnsmasq leases file.",
          "required": false,
          "default": "\"/var/lib/misc/dnsmasq.leases\""
        },
        {
          "name": "expose_leases",
          "type": "bool",
          "doc": "Expose dnsmasq leases as metrics (high cardinality).",
          "required": false,
          "default": "false"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": []
    },
    "prometheus.exporter.elasticsearch": {
      "name": "prometheus.exporter.elasticsearch",
      "doc": "`prometheus.exporter.elasticsearch` component embeds\n[elasticsearch_exporter](https://github.com/prometheus-community/elasticsearch_exporter) for\nthe collection of metrics from ElasticSearch servers.",
      "arguments": [
        {
          "name": "address",
          "type": "string",
          "doc": "HTTP API address of an Elasticsearch node.",
          "required": false,
          "default": "\"http://localhost:9200\""
        },
        {
          "name": "timeout",
          "type": "duration",
          "doc": "Timeout for trying to get stats from Elasticsearch.",
          "required": false,
          "default": "\"5s\""
        },
        {
          "name": "all",
          "type": "bool",
          "doc": "Export stats for all nodes in the cluster. If used, this flag will override the flag node.",
          "required": false,
          "default": null
        },
        {
          "name": "node",
          "type": "string",
          "doc": "Node's name of which metrics should be exposed",
          "required": false,
          "default": null
        },
        {
          "name": "indices",
          "type": "bool",
          "doc": "Export stats for indices in the cluster.",
          "required": false,
          "default": null
        },
        {
          "name": "indices_settings",
          "type": "bool",
          "doc": "Export stats for settings of all indices of the cluster.",
          "required": false,
          "default": null
        },
        {
          "name": "cluster_settings",
          "type": "bool",
          "doc": "Export stats for cluster settings.",
          "required": false,
          "default": null
        },
        {
          "name": "shards",
          "type": "bool",
          "doc": "Export stats for shards in the cluster (implies indices).",
          "required": false,
          "default": null
        },
        {
          "name": "snapshots",
          "type": "bool",
          "doc": "Export stats for the cluster snapshots.",
          "required": false,
          "default": null
        },
        {
          "name": "clusterinfo_interval",
          "type": "duration",
          "doc": "Cluster info update interval for the cluster label.",
          "required": false,
          "default": "\"5m\""
        },
        {
          "name": "ca",
          "type": "string",
          "doc": "Path to PEM file that contains trusted Certificate Authorities for the Elasticsearch connection.",
          "required": false,
          "default": null
        },
        {
          "name": "client_private_key",
          "type": "string",
          "doc": "Path to PEM file that contains the private key for client auth when connecting to Elasticsearch.",
          "required": false,
          "default": null
        },
        {
          "name": "client_cert",
          "type": "string",
          "doc": "Path to PEM file that contains the corresponding cert for the private key to connect to Elasticsearch.",
          "required": false,
          "default": null
        },
        {
          "name": "ssl_skip_verify",
          "type": "bool",
          "doc": "Skip SSL verification when connecting to Elasticsearch.",
          "required": false,
          "default": null
        },
        {
          "name": "aliases",
          "type": "bool",
          "doc": "Include informational aliases metrics.",
          "required": false,
          "default": null
        },
        {
          "name": "data_stream",
          "type": "bool",
          "doc": "Export stats for Data Streams.",
          "required": false,
          "default": null
        },
        {
          "name": "slm",
          "type": "bool",
          "doc": "Export stats for SLM (Snapshot Lifecycle Management).",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": [
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "prometheus.exporter.gcp": {
      "name": "prometheus.exporter.gcp",
      "doc": "`prometheus.exporter.gcp` component embeds [`stackdriver_exporter`](https://github.com/prometheus-community/stackdriver_exporter).\nIt lets you collect [GCP Cloud Monitoring (formerly stackdriver)](https://cloud.google.com/monitoring/docs), translate them to prometheus-compatible format and remote write.\nThe component supports all metrics available via the [GCP monitoring API](https://cloud.google.com/monitoring/api/metrics_gcp).",
      "arguments": [
        {
          "name": "project_ids",
          "type": "list(string)",
          "doc": "Configure the GCP Projects to scrape for metrics.",
          "required": true,
          "default": null
        },
        {
          "name": "metrics_prefixes",
          "type": "list(string)",
          "doc": "One or more values from the supported [GCP Metrics](https://cloud.google.com/monitoring/api/metrics_gcp). These can be as targeted or loose as needed.",
          "required": true,
          "default": null
        },
        {
          "name": "extra_filters",
          "type": "list(string)",
          "doc": "Used to further refine the resources you would like to collect metrics from. Any string value within a particular filter string must be enclosed in escaped double-quotes. The structure for these filters is <targeted_metric_prefix>:<filter_query>.",
          "required": false,
          "default": "[]"
        },
        {
          "name": "request_interval",
          "type": "duration",
          "doc": "The time range used when querying for metrics.",
          "required": false,
          "default": "5m"
        },
        {
          "name": "ingest_delay",
          "type": "boolean",
          "doc": "When enabled, this automatically adjusts the time range used when querying for metrics backwards based on the metadata GCP has published for how long the data can take to be ingested.",
          "required": false,
          "default": "false"
        },
        {
          "name": "request_offset",
          "type": "duration",
          "doc": "When enabled this offsets the time range used when querying for metrics by a set amount.",
          "required": false,
          "default": "0s"
        },
        {
          "name": "drop_delegated_projects",
          "type": "boolean",
          "doc": "When enabled drops metrics from attached projects and only fetches metrics from the explicitly configured project_ids.",
          "required": false,
          "default": "false"
        },
        {
          "name": "gcp_client_timeout",
          "type": "duration",
          "doc": "Sets a timeout on the client used to make API calls to GCP. A single scrape can initiate numerous calls to GCP, so be mindful if you choose to override this value.",
          "required": false,
          "default": "15s"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": []
    },
    "prometheus.exporter.github": {
      "name": "prometheus.exporter.github",
      "doc": "`prometheus.exporter.github` component embeds\n[github_exporter](https://github.com/githubexporter/github-exporter) for collecting statistics from GitHub.",
      "arguments": [
        {
          "name": "api_url",
          "type": "string",
          "doc": "The full URI of the GitHub API.",
          "required": false,
          "default": "https://api.github.com"
        },
        {
          "name": "repositories",
          "type": "list(string)",
          "doc": "GitHub repositories for which to collect metrics.",
          "required": false,
          "default": null
        },
        {
          "name": "organizations",
          "type": "list(string)",
          "doc": "GitHub organizations for which to collect metrics.",
          "required": false,
          "default": null
        },
        {
          "name": "users",
          "type": "list(string)",
          "doc": "A list of GitHub users for which to collect metrics.",
          "required": false,
          "default": null
        },
        {
          "name": "api_token",
          "type": "secret",
          "doc": "API token to use to authenticate against GitHub.",
          "required": false,
          "default": null
        },
        {
          "name": "api_token_file",
          "type": "string",
          "doc": "File containing API token to use to authenticate against GitHub.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": []
    },
    "prometheus.exporter.kafka": {
      "name": "prometheus.exporter.kafka",
      "doc": "`prometheus.exporter.kafka` component embeds\n[kafka_exporter](https://github.com/grafana/kafka_exporter) for collecting metrics from a kafka server.",
      "arguments": [
        {
          "name": "kafka_uris",
          "type": "array(string)",
          "doc": "Address array (host:port) of Kafka server.",
          "required": true,
          "default": null
        },
        {
          "name": "instance",
          "type": "string",
          "doc": "Theinstancelabel for metrics, default is the hostname:port of the first kafka_uris. You must manually provide the instance value if there is more than one string in kafka_uris.",
          "required": false,
          "default": null
        },
        {
          "name": "use_sasl",
          "type": "bool",
          "doc": "Connect using SASL/PLAIN.",
          "required": false,
          "default": null
        },
        {
          "name": "use_sasl_handshake",
          "type": "bool",
          "doc": "Only set this to false if using a non-Kafka SASL proxy.",
          "required": false,
          "default": "true"
        },
        {
          "name": "sasl_username",
          "type": "string",
          "doc": "SASL user name.",
          "required": false,
          "default": null
        },
        {
          "name": "sasl_password",
          "type": "string",
          "doc": "SASL user password.",
          "required": false,
          "default": null
        },
        {
          "name": "sasl_mechanism",
          "type": "string",
          "doc": "The SASL SCRAM SHA algorithm sha256 or sha512 as mechanism.",
          "required": false,
          "default": null
        },
        {
          "name": "sasl_disable_pafx_fast",
          "type": "bool",
          "doc": "Configure the Kerberos client to not use PA_FX_FAST.",
          "required": false,
          "default": null
        },
        {
          "name": "use_tls",
          "type": "bool",
          "doc": "Connect using TLS.",
          "required": false,
          "default": null
        },
        {
          "name": "tls_server_name",
          "type": "string",
          "doc": "Used to verify the hostname on the returned certificates unless tls.insecure-skip-tls-verify is given. If you don't provide the Kafka server name, the hostname is taken from the URL.",
          "required": false,
          "default": null
        },
        {
          "name": "ca_file",
          "type": "string",
          "doc": "The optional certificate authority file for TLS client authentication.",
          "required": false,
          "default": null
        },
        {
          "name": "cert_file",
          "type": "string",
          "doc": "The optional certificate file for TLS client authentication.",
          "required": false,
          "default": null
        },
        {
          "name": "key_file",
          "type": "string",
          "doc": "The optional key file for TLS client authentication.",
          "required": false,
          "default": null
        },
        {
          "name": "insecure_skip_verify",
          "type": "bool",
          "doc": "If set to true, the server's certificate will not be checked for validity. This makes your HTTPS connections insecure.",
          "required": false,
          "default": null
        },
        {
          "name": "kafka_version",
          "type": "string",
          "doc": "Kafka broker version.",
          "required": false,
          "default": "2.0.0"
        },
        {
          "name": "use_zookeeper_lag",
          "type": "bool",
          "doc": "If set to true, use a group from zookeeper.",
          "required": false,
          "default": null
        },
        {
          "name": "zookeeper_uris",
          "type": "array(string)",
          "doc": "Address array (hosts) of zookeeper server.",
          "required": false,
          "default": null
        },
        {
          "name": "kafka_cluster_name",
          "type": "string",
          "doc": "Kafka cluster name.",
          "required": false,
          "default": null
        },
        {
          "name": "metadata_refresh_interval",
          "type": "duration",
          "doc": "Metadata refresh interval.",
          "required": false,
          "default": "1m"
        },
        {
          "name": "gssapi_service_name",
          "type": "string",
          "doc": "Service name when using Kerberos Authorization",
          "required": false,
          "default": null
        },
        {
          "name": "gssapi_kerberos_config_path",
          "type": "string",
          "doc": "Kerberos config path.",
          "required": false,
          "default": null
        },
        {
          "name": "gssapi_realm",
          "type": "string",
          "doc": "Kerberos realm.",
          "required": false,
          "default": null
        },
        {
          "name": "gssapi_key_tab_path",
          "type": "string",
          "doc": "Kerberos keytab file path.",
          "required": false,
          "default": null
        },
        {
          "name": "gssapi_kerberos_auth_type",
          "type": "string",
          "doc": "Kerberos auth type. Either 'keytabAuth' or 'userAuth'.",
          "required": false,
          "default": null
        },
        {
          "name": "offset_show_all",
          "type": "bool",
          "doc": "If true, the broker may auto-create topics that we requested which do not already exist.",
          "required": false,
          "default": "true"
        },
        {
          "name": "topic_workers",
          "type": "int",
          "doc": "Minimum number of topics to monitor.",
          "required": false,
          "default": "100"
        },
        {
          "name": "allow_concurrency",
          "type": "bool",
          "doc": "If set to true, all scrapes trigger Kafka operations. Otherwise, they will share results. WARNING: Disable this on large clusters.",
          "required": false,
          "default": "true"
        },
        {
          "name": "allow_auto_topic_creation",
          "type": "bool",
          "doc": "If true, the broker may auto-create topics that we requested which do not already exist.",
          "required": false,
          "default": null
        },
        {
          "name": "max_offsets",
          "type": "int",
          "doc": "The maximum number of offsets to store in the interpolation table for a partition.",
          "required": false,
          "default": "1000"
        },
        {
          "name": "prune_interval_seconds",
          "type": "int",
          "doc": "Deprecated (no-op), use metadata_refresh_interval instead.",
          "required": false,
          "default": "30"
        },
        {
          "name": "topics_filter_regex",
          "type": "string",
          "doc": "Regex filter for topics to be monitored.",
          "required": false,
          "default": ".*"
        },
        {
          "name": "topics_exclude_regex",
          "type": "string",
          "doc": "Regex that determines which topics to exclude.",
          "required": false,
          "default": "^$"
        },
        {
          "name": "groups_filter_regex",
          "type": "string",
          "doc": "Regex filter for consumer groups to be monitored.",
          "required": false,
          "default": ".*"
        },
        {
          "name": "groups_exclude_regex",
          "type": "string",
          "doc": "Regex that determines which consumer groups to exclude.",
          "required": false,
          "default": "^$"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": []
    },
    "prometheus.exporter.memcached": {
      "name": "prometheus.exporter.memcached",
      "doc": "`prometheus.exporter.memcached` component embeds\n[memcached_exporter](https://github.com/prometheus/memcached_exporter) for collecting metrics from a Memcached server.",
      "arguments": [
        {
          "name": "address",
          "type": "string",
          "doc": "The Memcached server address.",
          "required": false,
          "default": "\"localhost:11211\""
        },
        {
          "name": "timeout",
          "type": "duration",
          "doc": "The timeout for connecting to the Memcached server.",
          "required": false,
          "default": "\"1s\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": [
        {
          "name": "tls_config",
          "doc": "TLS configuration for requests to the Memcached server.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "prometheus.exporter.mongodb": {
      "name": "prometheus.exporter.mongodb",
      "doc": "`prometheus.exporter.mongodb` component embeds percona's [`mongodb_exporter`](https://github.com/percona/mongodb_exporter).",
      "arguments": [
        {
          "name": "mongodb_uri",
          "type": "string",
          "doc": "MongoDB node connection URI.",
          "required": true,
          "default": null
        },
        {
          "name": "direct_connect",
          "type": "boolean",
          "doc": "Whether or not a direct connect should be made. Direct connections are not valid if multiple hosts are specified or an SRV URI is used.",
          "required": false,
          "default": "false"
        },
        {
          "name": "discovering_mode",
          "type": "boolean",
          "doc": "Wheter or not to enable autodiscover collections.",
          "required": false,
          "default": "false"
        },
        {
          "name": "tls_basic_auth_config_path",
          "type": "string",
          "doc": "Path to the file having Prometheus TLS config for basic auth. Only enable if you want to use TLS based authentication.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": []
    },
    "prometheus.exporter.mssql": {
      "name": "prometheus.exporter.mssql",
      "doc": "`prometheus.exporter.mssql` component embeds [`sql_exporter`](https://github.com/burningalchemist/sql_exporter) for collecting stats from a Microsoft SQL Server and exposing them as Prometheus metrics.",
      "arguments": [
        {
          "name": "connection_string",
          "type": "secret",
          "doc": "The connection string used to connect to an Microsoft SQL Server.",
          "required": true,
          "default": null
        },
        {
          "name": "max_idle_connections",
          "type": "int",
          "doc": "Maximum number of idle connections to any one target.",
          "required": false,
          "default": "3"
        },
        {
          "name": "max_open_connections",
          "type": "int",
          "doc": "Maximum number of open connections to any one target.",
          "required": false,
          "default": "3"
        },
        {
          "name": "timeout",
          "type": "duration",
          "doc": "The query timeout in seconds.",
          "required": false,
          "default": "\"10s\""
        },
        {
          "name": "query_config",
          "type": "string",
          "doc": "MSSQL query to Prometheus metric configuration as an inline string.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": []
    },
    "prometheus.exporter.mysql": {
      "name": "prometheus.exporter.mysql",
      "doc": "`prometheus.exporter.mysql` component embeds\n[mysqld_exporter](https://github.com/prometheus/mysqld_exporter) for collecting stats from a MySQL server.",
      "arguments": [],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": [
        {
          "name": "info_schema.processlist",
          "doc": "Configures the info_schema.processlist collector.",
          "required": false,
          "arguments": [
            {
              "name": "min_time",
              "type": "int",
              "doc": "Minimum time a thread must be in each state to be counted.",
              "required": false,
              "default": "0"
            },
            {
              "name": "processes_by_user",
              "type": "bool",
              "doc": "Enable collecting the number of processes by user.",
              "required": false,
              "default": "true"
            },
            {
              "name": "processes_by_host",
              "type": "bool",
              "doc": "Enable collecting the number of processes by host.",
              "required": false,
              "default": "true"
            }
          ],
          "blocks": []
        },
        {
          "name": "info_schema.tables",
          "doc": "Configures the info_schema.tables collector.",
          "required": false,
          "arguments": [
            {
              "name": "info_schema_tables_databases",
              "type": "string",
              "doc": "Regular expression to match databases to collect table stats for.",
              "required": false,
              "default": "\"*\""
            }
          ],
          "blocks": []
        },
        {
          "name": "perf_schema.eventsstatements",
          "doc": "Configures the perf_schema.eventsstatements collector.",
          "required": false,
          "arguments": [
            {
              "name": "limit",
              "type": "int",
              "doc": "Limit the number of events statements digests, in descending order by last_seen.",
              "required": false,
              "default": "250"
            },
            {
              "name": "time_limit",
              "type": "int",
              "doc": "Limit how old, in seconds, the last_seen events statements can be.",
              "required": false,
              "default": "86400"
            },
            {
              "name": "text_limit",
              "type": "int",
              "doc": "Maximum length of the normalized statement text.",
              "required": false,
              "default": "120"
            }
          ],
          "blocks": []
        },
        {
          "name": "perf_schema.file_instances",
          "doc": "Configures the perf_schema.file_instances collector.",
          "required": false,
          "arguments": [
            {
              "name": "filter",
              "type": "string",
              "doc": "Regular expression to select rows in performance_schema.file_summary_by_instance.",
              "required": false,
              "default": "\".*\""
            },
            {
              "name": "remove_prefix",
              "type": "string",
              "doc": "Prefix to trim away from file_name.",
              "required": false,
              "default": "\"/var/lib/mysql\""
            }
          ],
          "blocks": []
        },
        {
          "name": "perf_schema.memory_events",
          "doc": "Configures the perf_schema.memory_events collector.",
          "required": false,
          "arguments": [
            {
              "name": "remove_prefix",
              "type": "string",
              "doc": "Prefix to trim away from performance_schema.memory_summary_global_by_event_name.",
              "required": false,
              "default": "\"memory/\""
            }
          ],
          "blocks": []
        },
        {
          "name": "heartbeat",
          "doc": "Configures the heartbeat collector.",
          "required": false,
          "arguments": [
            {
              "name": "database",
              "type": "string",
              "doc": "Database to collect heartbeat data from.",
              "required": false,
              "default": "\"heartbeat\""
            },
            {
              "name": "table",
              "type": "string",
              "doc": "Table to collect heartbeat data from.",
              "required": false,
              "default": "\"heartbeat\""
            },
            {
              "name": "utc",
              "type": "bool",
              "doc": "Use UTC for timestamps of the current server (pt-heartbeat is called with --utc).",
              "required": false,
              "default": "false"
            }
          ],
          "blocks": []
        },
        {
          "name": "mysql.user",
          "doc": "Configures the mysql.user collector.",
          "required": false,
          "arguments": [
            {
              "name": "privileges",
              "type": "bool",
              "doc": "Enable collecting user privileges from mysql.user.",
              "required": false,
              "default": "false"
            }
          ],
          "blocks": []
        }
      ]
    },
    "prometheus.exporter.oracledb": {
      "name": "prometheus.exporter.oracledb",
      "doc": "`prometheus.exporter.oracledb` component embeds\n[oracledb_exporter](https://github.com/iamseth/oracledb_exporter) for collecting statistics from a OracleDB server.",
      "arguments": [
        {
          "name": "connection_string",
          "type": "secret",
          "doc": "The connection string used to connect to an Oracle Database.",
          "required": true,
          "default": null
        },
        {
          "name": "max_idle_conns",
          "type": "int",
          "doc": "Number of maximum idle connections in the connection pool.",
          "required": false,
          "default": "0"
        },
        {
          "name": "max_open_conns",
          "type": "int",
          "doc": "Number of maximum open connections in the connection pool.",
          "required": false,
          "default": "10"
        },
        {
          "name": "query_timeout",
          "type": "int",
          "doc": "The query timeout in seconds.",
          "required": false,
          "default": "5"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": []
    },
    "prometheus.exporter.postgres": {
      "name": "prometheus.exporter.postgres",
      "doc": "`prometheus.exporter.postgres` component embeds the [`postgres_exporter`](https://github.com/prometheus-community/postgres_exporter) for collecting metrics from a PostgreSQL database.",
      "arguments": [
        {
          "name": "data_source_names",
          "type": "list(secret)",
          "doc": "Specifies the PostgreSQL servers to connect to.",
          "required": true,
          "default": null
        },
        {
          "name": "disable_settings_metrics",
          "type": "bool",
          "doc": "Disables collection of metrics from pg_settings.",
          "required": false,
          "default": "false"
        },
        {
          "name": "disable_default_metrics",
          "type": "bool",
          "doc": "When true, only exposes metrics supplied from custom_queries_config_path.",
          "required": false,
          "default": "false"
        },
        {
          "name": "custom_queries_config_path",
          "type": "string",
          "doc": "Path to YAML file containing custom queries to expose as metrics.",
          "required": false,
          "default": "\"\""
        },
        {
          "name": "enabled_collectors",
          "type": "list(string)",
          "doc": "List of collectors to enable. Refer to the information below for more detail.",
          "required": false,
          "default": "[]"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": [
        {
          "name": "autodiscovery",
          "doc": "Database discovery settings.",
          "required": false,
          "arguments": [
            {
              "name": "enabled",
              "type": "bool",
              "doc": "Whether to automatically discover other databases.",
              "required": false,
              "default": "false"
            },
            {
              "name": "database_allowlist",
              "type": "list(string)",
              "doc": "List of databases to filter for, meaning only these databases will be scraped.",
              "required": false,
              "default": null
            },
            {
              "name": "database_denylist",
              "type": "list(string)",
              "doc": "List of databases to filter out, meaning all other databases will be scraped.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "prometheus.exporter.process": {
      "name": "prometheus.exporter.process",
      "doc": "`prometheus.exporter.process` component embeds\n[process_exporter](https://github.com/ncabatoff/process-exporter) for collecting process stats from `/proc`.",
      "arguments": [
        {
          "name": "procfs_path",
          "type": "string",
          "doc": "procfs mountpoint.",
          "required": false,
          "default": "/proc"
        },
        {
          "name": "track_children",
          "type": "bool",
          "doc": "Whether to track a process' children.",
          "required": false,
          "default": "true"
        },
        {
          "name": "track_threads",
          "type": "bool",
          "doc": "Report metrics for a process' individual threads.",
          "required": false,
          "default": "true"
        },
        {
          "name": "gather_smaps",
          "type": "bool",
          "doc": "Gather metrics from the smaps file for a process.",
          "required": false,
          "default": "true"
        },
        {
          "name": "recheck_on_scrape",
          "type": "bool",
          "doc": "Recheck process names on each scrape.",
          "required": false,
          "default": "true"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": [
        {
          "name": "matcher",
          "doc": "A collection of matching rules to use for deciding which processes to monitor.",
          "required": false,
          "arguments": [
            {
              "name": "name",
              "type": "string",
              "doc": "The name to use for identifying the process group name in the metric.",
              "required": false,
              "default": "\"{{.ExeBase}}\""
            },
            {
              "name": "comm",
              "type": "list(string)",
              "doc": "A list of strings that match the base executable name for a process, truncated to 15 characters.",
              "required": false,
              "default": null
            },
            {
              "name": "exe",
              "type": "list(string)",
              "doc": "A list of strings that match argv[0] for a process.",
              "required": false,
              "default": null
            },
            {
              "name": "cmdline",
              "type": "list(string)",
              "doc": "A list of regular expressions applied to the argv of the process.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "prometheus.exporter.redis": {
      "name": "prometheus.exporter.redis",
      "doc": "`prometheus.exporter.redis` component embeds the [`redis_exporter`](https://github.com/oliver006/redis_exporter) for collecting metrics from a Redis database.",
      "arguments": [
        {
          "name": "redis_addr",
          "type": "string",
          "doc": "Address (host and port) of the Redis instance to connect to.",
          "required": true,
          "default": null
        },
        {
          "name": "redis_user",
          "type": "string",
          "doc": "User name to use for authentication. Redis ACL for Redis 6.0 and newer.",
          "required": false,
          "default": null
        },
        {
          "name": "redis_password",
          "type": "secret",
          "doc": "Password of the Redis instance.",
          "required": false,
          "default": null
        },
        {
          "name": "redis_password_file",
          "type": "string",
          "doc": "Path of a file containing a password.",
          "required": false,
          "default": null
        },
        {
          "name": "redis_password_map_file",
          "type": "string",
          "doc": "Path of a JSON file containing a map of Redis URIs to passwords.",
          "required": false,
          "default": null
        },
        {
          "name": "namespace",
          "type": "string",
          "doc": "Namespace for the metrics.",
          "required": false,
          "default": "\"redis\""
        },
        {
          "name": "config_command",
          "type": "string",
          "doc": "What to use for the CONFIG command.",
          "required": false,
          "default": "\"CONFIG\""
        },
        {
          "name": "check_keys",
          "type": "list(string)",
          "doc": "List of key-patterns to export value and length/size, searched for with SCAN.",
          "required": false,
          "default": null
        },
        {
          "name": "check_key_groups",
          "type": "list(string)",
          "doc": "List of Lua regular expressions (regex) for grouping keys.",
          "required": false,
          "default": null
        },
        {
          "name": "check_key_groups_batch_size",
          "type": "int",
          "doc": "Check key or key groups batch size hint for the underlying SCAN.",
          "required": false,
          "default": "10000"
        },
        {
          "name": "max_distinct_key_groups",
          "type": "int",
          "doc": "The maximum number of distinct key groups with the most memory utilization to present as distinct metrics per database.",
          "required": false,
          "default": "100"
        },
        {
          "name": "check_single_keys",
          "type": "list(string)",
          "doc": "List of single keys to export value and length/size.",
          "required": false,
          "default": null
        },
        {
          "name": "check_streams",
          "type": "list(string)",
          "doc": "List of stream-patterns to export info about streams, groups, and consumers to search for with SCAN.",
          "required": false,
          "default": null
        },
        {
          "name": "check_single_streams",
          "type": "list(string)",
          "doc": "List of single streams to export info about streams, groups, and consumers.",
          "required": false,
          "default": null
        },
        {
          "name": "export_key_values",
          "type": "bool",
          "doc": "Whether to export key values as labels when using check_keys or check_single_keys.",
          "required": false,
          "default": "true"
        },
        {
          "name": "count_keys",
          "type": "list(string)",
          "doc": "List of individual keys to export counts for.",
          "required": false,
          "default": null
        },
        {
          "name": "script_path",
          "type": "string",
          "doc": "Path to Lua Redis script for collecting extra metrics.",
          "required": false,
          "default": null
        },
        {
          "name": "script_paths",
          "type": "list(string)",
          "doc": "List of paths to Lua Redis scripts for collecting extra metrics.",
          "required": false,
          "default": null
        },
        {
          "name": "connection_timeout",
          "type": "duration",
          "doc": "Timeout for connection to Redis instance (in Golang duration format).",
          "required": false,
          "default": "\"15s\""
        },
        {
          "name": "tls_client_key_file",
          "type": "string",
          "doc": "Name of the client key file (including full path) if the server requires TLS client authentication.",
          "required": false,
          "default": null
        },
        {
          "name": "tls_client_cert_file",
          "type": "string",
          "doc": "Name of the client certificate file (including full path) if the server requires TLS client authentication.",
          "required": false,
          "default": null
        },
        {
          "name": "tls_ca_cert_file",
          "type": "string",
          "doc": "Name of the CA certificate file (including full path) if the server requires TLS client authentication.",
          "required": false,
          "default": null
        },
        {
          "name": "set_client_name",
          "type": "bool",
          "doc": "Whether to set client name to redis_exporter.",
          "required": false,
          "default": "true"
        },
        {
          "name": "is_tile38",
          "type": "bool",
          "doc": "Whether to scrape Tile38-specific metrics.",
          "required": false,
          "default": null
        },
        {
          "name": "is_cluster",
          "type": "bool",
          "doc": "Whether the connection is to a Redis cluster.",
          "required": false,
          "default": null
        },
        {
          "name": "export_client_list",
          "type": "bool",
          "doc": "Whether to scrape Client List specific metrics.",
          "required": false,
          "default": null
        },
        {
          "name": "export_client_port",
          "type": "bool",
          "doc": "Whether to include the client's port when exporting the client list.",
          "required": false,
          "default": null
        },
        {
          "name": "redis_metrics_only",
          "type": "bool",
          "doc": "Whether to just export metrics or to also export go runtime metrics.",
          "required": false,
          "default": null
        },
        {
          "name": "ping_on_connect",
          "type": "bool",
          "doc": "Whether to ping the Redis instance after connecting.",
          "required": false,
          "default": null
        },
        {
          "name": "incl_system_metrics",
          "type": "bool",
          "doc": "Whether to include system metrics. For example redis_total_system_memory_bytes.",
          "required": false,
          "default": null
        },
        {
          "name": "skip_tls_verification",
          "type": "bool",
          "doc": "Whether to skip TLS verification.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": []
    },
    "prometheus.exporter.self": {
      "name": "prometheus.exporter.self",
      "doc": "`prometheus.exporter.self` component collects and exposes metrics about {{< param \"PRODUCT_NAME\" >}} itself.",
      "arguments": [],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": []
    },
    "prometheus.exporter.snmp": {
      "name": "prometheus.exporter.snmp",
      "doc": "`prometheus.exporter.snmp` component embeds\n[`snmp_exporter`](https://github.com/prometheus/snmp_exporter). `snmp_exporter` lets you collect SNMP data and expose them as Prometheus metrics.",
      "arguments": [
        {
          "name": "config_file",
          "type": "string",
          "doc": "SNMP configuration file defining custom modules.",
          "required": false,
          "default": null
        },
        {
          "name": "config",
          "type": "string or secret",
          "doc": "SNMP configuration as inline string.",
          "required": false,
          "default": null
        },
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "SNMP targets.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": [
        {
          "name": "target",
          "doc": "Configures an SNMP target.",
          "required": false,
          "arguments": [
            {
              "name": "address",
              "type": "string",
              "doc": "The address of SNMP device.",
              "required": true,
              "default": null
            },
            {
              "name": "module",
              "type": "string",
              "doc": "SNMP module to use for polling.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "auth",
              "type": "string",
              "doc": "SNMP authentication profile to use.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "walk_params",
              "type": "string",
              "doc": "Config to use for this target.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "snmp_context",
              "type": "string",
              "doc": "Override the context_name parameter in the SNMP configuration file.",
              "required": false,
              "default": "\"\""
            }
          ],
          "blocks": []
        },
        {
          "name": "walk_param",
          "doc": "SNMP connection profiles to override default SNMP settings.",
          "required": false,
          "arguments": [
            {
              "name": "name",
              "type": "string",
              "doc": "Name of the module to override.",
              "required": false,
              "default": null
            },
            {
              "name": "max_repetitions",
              "type": "int",
              "doc": "How many objects to request with GET/GETBULK.",
              "required": false,
              "default": "25"
            },
            {
              "name": "retries",
              "type": "int",
              "doc": "How many times to retry a failed request.",
              "required": false,
              "default": "3"
            },
            {
              "name": "timeout",
              "type": "duration",
              "doc": "Timeout for each individual SNMP request.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "prometheus.exporter.snowflake": {
      "name": "prometheus.exporter.snowflake",
      "doc": "`prometheus.exporter.snowflake` component embeds\n[snowflake_exporter](https://github.com/grafana/snowflake-prometheus-exporter) for collecting warehouse, database, table, and replication statistics from a Snowflake account via HTTP for Prometheus consumption.",
      "arguments": [
        {
          "name": "account_name",
          "type": "string",
          "doc": "The account to collect metrics for.",
          "required": true,
          "default": null
        },
        {
          "name": "username",
          "type": "string",
          "doc": "The username for the user used when querying metrics.",
          "required": true,
          "default": null
        },
        {
          "name": "password",
          "type": "secret",
          "doc": "The password for the user used when querying metrics.",
          "required": true,
          "default": null
        },
        {
          "name": "role",
          "type": "string",
          "doc": "The role to use when querying metrics.",
          "required": false,
          "default": "\"ACCOUNTADMIN\""
        },
        {
          "name": "warehouse",
          "type": "string",
          "doc": "The warehouse to use when querying metrics.",
          "required": true,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": []
    },
    "prometheus.exporter.squid": {
      "name": "prometheus.exporter.squid",
      "doc": "`prometheus.exporter.squid` component embeds\n[squid_exporter](https://github.com/boynux/squid-exporter) for collecting metrics from a squid instance.",
      "arguments": [
        {
          "name": "address",
          "type": "string",
          "doc": "The squid address to collect metrics from.",
          "required": true,
          "default": null
        },
        {
          "name": "username",
          "type": "string",
          "doc": "The username for the user used when querying metrics.",
          "required": false,
          "default": null
        },
        {
          "name": "password",
          "type": "secret",
          "doc": "The password for the user used when querying metrics.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": []
    },
    "prometheus.exporter.statsd": {
      "name": "prometheus.exporter.statsd",
      "doc": "`prometheus.exporter.statsd` component embeds\n[statsd_exporter](https://github.com/prometheus/statsd_exporter) for collecting StatsD-style metrics and exporting them as Prometheus metrics.",
      "arguments": [
        {
          "name": "listen_udp",
          "type": "string",
          "doc": "The UDP address on which to receive statsd metric lines. Use \"\" to disable it.",
          "required": false,
          "default": ":9125"
        },
        {
          "name": "listen_tcp",
          "type": "string",
          "doc": "The TCP address on which to receive statsd metric lines. Use \"\" to disable it.",
          "required": false,
          "default": ":9125"
        },
        {
          "name": "listen_unixgram",
          "type": "string",
          "doc": "The Unixgram socket path to receive statsd metric lines in datagram. Use \"\" to disable it.",
          "required": false,
          "default": null
        },
        {
          "name": "unix_socket_mode",
          "type": "string",
          "doc": "The permission mode of the unix socket.",
          "required": false,
          "default": "755"
        },
        {
          "name": "mapping_config_path",
          "type": "string",
          "doc": "The path to a YAML mapping file used to translate specific dot-separated StatsD metrics into labeled Prometheus metrics.",
          "required": false,
          "default": null
        },
        {
          "name": "read_buffer",
          "type": "int",
          "doc": "Size (in bytes) of the operating system's transmit read buffer associated with the UDP or Unixgram connection.",
          "required": false,
          "default": null
        },
        {
          "name": "cache_size",
          "type": "int",
          "doc": "Maximum size of your metric mapping cache. Relies on least recently used replacement policy if max size is reached.",
          "required": false,
          "default": "1000"
        },
        {
          "name": "cache_type",
          "type": "string",
          "doc": "Metric mapping cache type. Valid options are \"lru\" and \"random\".",
          "required": false,
          "default": "lru"
        },
        {
          "name": "event_queue_size",
          "type": "int",
          "doc": "Size of internal queue for processing events.",
          "required": false,
          "default": "10000"
        },
        {
          "name": "event_flush_threshold",
          "type": "int",
          "doc": "Number of events to hold in queue before flushing.",
          "required": false,
          "default": "1000"
        },
        {
          "name": "event_flush_interval",
          "type": "string",
          "doc": "Maximum time between event queue flushes.",
          "required": false,
          "default": "200ms"
        },
        {
          "name": "parse_dogstatsd_tags",
          "type": "string",
          "doc": "Parse DogStatsd style tags.",
          "required": false,
          "default": "true"
        },
        {
          "name": "parse_influxdb_tags",
          "type": "string",
          "doc": "Parse InfluxDB style tags.",
          "required": false,
          "default": "true"
        },
        {
          "name": "parse_librato_tags",
          "type": "string",
          "doc": "Parse Librato style tags.",
          "required": false,
          "default": "true"
        },
        {
          "name": "parse_signalfx_tags",
          "type": "string",
          "doc": "Parse SignalFX style tags.",
          "required": false,
          "default": "true"
        },
        {
          "name": "relay_addr",
          "type": "string",
          "doc": "Relay address configuration (UDP endpoint in the format 'host:port').",
          "required": false,
          "default": null
        },
        {
          "name": "relay_packet_length",
          "type": "int",
          "doc": "Maximum relay output packet length to avoid fragmentation.",
          "required": false,
          "default": "1400"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": []
    },
    "prometheus.exporter.unix": {
      "name": "prometheus.exporter.unix",
      "doc": "`prometheus.exporter.unix` component uses [node_exporter](https://github.com/prometheus/node_exporter) to expose a wide variety of hardware and OS metrics for \\*nix-based systems.",
      "arguments": [
        {
          "name": "set_collectors",
          "type": "list(string)",
          "doc": "Overrides the default set of enabled collectors with the collectors listed.",
          "required": false,
          "default": null
        },
        {
          "name": "enable_collectors",
          "type": "list(string)",
          "doc": "Collectors to mark as enabled.",
          "required": false,
          "default": null
        },
        {
          "name": "disable_collectors",
          "type": "list(string)",
          "doc": "Collectors to mark as disabled.",
          "required": false,
          "default": null
        },
        {
          "name": "include_exporter_metrics",
          "type": "boolean",
          "doc": "Whether metrics about the exporter itself should be reported.",
          "required": false,
          "default": "false"
        },
        {
          "name": "procfs_path",
          "type": "string",
          "doc": "The procfs mount point.",
          "required": false,
          "default": "/proc"
        },
        {
          "name": "sysfs_path",
          "type": "string",
          "doc": "The sysfs mount point.",
          "required": false,
          "default": "/sys"
        },
        {
          "name": "rootfs_path",
          "type": "string",
          "doc": "Specify a prefix for accessing the host filesystem.",
          "required": false,
          "default": "/"
        },
        {
          "name": "udev_data_path",
          "type": "string",
          "doc": "The udev data path.",
          "required": false,
          "default": "/run/udev/data"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": [
        {
          "name": "bcache",
          "doc": "Configures the bcache collector.",
          "required": false,
          "arguments": [
            {
              "name": "priority_stats",
              "type": "boolean",
              "doc": "Enable exposing of expensive bcache priority stats.",
              "required": false,
              "default": "false"
            }
          ],
          "blocks": []
        },
        {
          "name": "cpu",
          "doc": "Configures the cpu collector.",
          "required": false,
          "arguments": [
            {
              "name": "guest",
              "type": "boolean",
              "doc": "Enable the node_cpu_guest_seconds_total metric.",
              "required": false,
              "default": "true"
            },
            {
              "name": "info",
              "type": "boolean",
              "doc": "Enable the cpu_info metric for the cpu collector.",
              "required": false,
              "default": "true"
            },
            {
              "name": "bugs_include",
              "type": "string",
              "doc": "Regexp of bugs field in cpu info to filter.",
              "required": false,
              "default": null
            },
            {
              "name": "flags_include",
              "type": "string",
              "doc": "Regexp of flags field in cpu info to filter.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "disk",
          "doc": "Configures the diskstats collector.",
          "required": false,
          "arguments": [
            {
              "name": "device_include",
              "type": "string",
              "doc": "Regexp of devices to include for diskstats. If set, device_exclude is ignored.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "ethtool",
          "doc": "Configures the ethtool collector.",
          "required": false,
          "arguments": [
            {
              "name": "device_exclude",
              "type": "string",
              "doc": "Regexp of ethtool devices to exclude. Mutually exclusive with device_include.",
              "required": false,
              "default": null
            },
            {
              "name": "device_include",
              "type": "string",
              "doc": "Regexp of ethtool devices to include. Mutually exclusive with device_exclude.",
              "required": false,
              "default": null
            },
            {
              "name": "metrics_include",
              "type": "string",
              "doc": "Regexp of ethtool stats to include.",
              "required": false,
              "default": ".*"
            }
          ],
          "blocks": []
        },
        {
          "name": "filesystem",
          "doc": "Configures the filesystem collector.",
          "required": false,
          "arguments": [
            {
              "name": "fs_types_exclude",
              "type": "string",
              "doc": "Regexp of filesystem types to ignore for filesystem collector.",
              "required": false,
              "default": "(_see below_ )"
            },
            {
              "name": "mount_points_exclude",
              "type": "string",
              "doc": "Regexp of mount points to ignore for filesystem collector.",
              "required": false,
              "default": "(_see below_ )"
            },
            {
              "name": "mount_timeout",
              "type": "duration",
              "doc": "How long to wait for a mount to respond before marking it as stale.",
              "required": false,
              "default": "\"5s\""
            }
          ],
          "blocks": []
        },
        {
          "name": "ipvs",
          "doc": "Configures the ipvs collector.",
          "required": false,
          "arguments": [
            {
              "name": "backend_labels",
              "type": "list(string)",
              "doc": "Array of IPVS backend stats labels.",
              "required": false,
              "default": "[local_address, local_port, remote_address, remote_port, proto, local_mark]"
            }
          ],
          "blocks": []
        },
        {
          "name": "ntp",
          "doc": "Configures the ntp collector.",
          "required": false,
          "arguments": [
            {
              "name": "server",
              "type": "string",
              "doc": "NTP server to use for the collector.",
              "required": false,
              "default": "\"127.0.0.1\""
            },
            {
              "name": "server_is_local",
              "type": "boolean",
              "doc": "Certifies that the server address isn't a public NTP server.",
              "required": false,
              "default": "false"
            },
            {
              "name": "ip_ttl",
              "type": "int",
              "doc": "TTL to use while sending NTP query.",
              "required": false,
              "default": "1"
            },
            {
              "name": "local_offset_tolerance",
              "type": "duration",
              "doc": "Offset between local clock and local NTPD time to tolerate.",
              "required": false,
              "default": "\"1ms\""
            },
            {
              "name": "max_distance",
              "type": "duration",
              "doc": "Max accumulated distance to the root.",
              "required": false,
              "default": "\"3466080us\""
            },
            {
              "name": "protocol_version",
              "type": "int",
              "doc": "NTP protocol version.",
              "required": false,
              "default": "4"
            }
          ],
          "blocks": []
        },
        {
          "name": "netclass",
          "doc": "Configures the netclass collector.",
          "required": false,
          "arguments": [
            {
              "name": "ignore_invalid_speed_device",
              "type": "boolean",
              "doc": "Ignore net devices with invalid speed values.",
              "required": false,
              "default": "false"
            },
            {
              "name": "ignored_devices",
              "type": "string",
              "doc": "Regexp of net devices to ignore for netclass collector.",
              "required": false,
              "default": "\"^$\""
            }
          ],
          "blocks": []
        },
        {
          "name": "netdev",
          "doc": "Configures the netdev collector.",
          "required": false,
          "arguments": [
            {
              "name": "address_info",
              "type": "boolean",
              "doc": "Enable collecting address-info for every device.",
              "required": false,
              "default": "false"
            },
            {
              "name": "device_exclude",
              "type": "string",
              "doc": "Regexp of net devices to exclude. Mutually exclusive with device_include.",
              "required": false,
              "default": null
            },
            {
              "name": "device_include",
              "type": "string",
              "doc": "Regexp of net devices to include. Mutually exclusive with device_exclude.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "netstat",
          "doc": "Configures the netstat collector.",
          "required": false,
          "arguments": [
            {
              "name": "fields",
              "type": "string",
              "doc": "Regexp of fields to return for netstat collector.",
              "required": false,
              "default": "_(see below)_"
            }
          ],
          "blocks": []
        },
        {
          "name": "perf",
          "doc": "Configures the perf collector.",
          "required": false,
          "arguments": [
            {
              "name": "cpus",
              "type": "string",
              "doc": "List of CPUs from which perf metrics should be collected.",
              "required": false,
              "default": null
            },
            {
              "name": "tracepoint",
              "type": "list(string)",
              "doc": "Array of perf tracepoints that should be collected.",
              "required": false,
              "default": null
            },
            {
              "name": "disable_hardware_profilers",
              "type": "boolean",
              "doc": "Disable perf hardware profilers.",
              "required": false,
              "default": "false"
            },
            {
              "name": "hardware_profilers",
              "type": "list(string)",
              "doc": "Perf hardware profilers that should be collected.",
              "required": false,
              "default": null
            },
            {
              "name": "disable_software_profilers",
              "type": "boolean",
              "doc": "Disable perf software profilers.",
              "required": false,
              "default": "false"
            },
            {
              "name": "software_profilers",
              "type": "list(string)",
              "doc": "Perf software profilers that should be collected.",
              "required": false,
              "default": null
            },
            {
              "name": "disable_cache_profilers",
              "type": "boolean",
              "doc": "Disable perf cache profilers.",
              "required": false,
              "default": "false"
            },
            {
              "name": "cache_profilers",
              "type": "list(string)",
              "doc": "Perf cache profilers that should be collected.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "powersupply",
          "doc": "Configures the powersupply collector.",
          "required": false,
          "arguments": [
            {
              "name": "ignored_supplies",
              "type": "string",
              "doc": "Regexp of power supplies to ignore for the powersupplyclass collector.",
              "required": false,
              "default": "\"^$\""
            }
          ],
          "blocks": []
        },
        {
          "name": "runit",
          "doc": "Configures the runit collector.",
          "required": false,
          "arguments": [
            {
              "name": "service_dir",
              "type": "string",
              "doc": "Path to runit service directory.",
              "required": false,
              "default": "\"/etc/service\""
            }
          ],
          "blocks": []
        },
        {
          "name": "supervisord",
          "doc": "Configures the supervisord collector.",
          "required": false,
          "arguments": [
            {
              "name": "url",
              "type": "string",
              "doc": "XML RPC endpoint for the supervisord collector.",
              "required": false,
              "default": "\"http://localhost:9001/RPC2\""
            }
          ],
          "blocks": []
        },
        {
          "name": "sysctl",
          "doc": "Configures the sysctl collector.",
          "required": false,
          "arguments": [
            {
              "name": "include",
              "type": "list(string)",
              "doc": "Numeric sysctl values to expose.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "include_info",
              "type": "list(string)",
              "doc": "String sysctl values to expose.",
              "required": false,
              "default": "[]"
            }
          ],
          "blocks": []
        },
        {
          "name": "systemd",
          "doc": "Configures the systemd collector.",
          "required": false,
          "arguments": [
            {
              "name": "enable_restarts",
              "type": "boolean",
              "doc": "Enables service unit metric service_restart_total",
              "required": false,
              "default": "false"
            },
            {
              "name": "start_time",
              "type": "boolean",
              "doc": "Enables service unit metric unit_start_time_seconds",
              "required": false,
              "default": "false"
            },
            {
              "name": "task_metrics",
              "type": "boolean",
              "doc": "Enables service unit task metrics unit_tasks_current and unit_tasks_max.",
              "required": false,
              "default": "false"
            },
            {
              "name": "unit_include",
              "type": "string",
              "doc": "Regexp of systemd units to include. Units must both match include and not match exclude to be collected.",
              "required": false,
              "default": "\".+\""
            }
          ],
          "blocks": []
        },
        {
          "name": "tapestats",
          "doc": "Configures the tapestats collector.",
          "required": false,
          "arguments": [
            {
              "name": "ignored_devices",
              "type": "string",
              "doc": "Regexp of tapestats devices to ignore.",
              "required": false,
              "default": "\"^$\""
            }
          ],
          "blocks": []
        },
        {
          "name": "textfile",
          "doc": "Configures the textfile collector.",
          "required": false,
          "arguments": [
            {
              "name": "directory",
              "type": "string",
              "doc": "Directory to read *.prom files from for the textfile collector.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "vmstat",
          "doc": "Configures the vmstat collector.",
          "required": false,
          "arguments": [],
          "blocks": []
        }
      ]
    },
    "prometheus.exporter.windows": {
      "name": "prometheus.exporter.windows",
      "doc": "`prometheus.exporter.windows` component embeds\n[windows_exporter](https://github.com/prometheus-community/windows_exporter) which exposes a\nwide variety of hardware and OS metrics for Windows-based systems.",
      "arguments": [
        {
          "name": "enabled_collectors",
          "type": "list(string)",
          "doc": "List of collectors to enable.",
          "required": false,
          "default": "[\"cpu\",\"cs\",\"logical_disk\",\"net\",\"os\",\"service\",\"system\"]"
        },
        {
          "name": "timeout",
          "type": "duration",
          "doc": "Configure timeout for collecting metrics.",
          "required": false,
          "default": "4m"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "The targets that can be used to collect exporter metrics."
        }
      ],
      "blocks": [
        {
          "name": "dfsr",
          "doc": "Configures the dfsr collector.",
          "required": false,
          "arguments": [
            {
              "name": "source_enabled",
              "type": "list(string)",
              "doc": "Comma-separated list of DFSR Perflib sources to use.",
              "required": false,
              "default": "[\"connection\",\"folder\",\"volume\"]"
            }
          ],
          "blocks": []
        },
        {
          "name": "exchange",
          "doc": "Configures the exchange collector.",
          "required": false,
          "arguments": [
            {
              "name": "enabled_list",
              "type": "string",
              "doc": "Comma-separated list of collectors to use.",
              "required": false,
              "default": "\"\""
            }
          ],
          "blocks": []
        },
        {
          "name": "iis",
          "doc": "Configures the iis collector.",
          "required": false,
          "arguments": [
            {
              "name": "app_exclude",
              "type": "string",
              "doc": "Regular expression of applications to ignore.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "app_include",
              "type": "string",
              "doc": "Regular expression of applications to report on.",
              "required": false,
              "default": "\".*\""
            },
            {
              "name": "site_exclude",
              "type": "string",
              "doc": "Regular expression of sites to ignore.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "site_include",
              "type": "string",
              "doc": "Regular expression of sites to report on.",
              "required": false,
              "default": "\".*\""
            }
          ],
          "blocks": []
        },
        {
          "name": "logical_disk",
          "doc": "Configures the logical_disk collector.",
          "required": false,
          "arguments": [
            {
              "name": "exclude",
              "type": "string",
              "doc": "Regular expression of volumes to exclude.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "include",
              "type": "string",
              "doc": "Regular expression of volumes to include.",
              "required": false,
              "default": "\".+\""
            }
          ],
          "blocks": []
        },
        {
          "name": "msmq",
          "doc": "Configures the msmq collector.",
          "required": false,
          "arguments": [
            {
              "name": "where_clause",
              "type": "string",
              "doc": "WQL 'where' clause to use in WMI metrics query.",
              "required": false,
              "default": "\"\""
            }
          ],
          "blocks": []
        },
        {
          "name": "mssql",
          "doc": "Configures the mssql collector.",
          "required": false,
          "arguments": [
            {
              "name": "enabled_classes",
              "type": "list(string)",
              "doc": "Comma-separated list of MSSQL WMI classes to use.",
              "required": false,
              "default": "[\"accessmethods\", \"availreplica\", \"bufman\", \"databases\", \"dbreplica\", \"genstats\", \"locks\", \"memmgr\", \"sqlstats\", \"sqlerrors\", \"transactions\"]"
            }
          ],
          "blocks": []
        },
        {
          "name": "network",
          "doc": "Configures the network collector.",
          "required": false,
          "arguments": [
            {
              "name": "exclude",
              "type": "string",
              "doc": "Regular expression of NIC:s to exclude.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "include",
              "type": "string",
              "doc": "Regular expression of NIC:s to include.",
              "required": false,
              "default": "\".*\""
            }
          ],
          "blocks": []
        },
        {
          "name": "process",
          "doc": "Configures the process collector.",
          "required": false,
          "arguments": [
            {
              "name": "exclude",
              "type": "string",
              "doc": "Regular expression of processes to exclude.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "include",
              "type": "string",
              "doc": "Regular expression of processes to include.",
              "required": false,
              "default": "\".*\""
            }
          ],
          "blocks": []
        },
        {
          "name": "scheduled_task",
          "doc": "Configures the scheduled_task collector.",
          "required": false,
          "arguments": [
            {
              "name": "exclude",
              "type": "string",
              "doc": "Regexp of tasks to exclude.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "include",
              "type": "string",
              "doc": "Regexp of tasks to include.",
              "required": false,
              "default": "\".+\""
            }
          ],
          "blocks": []
        },
        {
          "name": "service",
          "doc": "Configures the service collector.",
          "required": false,
          "arguments": [
            {
              "name": "use_api",
              "type": "string",
              "doc": "Use API calls to collect service data instead of WMI.",
              "required": false,
              "default": "false"
            },
            {
              "name": "where_clause",
              "type": "string",
              "doc": "WQL 'where' clause to use in WMI metrics query.",
              "required": false,
              "default": "\"\""
            }
          ],
          "blocks": []
        },
        {
          "name": "smtp",
          "doc": "Configures the smtp collector.",
          "required": false,
          "arguments": [
            {
              "name": "exclude",
              "type": "string",
              "doc": "Regexp of virtual servers to ignore.",
              "required": false,
              "default": null
            },
            {
              "name": "include",
              "type": "string",
              "doc": "Regexp of virtual servers to include.",
              "required": false,
              "default": "\".+\""
            }
          ],
          "blocks": []
        },
        {
          "name": "text_file",
          "doc": "Configures the text_file collector.",
          "required": false,
          "arguments": [
            {
              "name": "text_file_directory",
              "type": "string",
              "doc": "The directory containing the files to be ingested.",
              "required": false,
              "default": "C:\\Program Files\\GrafanaLabs\\Alloy\\textfile_inputs"
            }
          ],
          "blocks": []
        }
      ]
    },
    "prometheus.operator.podmonitors": {
      "name": "prometheus.operator.podmonitors",
      "doc": "`prometheus.operator.podmonitors` discovers [PodMonitor](https://prometheus-operator.dev/docs/operator/api/#monitoring.coreos.com/v1.PodMonitor) resources in your kubernetes cluster and scrapes the targets they reference. This component performs three main functions:",
      "arguments": [
        {
          "name": "forward_to",
          "type": "list(MetricsReceiver)",
          "doc": "List of receivers to send scraped metrics to.",
          "required": true,
          "default": null
        },
        {
          "name": "namespaces",
          "type": "list(string)",
          "doc": "List of namespaces to search for PodMonitor resources. If not specified, all namespaces will be searched.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "client",
          "doc": "Configures Kubernetes client used to find PodMonitors.",
          "required": false,
          "arguments": [
            {
              "name": "api_server",
              "type": "string",
              "doc": "URL of the Kubernetes API server.",
              "required": false,
              "default": null
            },
            {
              "name": "kubeconfig_file",
              "type": "string",
              "doc": "Path of the kubeconfig file to use for connecting to Kubernetes.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token_file",
              "type": "string",
              "doc": "File containing a bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token",
              "type": "secret",
              "doc": "Bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "enable_http2",
              "type": "bool",
              "doc": "Whether HTTP2 is supported for requests.",
              "required": false,
              "default": "true"
            },
            {
              "name": "follow_redirects",
              "type": "bool",
              "doc": "Whether redirects returned by the server should be followed.",
              "required": false,
              "default": "true"
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "basic_auth",
              "doc": "Configure basic authentication to the Kubernetes API.",
              "required": false,
              "arguments": [
                {
                  "name": "password_file",
                  "type": "string",
                  "doc": "File containing the basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "password",
                  "type": "secret",
                  "doc": "Basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "username",
                  "type": "string",
                  "doc": "Basic auth username.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "authorization",
              "doc": "Configure generic authorization to the Kubernetes API.",
              "required": false,
              "arguments": [
                {
                  "name": "credentials_file",
                  "type": "string",
                  "doc": "File containing the secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "credentials",
                  "type": "secret",
                  "doc": "Secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "type",
                  "type": "string",
                  "doc": "Authorization type, for example, \"Bearer\".",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "oauth2",
              "doc": "Configure OAuth2 for authenticating to the Kubernetes API.",
              "required": false,
              "arguments": [
                {
                  "name": "client_id",
                  "type": "string",
                  "doc": "OAuth2 client ID.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret_file",
                  "type": "string",
                  "doc": "File containing the OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret",
                  "type": "secret",
                  "doc": "OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "endpoint_params",
                  "type": "map(string)",
                  "doc": "Optional parameters to append to the token URL.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_url",
                  "type": "string",
                  "doc": "HTTP proxy to send requests through.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "no_proxy",
                  "type": "string",
                  "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_from_environment",
                  "type": "bool",
                  "doc": "Use the proxy URL indicated by environment variables.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "proxy_connect_header",
                  "type": "map(list(secret))",
                  "doc": "Specifies headers to send to proxies during CONNECT requests.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "scopes",
                  "type": "list(string)",
                  "doc": "List of scopes to authenticate with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "token_url",
                  "type": "string",
                  "doc": "URL to fetch the token from.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": [
                {
                  "name": "tls_config",
                  "doc": "Configure TLS settings for connecting to the Kubernetes API.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "ca_pem",
                      "type": "string",
                      "doc": "CA PEM-encoded text to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "ca_file",
                      "type": "string",
                      "doc": "CA certificate to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_pem",
                      "type": "string",
                      "doc": "Certificate PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_file",
                      "type": "string",
                      "doc": "Certificate file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "insecure_skip_verify",
                      "type": "bool",
                      "doc": "Disables validation of the server certificate.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_file",
                      "type": "string",
                      "doc": "Key file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_pem",
                      "type": "secret",
                      "doc": "Key PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "min_version",
                      "type": "string",
                      "doc": "Minimum acceptable TLS version.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "server_name",
                      "type": "string",
                      "doc": "ServerName extension to indicate the name of the server.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                }
              ]
            },
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the Kubernetes API.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "rule",
          "doc": "Relabeling rules to apply to discovered targets.",
          "required": false,
          "arguments": [
            {
              "name": "action",
              "type": "string",
              "doc": "The relabeling action to perform.",
              "required": false,
              "default": "replace"
            },
            {
              "name": "modulus",
              "type": "uint",
              "doc": "A positive integer used to calculate the modulus of the hashed source label values.",
              "required": false,
              "default": null
            },
            {
              "name": "regex",
              "type": "string",
              "doc": "A valid RE2 expression with support for parenthesized capture groups. Used to match the extracted value from the combination of the source_label and separator fields or filter labels during the labelkeep/labeldrop/labelmap actions.",
              "required": false,
              "default": "(.*)"
            },
            {
              "name": "replacement",
              "type": "string",
              "doc": "The value against which a regular expression replace is performed, if the regular expression matches the extracted value. Supports previously captured groups.",
              "required": false,
              "default": "\"$1\""
            },
            {
              "name": "separator",
              "type": "string",
              "doc": "The separator used to concatenate the values present in source_labels.",
              "required": false,
              "default": ";"
            },
            {
              "name": "source_labels",
              "type": "list(string)",
              "doc": "The list of labels whose values are to be selected. Their content is concatenated using the separator and matched against regex.",
              "required": false,
              "default": null
            },
            {
              "name": "target_label",
              "type": "string",
              "doc": "Label to which the resulting value will be written to.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "scrape",
          "doc": "Default scrape configuration to apply to discovered targets.",
          "required": false,
          "arguments": [
            {
              "name": "default_scrape_interval",
              "type": "duration",
              "doc": "The default interval between scraping targets. Used as the default if the target resource doesn't provide a scrape interval.",
              "required": false,
              "default": "1m"
            },
            {
              "name": "default_scrape_timeout",
              "type": "duration",
              "doc": "The default timeout for scrape requests. Used as the default if the target resource doesn't provide a scrape timeout.",
              "required": false,
              "default": "10s"
            }
          ],
          "blocks": []
        },
        {
          "name": "selector",
          "doc": "Label selector for which PodMonitors to discover.",
          "required": false,
          "arguments": [
            {
              "name": "match_labels",
              "type": "map(string)",
              "doc": "Label keys and values used to discover resources.",
              "required": false,
              "default": "{}"
            }
          ],
          "blocks": [
            {
              "name": "match_expression",
              "doc": "Label selector expression for which PodMonitors to discover.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "The label name to match against.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "operator",
                  "type": "string",
                  "doc": "The operator to use when matching.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "values",
                  "type": "list(string)",
                  "doc": "The values used when matching.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "clustering",
          "doc": "Configure the component for when {{< param \"PRODUCT_NAME\" >}} is running in clustered mode.",
          "required": false,
          "arguments": [
            {
              "name": "enabled",
              "type": "bool",
              "doc": "Enables sharing targets with other cluster nodes.",
              "required": true,
              "default": "false"
            }
          ],
          "blocks": []
        }
      ]
    },
    "prometheus.operator.probes": {
      "name": "prometheus.operator.probes",
      "doc": "`prometheus.operator.probes` discovers [Probe](https://prometheus-operator.dev/docs/operator/api/#monitoring.coreos.com/v1.Probe) resources in your Kubernetes cluster and scrapes the targets they reference.\n This component performs three main functions:",
      "arguments": [
        {
          "name": "forward_to",
          "type": "list(MetricsReceiver)",
          "doc": "List of receivers to send scraped metrics to.",
          "required": true,
          "default": null
        },
        {
          "name": "namespaces",
          "type": "list(string)",
          "doc": "List of namespaces to search for Probe resources. If not specified, all namespaces will be searched.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "client",
          "doc": "Configures Kubernetes client used to find Probes.",
          "required": false,
          "arguments": [
            {
              "name": "api_server",
              "type": "string",
              "doc": "URL of the Kubernetes API server.",
              "required": false,
              "default": null
            },
            {
              "name": "kubeconfig_file",
              "type": "string",
              "doc": "Path of the kubeconfig file to use for connecting to Kubernetes.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token_file",
              "type": "string",
              "doc": "File containing a bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token",
              "type": "secret",
              "doc": "Bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "enable_http2",
              "type": "bool",
              "doc": "Whether HTTP2 is supported for requests.",
              "required": false,
              "default": "true"
            },
            {
              "name": "follow_redirects",
              "type": "bool",
              "doc": "Whether redirects returned by the server should be followed.",
              "required": false,
              "default": "true"
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "basic_auth",
              "doc": "Configure basic authentication to the Kubernetes API.",
              "required": false,
              "arguments": [
                {
                  "name": "password_file",
                  "type": "string",
                  "doc": "File containing the basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "password",
                  "type": "secret",
                  "doc": "Basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "username",
                  "type": "string",
                  "doc": "Basic auth username.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "authorization",
              "doc": "Configure generic authorization to the Kubernetes API.",
              "required": false,
              "arguments": [
                {
                  "name": "credentials_file",
                  "type": "string",
                  "doc": "File containing the secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "credentials",
                  "type": "secret",
                  "doc": "Secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "type",
                  "type": "string",
                  "doc": "Authorization type, for example, \"Bearer\".",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "oauth2",
              "doc": "Configure OAuth2 for authenticating to the Kubernetes API.",
              "required": false,
              "arguments": [
                {
                  "name": "client_id",
                  "type": "string",
                  "doc": "OAuth2 client ID.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret_file",
                  "type": "string",
                  "doc": "File containing the OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret",
                  "type": "secret",
                  "doc": "OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "endpoint_params",
                  "type": "map(string)",
                  "doc": "Optional parameters to append to the token URL.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_url",
                  "type": "string",
                  "doc": "HTTP proxy to send requests through.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "no_proxy",
                  "type": "string",
                  "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_from_environment",
                  "type": "bool",
                  "doc": "Use the proxy URL indicated by environment variables.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "proxy_connect_header",
                  "type": "map(list(secret))",
                  "doc": "Specifies headers to send to proxies during CONNECT requests.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "scopes",
                  "type": "list(string)",
                  "doc": "List of scopes to authenticate with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "token_url",
                  "type": "string",
                  "doc": "URL to fetch the token from.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": [
                {
                  "name": "tls_config",
                  "doc": "Configure TLS settings for connecting to the Kubernetes API.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "ca_pem",
                      "type": "string",
                      "doc": "CA PEM-encoded text to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "ca_file",
                      "type": "string",
                      "doc": "CA certificate to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_pem",
                      "type": "string",
                      "doc": "Certificate PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_file",
                      "type": "string",
                      "doc": "Certificate file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "insecure_skip_verify",
                      "type": "bool",
                      "doc": "Disables validation of the server certificate.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_file",
                      "type": "string",
                      "doc": "Key file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_pem",
                      "type": "secret",
                      "doc": "Key PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "min_version",
                      "type": "string",
                      "doc": "Minimum acceptable TLS version.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "server_name",
                      "type": "string",
                      "doc": "ServerName extension to indicate the name of the server.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                }
              ]
            },
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the Kubernetes API.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "rule",
          "doc": "Relabeling rules to apply to discovered targets.",
          "required": false,
          "arguments": [
            {
              "name": "action",
              "type": "string",
              "doc": "The relabeling action to perform.",
              "required": false,
              "default": "replace"
            },
            {
              "name": "modulus",
              "type": "uint",
              "doc": "A positive integer used to calculate the modulus of the hashed source label values.",
              "required": false,
              "default": null
            },
            {
              "name": "regex",
              "type": "string",
              "doc": "A valid RE2 expression with support for parenthesized capture groups. Used to match the extracted value from the combination of the source_label and separator fields or filter labels during the labelkeep/labeldrop/labelmap actions.",
              "required": false,
              "default": "(.*)"
            },
            {
              "name": "replacement",
              "type": "string",
              "doc": "The value against which a regular expression replace is performed, if the regular expression matches the extracted value. Supports previously captured groups.",
              "required": false,
              "default": "\"$1\""
            },
            {
              "name": "separator",
              "type": "string",
              "doc": "The separator used to concatenate the values present in source_labels.",
              "required": false,
              "default": ";"
            },
            {
              "name": "source_labels",
              "type": "list(string)",
              "doc": "The list of labels whose values are to be selected. Their content is concatenated using the separator and matched against regex.",
              "required": false,
              "default": null
            },
            {
              "name": "target_label",
              "type": "string",
              "doc": "Label to which the resulting value will be written to.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "scrape",
          "doc": "Default scrape configuration to apply to discovered targets.",
          "required": false,
          "arguments": [
            {
              "name": "default_scrape_interval",
              "type": "duration",
              "doc": "The default interval between scraping targets. Used as the default if the target resource doesn't provide a scrape interval.",
              "required": false,
              "default": "1m"
            },
            {
              "name": "default_scrape_timeout",
              "type": "duration",
              "doc": "The default timeout for scrape requests. Used as the default if the target resource doesn't provide a scrape timeout.",
              "required": false,
              "default": "10s"
            }
          ],
          "blocks": []
        },
        {
          "name": "selector",
          "doc": "Label selector for which Probes to discover.",
          "required": false,
          "arguments": [
            {
              "name": "match_labels",
              "type": "map(string)",
              "doc": "Label keys and values used to discover resources.",
              "required": false,
              "default": "{}"
            }
          ],
          "blocks": [
            {
              "name": "match_expression",
              "doc": "Label selector expression for which Probes to discover.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "The label name to match against.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "operator",
                  "type": "string",
                  "doc": "The operator to use when matching.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "values",
                  "type": "list(string)",
                  "doc": "The values used when matching.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "clustering",
          "doc": "Configure the component for when {{< param \"PRODUCT_NAME\" >}} is running in clustered mode.",
          "required": false,
          "arguments": [
            {
              "name": "enabled",
              "type": "bool",
              "doc": "Enables sharing targets with other cluster nodes.",
              "required": true,
              "default": "false"
            }
          ],
          "blocks": []
        }
      ]
    },
    "prometheus.operator.servicemonitors": {
      "name": "prometheus.operator.servicemonitors",
      "doc": "`prometheus.operator.servicemonitors` discovers [ServiceMonitor](https://prometheus-operator.dev/docs/operator/api/#monitoring.coreos.com/v1.ServiceMonitor) resources in your kubernetes cluster and scrapes the targets they reference. This component performs three main functions:",
      "arguments": [
        {
          "name": "forward_to",
          "type": "list(MetricsReceiver)",
          "doc": "List of receivers to send scraped metrics to.",
          "required": true,
          "default": null
        },
        {
          "name": "namespaces",
          "type": "list(string)",
          "doc": "List of namespaces to search for ServiceMonitor resources. If not specified, all namespaces will be searched.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "client",
          "doc": "Configures Kubernetes client used to find ServiceMonitors.",
          "required": false,
          "arguments": [
            {
              "name": "api_server",
              "type": "string",
              "doc": "URL of the Kubernetes API server.",
              "required": false,
              "default": null
            },
            {
              "name": "kubeconfig_file",
              "type": "string",
              "doc": "Path of the kubeconfig file to use for connecting to Kubernetes.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token_file",
              "type": "string",
              "doc": "File containing a bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token",
              "type": "secret",
              "doc": "Bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "enable_http2",
              "type": "bool",
              "doc": "Whether HTTP2 is supported for requests.",
              "required": false,
              "default": "true"
            },
            {
              "name": "follow_redirects",
              "type": "bool",
              "doc": "Whether redirects returned by the server should be followed.",
              "required": false,
              "default": "true"
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "basic_auth",
              "doc": "Configure basic authentication to the Kubernetes API.",
              "required": false,
              "arguments": [
                {
                  "name": "password_file",
                  "type": "string",
                  "doc": "File containing the basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "password",
                  "type": "secret",
                  "doc": "Basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "username",
                  "type": "string",
                  "doc": "Basic auth username.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "authorization",
              "doc": "Configure generic authorization to the Kubernetes API.",
              "required": false,
              "arguments": [
                {
                  "name": "credentials_file",
                  "type": "string",
                  "doc": "File containing the secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "credentials",
                  "type": "secret",
                  "doc": "Secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "type",
                  "type": "string",
                  "doc": "Authorization type, for example, \"Bearer\".",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "oauth2",
              "doc": "Configure OAuth2 for authenticating to the Kubernetes API.",
              "required": false,
              "arguments": [
                {
                  "name": "client_id",
                  "type": "string",
                  "doc": "OAuth2 client ID.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret_file",
                  "type": "string",
                  "doc": "File containing the OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret",
                  "type": "secret",
                  "doc": "OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "endpoint_params",
                  "type": "map(string)",
                  "doc": "Optional parameters to append to the token URL.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_url",
                  "type": "string",
                  "doc": "HTTP proxy to send requests through.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "no_proxy",
                  "type": "string",
                  "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_from_environment",
                  "type": "bool",
                  "doc": "Use the proxy URL indicated by environment variables.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "proxy_connect_header",
                  "type": "map(list(secret))",
                  "doc": "Specifies headers to send to proxies during CONNECT requests.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "scopes",
                  "type": "list(string)",
                  "doc": "List of scopes to authenticate with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "token_url",
                  "type": "string",
                  "doc": "URL to fetch the token from.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": [
                {
                  "name": "tls_config",
                  "doc": "Configure TLS settings for connecting to the Kubernetes API.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "ca_pem",
                      "type": "string",
                      "doc": "CA PEM-encoded text to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "ca_file",
                      "type": "string",
                      "doc": "CA certificate to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_pem",
                      "type": "string",
                      "doc": "Certificate PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_file",
                      "type": "string",
                      "doc": "Certificate file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "insecure_skip_verify",
                      "type": "bool",
                      "doc": "Disables validation of the server certificate.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_file",
                      "type": "string",
                      "doc": "Key file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_pem",
                      "type": "secret",
                      "doc": "Key PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "min_version",
                      "type": "string",
                      "doc": "Minimum acceptable TLS version.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "server_name",
                      "type": "string",
                      "doc": "ServerName extension to indicate the name of the server.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                }
              ]
            },
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the Kubernetes API.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "rule",
          "doc": "Relabeling rules to apply to discovered targets.",
          "required": false,
          "arguments": [
            {
              "name": "action",
              "type": "string",
              "doc": "The relabeling action to perform.",
              "required": false,
              "default": "replace"
            },
            {
              "name": "modulus",
              "type": "uint",
              "doc": "A positive integer used to calculate the modulus of the hashed source label values.",
              "required": false,
              "default": null
            },
            {
              "name": "regex",
              "type": "string",
              "doc": "A valid RE2 expression with support for parenthesized capture groups. Used to match the extracted value from the combination of the source_label and separator fields or filter labels during the labelkeep/labeldrop/labelmap actions.",
              "required": false,
              "default": "(.*)"
            },
            {
              "name": "replacement",
              "type": "string",
              "doc": "The value against which a regular expression replace is performed, if the regular expression matches the extracted value. Supports previously captured groups.",
              "required": false,
              "default": "\"$1\""
            },
            {
              "name": "separator",
              "type": "string",
              "doc": "The separator used to concatenate the values present in source_labels.",
              "required": false,
              "default": ";"
            },
            {
              "name": "source_labels",
              "type": "list(string)",
              "doc": "The list of labels whose values are to be selected. Their content is concatenated using the separator and matched against regex.",
              "required": false,
              "default": null
            },
            {
              "name": "target_label",
              "type": "string",
              "doc": "Label to which the resulting value will be written to.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "scrape",
          "doc": "Default scrape configuration to apply to discovered targets.",
          "required": false,
          "arguments": [
            {
              "name": "default_scrape_interval",
              "type": "duration",
              "doc": "The default interval between scraping targets. Used as the default if the target resource doesn't provide a scrape interval.",
              "required": false,
              "default": "1m"
            },
            {
              "name": "default_scrape_timeout",
              "type": "duration",
              "doc": "The default timeout for scrape requests. Used as the default if the target resource doesn't provide a scrape timeout.",
              "required": false,
              "default": "10s"
            }
          ],
          "blocks": []
        },
        {
          "name": "selector",
          "doc": "Label selector for which ServiceMonitors to discover.",
          "required": false,
          "arguments": [
            {
              "name": "match_labels",
              "type": "map(string)",
              "doc": "Label keys and values used to discover resources.",
              "required": false,
              "default": "{}"
            }
          ],
          "blocks": [
            {
              "name": "match_expression",
              "doc": "Label selector expression for which ServiceMonitors to discover.",
              "required": false,
              "arguments": [
                {
                  "name": "key",
                  "type": "string",
                  "doc": "The label name to match against.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "operator",
                  "type": "string",
                  "doc": "The operator to use when matching.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "values",
                  "type": "list(string)",
                  "doc": "The values used when matching.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "clustering",
          "doc": "Configure the component for when {{< param \"PRODUCT_NAME\" >}} is running in clustered mode.",
          "required": false,
          "arguments": [
            {
              "name": "enabled",
              "type": "bool",
              "doc": "Enables sharing targets with other cluster nodes.",
              "required": true,
              "default": "false"
            }
          ],
          "blocks": []
        }
      ]
    },
    "prometheus.receive_http": {
      "name": "prometheus.receive_http",
      "doc": "`prometheus.receive_http` listens for HTTP requests containing Prometheus metric samples and forwards them to other components capable of receiving metrics.",
      "arguments": [
        {
          "name": "forward_to",
          "type": "list(MetricsReceiver)",
          "doc": "List of receivers to send metrics to.",
          "required": true,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "http",
          "doc": "Configures the HTTP server that receives requests.",
          "required": false,
          "arguments": [
            {
              "name": "conn_limit",
              "type": "int",
              "doc": "Maximum number of simultaneous HTTP connections. Defaults to no limit.",
              "required": false,
              "default": "0"
            },
            {
              "name": "listen_address",
              "type": "string",
              "doc": "Network address on which the server listens for new connections. Defaults to accepting all incoming connections.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "listen_port",
              "type": "int",
              "doc": "Port number on which the server listens for new connections.",
              "required": false,
              "default": "8080"
            },
            {
              "name": "server_idle_timeout",
              "type": "duration",
              "doc": "Idle timeout for HTTP server.",
              "required": false,
              "default": "\"120s\""
            },
            {
              "name": "server_read_timeout",
              "type": "duration",
              "doc": "Read timeout for HTTP server.",
              "required": false,
              "default": "\"30s\""
            },
            {
              "name": "server_write_timeout",
              "type": "duration",
              "doc": "Write timeout for HTTP server.",
              "required": false,
              "default": "\"30s\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "prometheus.relabel": {
      "name": "prometheus.relabel",
      "doc": "`prometheus.relabel` component rewrites the label set of each metric passed\nalong to the exported receiver by applying one or more relabeling `rule`s. If\nno rules are defined or applicable to some metrics, then those metrics are\nforwarded as-is to each receiver passed in the component's arguments. If no\nlabels remain after the relabeling rules are applied, then the metric is\ndropped.",
      "arguments": [
        {
          "name": "forward_to",
          "type": "list(MetricsReceiver)",
          "doc": "Where the metrics should be forwarded to, after relabeling takes place.",
          "required": true,
          "default": null
        },
        {
          "name": "max_cache_size",
          "type": "int",
          "doc": "The maximum number of elements to hold in the relabeling cache.",
          "required": false,
          "default": "100,000"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "receiver",
          "type": "MetricsReceiver",
          "doc": "The input receiver where samples are sent to be relabeled."
        },
        {
          "name": "rules",
          "type": "RelabelRules",
          "doc": "The currently configured relabeling rules."
        }
      ],
      "blocks": [
        {
          "name": "rule",
          "doc": "Relabeling rules to apply to received metrics.",
          "required": false,
          "arguments": [
            {
              "name": "action",
              "type": "string",
              "doc": "The relabeling action to perform.",
              "required": false,
              "default": "replace"
            },
            {
              "name": "modulus",
              "type": "uint",
              "doc": "A positive integer used to calculate the modulus of the hashed source label values.",
              "required": false,
              "default": null
            },
            {
              "name": "regex",
              "type": "string",
              "doc": "A valid RE2 expression with support for parenthesized capture groups. Used to match the extracted value from the combination of the source_label and separator fields or filter labels during the labelkeep/labeldrop/labelmap actions.",
              "required": false,
              "default": "(.*)"
            },
            {
              "name": "replacement",
              "type": "string",
              "doc": "The value against which a regular expression replace is performed, if the regular expression matches the extracted value. Supports previously captured groups.",
              "required": false,
              "default": "\"$1\""
            },
            {
              "name": "separator",
              "type": "string",
              "doc": "The separator used to concatenate the values present in source_labels.",
              "required": false,
              "default": ";"
            },
            {
              "name": "source_labels",
              "type": "list(string)",
              "doc": "The list of labels whose values are to be selected. Their content is concatenated using the separator and matched against regex.",
              "required": false,
              "default": null
            },
            {
              "name": "target_label",
              "type": "string",
              "doc": "Label to which the resulting value will be written to.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "prometheus.remote_write": {
      "name": "prometheus.remote_write",
      "doc": "`prometheus.remote_write` collects metrics sent from other components into a\nWrite-Ahead Log (WAL) and forwards them over the network to a series of\nuser-supplied endpoints. Metrics are sent over the network using the\n[Prometheus Remote Write protocol][remote_write-spec].",
      "arguments": [
        {
          "name": "external_labels",
          "type": "map(string)",
          "doc": "Labels to add to metrics sent over the network.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "receiver",
          "type": "MetricsReceiver",
          "doc": "A value which other components can use to send metrics to."
        }
      ],
      "blocks": [
        {
          "name": "endpoint",
          "doc": "Location to send metrics to.",
          "required": false,
          "arguments": [
            {
              "name": "url",
              "type": "string",
              "doc": "Full URL to send metrics to.",
              "required": true,
              "default": null
            },
            {
              "name": "name",
              "type": "string",
              "doc": "Optional name to identify the endpoint in metrics.",
              "required": false,
              "default": null
            },
            {
              "name": "remote_timeout",
              "type": "duration",
              "doc": "Timeout for requests made to the URL.",
              "required": false,
              "default": "\"30s\""
            },
            {
              "name": "headers",
              "type": "map(string)",
              "doc": "Extra headers to deliver with the request.",
              "required": false,
              "default": null
            },
            {
              "name": "send_exemplars",
              "type": "bool",
              "doc": "Whether exemplars should be sent.",
              "required": false,
              "default": "true"
            },
            {
              "name": "send_native_histograms",
              "type": "bool",
              "doc": "Whether native histograms should be sent.",
              "required": false,
              "default": "false"
            },
            {
              "name": "bearer_token_file",
              "type": "string",
              "doc": "File containing a bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token",
              "type": "secret",
              "doc": "Bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "enable_http2",
              "type": "bool",
              "doc": "Whether HTTP2 is supported for requests.",
              "required": false,
              "default": "true"
            },
            {
              "name": "follow_redirects",
              "type": "bool",
              "doc": "Whether redirects returned by the server should be followed.",
              "required": false,
              "default": "true"
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "basic_auth",
              "doc": "Configure basic_auth for authenticating to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "password_file",
                  "type": "string",
                  "doc": "File containing the basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "password",
                  "type": "secret",
                  "doc": "Basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "username",
                  "type": "string",
                  "doc": "Basic auth username.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "authorization",
              "doc": "Configure generic authorization to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "credentials_file",
                  "type": "string",
                  "doc": "File containing the secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "credentials",
                  "type": "secret",
                  "doc": "Secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "type",
                  "type": "string",
                  "doc": "Authorization type, for example, \"Bearer\".",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "oauth2",
              "doc": "Configure OAuth2 for authenticating to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "client_id",
                  "type": "string",
                  "doc": "OAuth2 client ID.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret_file",
                  "type": "string",
                  "doc": "File containing the OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret",
                  "type": "secret",
                  "doc": "OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "endpoint_params",
                  "type": "map(string)",
                  "doc": "Optional parameters to append to the token URL.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_url",
                  "type": "string",
                  "doc": "HTTP proxy to send requests through.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "no_proxy",
                  "type": "string",
                  "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_from_environment",
                  "type": "bool",
                  "doc": "Use the proxy URL indicated by environment variables.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "proxy_connect_header",
                  "type": "map(list(secret))",
                  "doc": "Specifies headers to send to proxies during CONNECT requests.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "scopes",
                  "type": "list(string)",
                  "doc": "List of scopes to authenticate with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "token_url",
                  "type": "string",
                  "doc": "URL to fetch the token from.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": [
                {
                  "name": "tls_config",
                  "doc": "Configure TLS settings for connecting to the endpoint.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "ca_pem",
                      "type": "string",
                      "doc": "CA PEM-encoded text to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "ca_file",
                      "type": "string",
                      "doc": "CA certificate to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_pem",
                      "type": "string",
                      "doc": "Certificate PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_file",
                      "type": "string",
                      "doc": "Certificate file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "insecure_skip_verify",
                      "type": "bool",
                      "doc": "Disables validation of the server certificate.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_file",
                      "type": "string",
                      "doc": "Key file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_pem",
                      "type": "secret",
                      "doc": "Key PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "min_version",
                      "type": "string",
                      "doc": "Minimum acceptable TLS version.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "server_name",
                      "type": "string",
                      "doc": "ServerName extension to indicate the name of the server.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                }
              ]
            },
            {
              "name": "sigv4",
              "doc": "Configure AWS Signature Verification 4 for authenticating to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "access_key",
                  "type": "string",
                  "doc": "AWS API access key.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "profile",
                  "type": "string",
                  "doc": "Named AWS profile used to authenticate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "region",
                  "type": "string",
                  "doc": "AWS region.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "role_arn",
                  "type": "string",
                  "doc": "AWS Role ARN, an alternative to using AWS API keys.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "secret_key",
                  "type": "secret",
                  "doc": "AWS API secret key.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "azuread",
              "doc": "Configure AzureAD for authenticating to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "cloud",
                  "type": "string",
                  "doc": "The Azure Cloud.",
                  "required": false,
                  "default": "\"AzurePublic\""
                }
              ],
              "blocks": [
                {
                  "name": "managed_identity",
                  "doc": "Configure Azure user-assigned managed identity.",
                  "required": true,
                  "arguments": [
                    {
                      "name": "client_id",
                      "type": "string",
                      "doc": "Client ID of the managed identity used to authenticate.",
                      "required": true,
                      "default": null
                    }
                  ],
                  "blocks": []
                }
              ]
            },
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "queue_config",
              "doc": "Configuration for how metrics are batched before sending.",
              "required": false,
              "arguments": [
                {
                  "name": "capacity",
                  "type": "number",
                  "doc": "Number of samples to buffer per shard.",
                  "required": false,
                  "default": "10000"
                },
                {
                  "name": "min_shards",
                  "type": "number",
                  "doc": "Minimum amount of concurrent shards sending samples to the endpoint.",
                  "required": false,
                  "default": "1"
                },
                {
                  "name": "max_shards",
                  "type": "number",
                  "doc": "Maximum number of concurrent shards sending samples to the endpoint.",
                  "required": false,
                  "default": "50"
                },
                {
                  "name": "max_samples_per_send",
                  "type": "number",
                  "doc": "Maximum number of samples per send.",
                  "required": false,
                  "default": "2000"
                },
                {
                  "name": "batch_send_deadline",
                  "type": "duration",
                  "doc": "Maximum time samples will wait in the buffer before sending.",
                  "required": false,
                  "default": "\"5s\""
                },
                {
                  "name": "min_backoff",
                  "type": "duration",
                  "doc": "Initial retry delay. The backoff time gets doubled for each retry.",
                  "required": false,
                  "default": "\"30ms\""
                },
                {
                  "name": "max_backoff",
                  "type": "duration",
                  "doc": "Maximum retry delay.",
                  "required": false,
                  "default": "\"5s\""
                },
                {
                  "name": "retry_on_http_429",
                  "type": "bool",
                  "doc": "Retry when an HTTP 429 status code is received.",
                  "required": false,
                  "default": "true"
                },
                {
                  "name": "sample_age_limit",
                  "type": "duration",
                  "doc": "Maximum age of samples to send.",
                  "required": false,
                  "default": "\"0s\""
                }
              ],
              "blocks": []
            },
            {
              "name": "metadata_config",
              "doc": "Configuration for how metric metadata is sent.",
              "required": false,
              "arguments": [
                {
                  "name": "send",
                  "type": "bool",
                  "doc": "Controls whether metric metadata is sent to the endpoint.",
                  "required": false,
                  "default": "true"
                },
                {
                  "name": "send_interval",
                  "type": "duration",
                  "doc": "How frequently metric metadata is sent to the endpoint.",
                  "required": false,
                  "default": "\"1m\""
                },
                {
                  "name": "max_samples_per_send",
                  "type": "number",
                  "doc": "Maximum number of metadata samples to send to the endpoint at once.",
                  "required": false,
                  "default": "2000"
                }
              ],
              "blocks": []
            },
            {
              "name": "write_relabel_config",
              "doc": "Configuration for write_relabel_config.",
              "required": false,
              "arguments": [
                {
                  "name": "action",
                  "type": "string",
                  "doc": "The relabeling action to perform.",
                  "required": false,
                  "default": "replace"
                },
                {
                  "name": "modulus",
                  "type": "uint",
                  "doc": "A positive integer used to calculate the modulus of the hashed source label values.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "regex",
                  "type": "string",
                  "doc": "A valid RE2 expression with support for parenthesized capture groups. Used to match the extracted value from the combination of the source_label and separator fields or filter labels during the labelkeep/labeldrop/labelmap actions.",
                  "required": false,
                  "default": "(.*)"
                },
                {
                  "name": "replacement",
                  "type": "string",
                  "doc": "The value against which a regular expression replace is performed, if the regular expression matches the extracted value. Supports previously captured groups.",
                  "required": false,
                  "default": "\"$1\""
                },
                {
                  "name": "separator",
                  "type": "string",
                  "doc": "The separator used to concatenate the values present in source_labels.",
                  "required": false,
                  "default": ";"
                },
                {
                  "name": "source_labels",
                  "type": "list(string)",
                  "doc": "The list of labels whose values are to be selected. Their content is concatenated using the separator and matched against regex.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "target_label",
                  "type": "string",
                  "doc": "Label to which the resulting value will be written to.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "wal",
          "doc": "Configuration for the component's WAL.",
          "required": false,
          "arguments": [
            {
              "name": "truncate_frequency",
              "type": "duration",
              "doc": "How frequently to clean up the WAL.",
              "required": false,
              "default": "\"2h\""
            },
            {
              "name": "min_keepalive_time",
              "type": "duration",
              "doc": "Minimum time to keep data in the WAL before it can be removed.",
              "required": false,
              "default": "\"5m\""
            },
            {
              "name": "max_keepalive_time",
              "type": "duration",
              "doc": "Maximum time to keep data in the WAL before removing it.",
              "required": false,
              "default": "\"8h\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "prometheus.scrape": {
      "name": "prometheus.scrape",
      "doc": "`prometheus.scrape` configures a Prometheus scraping job for a given set of\n`targets`. The scraped metrics are forwarded to the list of receivers passed in\n`forward_to`.",
      "arguments": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "List of targets to scrape.",
          "required": true,
          "default": null
        },
        {
          "name": "forward_to",
          "type": "list(MetricsReceiver)",
          "doc": "List of receivers to send scraped metrics to.",
          "required": true,
          "default": null
        },
        {
          "name": "job_name",
          "type": "string",
          "doc": "The value to use for the job label if not already set.",
          "required": false,
          "default": "component name"
        },
        {
          "name": "extra_metrics",
          "type": "bool",
          "doc": "Whether extra metrics should be generated for scrape targets.",
          "required": false,
          "default": "false"
        },
        {
          "name": "enable_protobuf_negotiation",
          "type": "bool",
          "doc": "Deprecated: use scrape_protocols instead.",
          "required": false,
          "default": "false"
        },
        {
          "name": "honor_labels",
          "type": "bool",
          "doc": "Indicator whether the scraped metrics should remain unmodified.",
          "required": false,
          "default": "false"
        },
        {
          "name": "honor_timestamps",
          "type": "bool",
          "doc": "Indicator whether the scraped timestamps should be respected.",
          "required": false,
          "default": "true"
        },
        {
          "name": "track_timestamps_staleness",
          "type": "bool",
          "doc": "Indicator whether to track the staleness of the scraped timestamps.",
          "required": false,
          "default": "false"
        },
        {
          "name": "params",
          "type": "map(list(string))",
          "doc": "A set of query parameters with which the target is scraped.",
          "required": false,
          "default": null
        },
        {
          "name": "scrape_classic_histograms",
          "type": "bool",
          "doc": "Whether to scrape a classic histogram that is also exposed as a native histogram.",
          "required": false,
          "default": "false"
        },
        {
          "name": "scrape_interval",
          "type": "duration",
          "doc": "How frequently to scrape the targets of this scrape configuration.",
          "required": false,
          "default": "\"60s\""
        },
        {
          "name": "scrape_timeout",
          "type": "duration",
          "doc": "The timeout for scraping targets of this configuration.",
          "required": false,
          "default": "\"10s\""
        },
        {
          "name": "scrape_protocols",
          "type": "list(string)",
          "doc": "The protocols to negotiate during a scrape, in order of preference. See below for available values.",
          "required": false,
          "default": "[\"OpenMetricsText1.0.0\", \"OpenMetricsText0.0.1\", \"PrometheusText0.0.4\"]"
        },
        {
          "name": "metrics_path",
          "type": "string",
          "doc": "The HTTP resource path on which to fetch metrics from targets.",
          "required": false,
          "default": "/metrics"
        },
        {
          "name": "scheme",
          "type": "string",
          "doc": "The URL scheme with which to fetch metrics from targets.",
          "required": false,
          "default": null
        },
        {
          "name": "body_size_limit",
          "type": "int",
          "doc": "An uncompressed response body larger than this many bytes causes the scrape to fail. 0 means no limit.",
          "required": false,
          "default": null
        },
        {
          "name": "sample_limit",
          "type": "uint",
          "doc": "More than this many samples post metric-relabeling causes the scrape to fail",
          "required": false,
          "default": null
        },
        {
          "name": "target_limit",
          "type": "uint",
          "doc": "More than this many targets after the target relabeling causes the scrapes to fail.",
          "required": false,
          "default": null
        },
        {
          "name": "label_limit",
          "type": "uint",
          "doc": "More than this many labels post metric-relabeling causes the scrape to fail.",
          "required": false,
          "default": null
        },
        {
          "name": "label_name_length_limit",
          "type": "uint",
          "doc": "More than this label name length post metric-relabeling causes the scrape to fail.",
          "required": false,
          "default": null
        },
        {
          "name": "label_value_length_limit",
          "type": "uint",
          "doc": "More than this label value length post metric-relabeling causes the scrape to fail.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token_file",
          "type": "string",
          "doc": "File containing a bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token",
          "type": "secret",
          "doc": "Bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to targets.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "authorization",
          "doc": "Configure generic authorization to targets.",
          "required": false,
          "arguments": [
            {
              "name": "credentials_file",
              "type": "string",
              "doc": "File containing the secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "credentials",
              "type": "secret",
              "doc": "Secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Authorization type, for example, \"Bearer\".",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "oauth2",
          "doc": "Configure OAuth2 for authenticating to targets.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "OAuth2 client ID.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret_file",
              "type": "string",
              "doc": "File containing the OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret",
              "type": "secret",
              "doc": "OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint_params",
              "type": "map(string)",
              "doc": "Optional parameters to append to the token URL.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            },
            {
              "name": "scopes",
              "type": "list(string)",
              "doc": "List of scopes to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "token_url",
              "type": "string",
              "doc": "URL to fetch the token from.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to targets via OAuth2.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to targets.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "clustering",
          "doc": "Configure the component for when {{< param \"PRODUCT_NAME\" >}} is running in clustered mode.",
          "required": false,
          "arguments": [
            {
              "name": "enabled",
              "type": "bool",
              "doc": "Enables sharing targets with other cluster nodes.",
              "required": true,
              "default": "false"
            }
          ],
          "blocks": []
        }
      ]
    }
  },
  "pyroscope": {
    "pyroscope.ebpf": {
      "name": "pyroscope.ebpf",
      "doc": "`pyroscope.ebpf` configures an ebpf profiling job for the current host.\nThe collected performance profiles are forwarded to the list of receivers passed in `forward_to`.",
      "arguments": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "List of targets to group profiles by container id",
          "required": true,
          "default": null
        },
        {
          "name": "forward_to",
          "type": "list(ProfilesReceiver)",
          "doc": "List of receivers to send collected profiles to.",
          "required": true,
          "default": null
        },
        {
          "name": "collect_interval",
          "type": "duration",
          "doc": "How frequently to collect profiles",
          "required": false,
          "default": "15s"
        },
        {
          "name": "sample_rate",
          "type": "int",
          "doc": "How many times per second to collect profile samples",
          "required": false,
          "default": "97"
        },
        {
          "name": "pid_cache_size",
          "type": "int",
          "doc": "The size of the pid -> proc symbols table LRU cache",
          "required": false,
          "default": "32"
        },
        {
          "name": "build_id_cache_size",
          "type": "int",
          "doc": "The size of the elf file build id -> symbols table LRU cache",
          "required": false,
          "default": "64"
        },
        {
          "name": "same_file_cache_size",
          "type": "int",
          "doc": "The size of the elf file -> symbols table LRU cache",
          "required": false,
          "default": "8"
        },
        {
          "name": "container_id_cache_size",
          "type": "int",
          "doc": "The size of the pid -> container ID table LRU cache",
          "required": false,
          "default": "1024"
        },
        {
          "name": "collect_user_profile",
          "type": "bool",
          "doc": "A flag to enable/disable collection of userspace profiles",
          "required": false,
          "default": "true"
        },
        {
          "name": "collect_kernel_profile",
          "type": "bool",
          "doc": "A flag to enable/disable collection of kernelspace profiles",
          "required": false,
          "default": "true"
        },
        {
          "name": "demangle",
          "type": "string",
          "doc": "C++ demangle mode. Available options are: none, simplified, templates, full",
          "required": false,
          "default": "none"
        },
        {
          "name": "python_enabled",
          "type": "bool",
          "doc": "A flag to enable/disable python profiling",
          "required": false,
          "default": "true"
        },
        {
          "name": "symbols_map_size",
          "type": "int",
          "doc": "The size of eBPF symbols map",
          "required": false,
          "default": "16384"
        },
        {
          "name": "pid_map_size",
          "type": "int",
          "doc": "The size of eBPF PID map",
          "required": false,
          "default": "2048"
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": []
    },
    "pyroscope.java": {
      "name": "pyroscope.java",
      "doc": "`pyroscope.java` continuously profiles Java processes running on the local Linux OS using [async-profiler](https://github.com/async-profiler/async-profiler).",
      "arguments": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "List of java process targets to profile.",
          "required": true,
          "default": null
        },
        {
          "name": "forward_to",
          "type": "list(ProfilesReceiver)",
          "doc": "List of receivers to send collected profiles to.",
          "required": true,
          "default": null
        },
        {
          "name": "tmp_dir",
          "type": "string",
          "doc": "Temporary directory to store async-profiler.",
          "required": false,
          "default": "/tmp"
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "profiling_config",
          "doc": "Describes java profiling configuration.",
          "required": false,
          "arguments": [
            {
              "name": "interval",
              "type": "duration",
              "doc": "How frequently to collect profiles from the targets.",
              "required": false,
              "default": "\"60s\""
            },
            {
              "name": "cpu",
              "type": "bool",
              "doc": "A flag to enable cpu profiling, using itimer async-profiler event.",
              "required": false,
              "default": "true"
            },
            {
              "name": "sample_rate",
              "type": "int",
              "doc": "CPU profiling sample rate. It is converted from Hz to interval and passed as -i arg to async-profiler.",
              "required": false,
              "default": "100"
            },
            {
              "name": "alloc",
              "type": "string",
              "doc": "Allocation profiling sampling configuration  It is passed as --alloc arg to async-profiler.",
              "required": false,
              "default": "\"512k\""
            },
            {
              "name": "lock",
              "type": "string",
              "doc": "Lock profiling sampling configuration. It is passed as --lock arg to async-profiler.",
              "required": false,
              "default": "\"10ms\""
            }
          ],
          "blocks": []
        }
      ]
    },
    "pyroscope.scrape": {
      "name": "pyroscope.scrape",
      "doc": "`pyroscope.scrape` collects [pprof] performance profiles for a given set of HTTP `targets`.",
      "arguments": [
        {
          "name": "targets",
          "type": "list(map(string))",
          "doc": "List of targets to scrape.",
          "required": true,
          "default": null
        },
        {
          "name": "forward_to",
          "type": "list(ProfilesReceiver)",
          "doc": "List of receivers to send scraped profiles to.",
          "required": true,
          "default": null
        },
        {
          "name": "job_name",
          "type": "string",
          "doc": "The job name to override the job label with.",
          "required": false,
          "default": "component name"
        },
        {
          "name": "params",
          "type": "map(list(string))",
          "doc": "A set of query parameters with which the target is scraped.",
          "required": false,
          "default": null
        },
        {
          "name": "scrape_interval",
          "type": "duration",
          "doc": "How frequently to scrape the targets of this scrape configuration.",
          "required": false,
          "default": "\"15s\""
        },
        {
          "name": "scrape_timeout",
          "type": "duration",
          "doc": "The timeout for scraping targets of this configuration. Must be larger than scrape_interval.",
          "required": false,
          "default": "\"18s\""
        },
        {
          "name": "delta_profiling_duration",
          "type": "duration",
          "doc": "The duration for a delta profiling to be scraped. Must be larger than 1 second.",
          "required": false,
          "default": "\"14s\""
        },
        {
          "name": "scheme",
          "type": "string",
          "doc": "The URL scheme with which to fetch metrics from targets.",
          "required": false,
          "default": "\"http\""
        },
        {
          "name": "bearer_token_file",
          "type": "string",
          "doc": "File containing a bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "bearer_token",
          "type": "secret",
          "doc": "Bearer token to authenticate with.",
          "required": false,
          "default": null
        },
        {
          "name": "enable_http2",
          "type": "bool",
          "doc": "Whether HTTP2 is supported for requests.",
          "required": false,
          "default": "true"
        },
        {
          "name": "follow_redirects",
          "type": "bool",
          "doc": "Whether redirects returned by the server should be followed.",
          "required": false,
          "default": "true"
        },
        {
          "name": "proxy_url",
          "type": "string",
          "doc": "HTTP proxy to send requests through.",
          "required": false,
          "default": null
        },
        {
          "name": "no_proxy",
          "type": "string",
          "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
          "required": false,
          "default": null
        },
        {
          "name": "proxy_from_environment",
          "type": "bool",
          "doc": "Use the proxy URL indicated by environment variables.",
          "required": false,
          "default": "false"
        },
        {
          "name": "proxy_connect_header",
          "type": "map(list(secret))",
          "doc": "Specifies headers to send to proxies during CONNECT requests.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to targets.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "authorization",
          "doc": "Configure generic authorization to targets.",
          "required": false,
          "arguments": [
            {
              "name": "credentials_file",
              "type": "string",
              "doc": "File containing the secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "credentials",
              "type": "secret",
              "doc": "Secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Authorization type, for example, \"Bearer\".",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "oauth2",
          "doc": "Configure OAuth2 for authenticating to targets.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "OAuth2 client ID.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret_file",
              "type": "string",
              "doc": "File containing the OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret",
              "type": "secret",
              "doc": "OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint_params",
              "type": "map(string)",
              "doc": "Optional parameters to append to the token URL.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            },
            {
              "name": "scopes",
              "type": "list(string)",
              "doc": "List of scopes to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "token_url",
              "type": "string",
              "doc": "URL to fetch the token from.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to targets via OAuth2.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to targets.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "profiling_config",
          "doc": "Configure profiling settings for the scrape job.",
          "required": false,
          "arguments": [
            {
              "name": "path_prefix",
              "type": "string",
              "doc": "The path prefix to use when scraping targets.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "profile.memory",
              "doc": "Collect memory profiles.",
              "required": false,
              "arguments": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "doc": "Enable this profile type to be scraped.",
                  "required": false,
                  "default": "true"
                },
                {
                  "name": "path",
                  "type": "string",
                  "doc": "The path to the profile type on the target.",
                  "required": false,
                  "default": "\"/debug/pprof/allocs\""
                },
                {
                  "name": "delta",
                  "type": "boolean",
                  "doc": "Whether to scrape the profile as a delta.",
                  "required": false,
                  "default": "false"
                }
              ],
              "blocks": []
            },
            {
              "name": "profile.block",
              "doc": "Collect profiles on blocks.",
              "required": false,
              "arguments": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "doc": "Enable this profile type to be scraped.",
                  "required": false,
                  "default": "true"
                },
                {
                  "name": "path",
                  "type": "string",
                  "doc": "The path to the profile type on the target.",
                  "required": false,
                  "default": "\"/debug/pprof/block\""
                },
                {
                  "name": "delta",
                  "type": "boolean",
                  "doc": "Whether to scrape the profile as a delta.",
                  "required": false,
                  "default": "false"
                }
              ],
              "blocks": []
            },
            {
              "name": "profile.goroutine",
              "doc": "Collect goroutine profiles.",
              "required": false,
              "arguments": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "doc": "Enable this profile type to be scraped.",
                  "required": false,
                  "default": "true"
                },
                {
                  "name": "path",
                  "type": "string",
                  "doc": "The path to the profile type on the target.",
                  "required": false,
                  "default": "\"/debug/pprof/goroutine\""
                },
                {
                  "name": "delta",
                  "type": "boolean",
                  "doc": "Whether to scrape the profile as a delta.",
                  "required": false,
                  "default": "false"
                }
              ],
              "blocks": []
            },
            {
              "name": "profile.mutex",
              "doc": "Collect mutex profiles.",
              "required": false,
              "arguments": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "doc": "Enable this profile type to be scraped.",
                  "required": false,
                  "default": "true"
                },
                {
                  "name": "path",
                  "type": "string",
                  "doc": "The path to the profile type on the target.",
                  "required": false,
                  "default": "\"/debug/pprof/mutex\""
                },
                {
                  "name": "delta",
                  "type": "boolean",
                  "doc": "Whether to scrape the profile as a delta.",
                  "required": false,
                  "default": "false"
                }
              ],
              "blocks": []
            },
            {
              "name": "profile.process_cpu",
              "doc": "Collect CPU profiles.",
              "required": false,
              "arguments": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "doc": "Enable this profile type to be scraped.",
                  "required": false,
                  "default": "true"
                },
                {
                  "name": "path",
                  "type": "string",
                  "doc": "The path to the profile type on the target.",
                  "required": false,
                  "default": "\"/debug/pprof/profile\""
                },
                {
                  "name": "delta",
                  "type": "boolean",
                  "doc": "Whether to scrape the profile as a delta.",
                  "required": false,
                  "default": "true"
                }
              ],
              "blocks": []
            },
            {
              "name": "profile.fgprof",
              "doc": "Collect [fgprof][] profiles.",
              "required": false,
              "arguments": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "doc": "Enable this profile type to be scraped.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "path",
                  "type": "string",
                  "doc": "The path to the profile type on the target.",
                  "required": false,
                  "default": "\"/debug/fgprof\""
                },
                {
                  "name": "delta",
                  "type": "boolean",
                  "doc": "Whether to scrape the profile as a delta.",
                  "required": false,
                  "default": "true"
                }
              ],
              "blocks": []
            },
            {
              "name": "profile.godeltaprof_memory",
              "doc": "Collect [godeltaprof][] memory profiles.",
              "required": false,
              "arguments": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "doc": "Enable this profile type to be scraped.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "path",
                  "type": "string",
                  "doc": "The path to the profile type on the target.",
                  "required": false,
                  "default": "\"/debug/pprof/delta_heap\""
                }
              ],
              "blocks": []
            },
            {
              "name": "profile.godeltaprof_mutex",
              "doc": "Collect [godeltaprof][] mutex profiles.",
              "required": false,
              "arguments": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "doc": "Enable this profile type to be scraped.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "path",
                  "type": "string",
                  "doc": "The path to the profile type on the target.",
                  "required": false,
                  "default": "\"/debug/pprof/delta_mutex\""
                }
              ],
              "blocks": []
            },
            {
              "name": "profile.godeltaprof_block",
              "doc": "Collect [godeltaprof][] block profiles.",
              "required": false,
              "arguments": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "doc": "Enable this profile type to be scraped.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "path",
                  "type": "string",
                  "doc": "The path to the profile type on the target.",
                  "required": false,
                  "default": "\"/debug/pprof/delta_block\""
                }
              ],
              "blocks": []
            },
            {
              "name": "profile.custom",
              "doc": "Collect custom profiles.",
              "required": false,
              "arguments": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "doc": "Enable this profile type to be scraped.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "path",
                  "type": "string",
                  "doc": "The path to the profile type on the target.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "delta",
                  "type": "boolean",
                  "doc": "Whether to scrape the profile as a delta.",
                  "required": false,
                  "default": "false"
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "clustering",
          "doc": "Configure the component for when {{< param \"PRODUCT_NAME\" >}} is running in clustered mode.",
          "required": false,
          "arguments": [
            {
              "name": "enabled",
              "type": "bool",
              "doc": "Enables sharing targets with other cluster nodes.",
              "required": true,
              "default": "false"
            }
          ],
          "blocks": []
        }
      ]
    },
    "pyroscope.write": {
      "name": "pyroscope.write",
      "doc": "`pyroscope.write` receives performance profiles from other components and forwards them to a series of user-supplied endpoints using [Pyroscope' Push API](/oss/pyroscope/).",
      "arguments": [
        {
          "name": "external_labels",
          "type": "map(string)",
          "doc": "Labels to add to profiles sent over the network.",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "receiver",
          "type": "receiver",
          "doc": "A value that other components can use to send profiles to."
        }
      ],
      "blocks": [
        {
          "name": "endpoint",
          "doc": "Location to send profiles to.",
          "required": false,
          "arguments": [
            {
              "name": "url",
              "type": "string",
              "doc": "Full URL to send metrics to.",
              "required": true,
              "default": null
            },
            {
              "name": "name",
              "type": "string",
              "doc": "Optional name to identify the endpoint in metrics.",
              "required": false,
              "default": null
            },
            {
              "name": "remote_timeout",
              "type": "duration",
              "doc": "Timeout for requests made to the URL.",
              "required": false,
              "default": "\"10s\""
            },
            {
              "name": "headers",
              "type": "map(string)",
              "doc": "Extra headers to deliver with the request.",
              "required": false,
              "default": null
            },
            {
              "name": "min_backoff_period",
              "type": "duration",
              "doc": "Initial backoff time between retries.",
              "required": false,
              "default": "\"500ms\""
            },
            {
              "name": "max_backoff_period",
              "type": "duration",
              "doc": "Maximum backoff time between retries.",
              "required": false,
              "default": "\"5m\""
            },
            {
              "name": "max_backoff_retries",
              "type": "int",
              "doc": "Maximum number of retries. 0 to retry infinitely.",
              "required": false,
              "default": "10"
            },
            {
              "name": "bearer_token_file",
              "type": "string",
              "doc": "File containing a bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token",
              "type": "secret",
              "doc": "Bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "enable_http2",
              "type": "bool",
              "doc": "Whether HTTP2 is supported for requests.",
              "required": false,
              "default": "true"
            },
            {
              "name": "follow_redirects",
              "type": "bool",
              "doc": "Whether redirects returned by the server should be followed.",
              "required": false,
              "default": "true"
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "basic_auth",
              "doc": "Configure basic_auth for authenticating to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "password_file",
                  "type": "string",
                  "doc": "File containing the basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "password",
                  "type": "secret",
                  "doc": "Basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "username",
                  "type": "string",
                  "doc": "Basic auth username.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "authorization",
              "doc": "Configure generic authorization to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "credentials_file",
                  "type": "string",
                  "doc": "File containing the secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "credentials",
                  "type": "secret",
                  "doc": "Secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "type",
                  "type": "string",
                  "doc": "Authorization type, for example, \"Bearer\".",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "oauth2",
              "doc": "Configure OAuth2 for authenticating to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "client_id",
                  "type": "string",
                  "doc": "OAuth2 client ID.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret_file",
                  "type": "string",
                  "doc": "File containing the OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret",
                  "type": "secret",
                  "doc": "OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "endpoint_params",
                  "type": "map(string)",
                  "doc": "Optional parameters to append to the token URL.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_url",
                  "type": "string",
                  "doc": "HTTP proxy to send requests through.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "no_proxy",
                  "type": "string",
                  "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_from_environment",
                  "type": "bool",
                  "doc": "Use the proxy URL indicated by environment variables.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "proxy_connect_header",
                  "type": "map(list(secret))",
                  "doc": "Specifies headers to send to proxies during CONNECT requests.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "scopes",
                  "type": "list(string)",
                  "doc": "List of scopes to authenticate with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "token_url",
                  "type": "string",
                  "doc": "URL to fetch the token from.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": [
                {
                  "name": "tls_config",
                  "doc": "Configure TLS settings for connecting to the endpoint.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "ca_pem",
                      "type": "string",
                      "doc": "CA PEM-encoded text to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "ca_file",
                      "type": "string",
                      "doc": "CA certificate to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_pem",
                      "type": "string",
                      "doc": "Certificate PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_file",
                      "type": "string",
                      "doc": "Certificate file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "insecure_skip_verify",
                      "type": "bool",
                      "doc": "Disables validation of the server certificate.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_file",
                      "type": "string",
                      "doc": "Key file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_pem",
                      "type": "secret",
                      "doc": "Key PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "min_version",
                      "type": "string",
                      "doc": "Minimum acceptable TLS version.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "server_name",
                      "type": "string",
                      "doc": "ServerName extension to indicate the name of the server.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                }
              ]
            },
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        }
      ]
    }
  },
  "remote": {
    "remote.http": {
      "name": "remote.http",
      "doc": "`remote.http` exposes the response body of a URL to other components.\nThe URL is polled for changes so that the most recent content is always available.",
      "arguments": [
        {
          "name": "url",
          "type": "string",
          "doc": "URL to poll.",
          "required": true,
          "default": null
        },
        {
          "name": "method",
          "type": "string",
          "doc": "Define HTTP method for the request",
          "required": false,
          "default": "\"GET\""
        },
        {
          "name": "headers",
          "type": "map(string)",
          "doc": "Custom headers for the request.",
          "required": false,
          "default": "{}"
        },
        {
          "name": "body",
          "type": "string",
          "doc": "The request body.",
          "required": false,
          "default": "\"\""
        },
        {
          "name": "poll_frequency",
          "type": "duration",
          "doc": "Frequency to poll the URL.",
          "required": false,
          "default": "\"1m\""
        },
        {
          "name": "poll_timeout",
          "type": "duration",
          "doc": "Timeout when polling the URL.",
          "required": false,
          "default": "\"10s\""
        },
        {
          "name": "is_secret",
          "type": "bool",
          "doc": "Whether the response body should be treated as a secret.",
          "required": false,
          "default": "false"
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "client",
          "doc": "HTTP client settings when connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "bearer_token_file",
              "type": "string",
              "doc": "File containing a bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token",
              "type": "secret",
              "doc": "Bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "enable_http2",
              "type": "bool",
              "doc": "Whether HTTP2 is supported for requests.",
              "required": false,
              "default": "true"
            },
            {
              "name": "follow_redirects",
              "type": "bool",
              "doc": "Whether redirects returned by the server should be followed.",
              "required": false,
              "default": "true"
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "basic_auth",
              "doc": "Configure basic_auth for authenticating to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "password_file",
                  "type": "string",
                  "doc": "File containing the basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "password",
                  "type": "secret",
                  "doc": "Basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "username",
                  "type": "string",
                  "doc": "Basic auth username.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "authorization",
              "doc": "Configure generic authorization to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "credentials_file",
                  "type": "string",
                  "doc": "File containing the secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "credentials",
                  "type": "secret",
                  "doc": "Secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "type",
                  "type": "string",
                  "doc": "Authorization type, for example, \"Bearer\".",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "oauth2",
              "doc": "Configure OAuth2 for authenticating to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "client_id",
                  "type": "string",
                  "doc": "OAuth2 client ID.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret_file",
                  "type": "string",
                  "doc": "File containing the OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret",
                  "type": "secret",
                  "doc": "OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "endpoint_params",
                  "type": "map(string)",
                  "doc": "Optional parameters to append to the token URL.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_url",
                  "type": "string",
                  "doc": "HTTP proxy to send requests through.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "no_proxy",
                  "type": "string",
                  "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_from_environment",
                  "type": "bool",
                  "doc": "Use the proxy URL indicated by environment variables.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "proxy_connect_header",
                  "type": "map(list(secret))",
                  "doc": "Specifies headers to send to proxies during CONNECT requests.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "scopes",
                  "type": "list(string)",
                  "doc": "List of scopes to authenticate with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "token_url",
                  "type": "string",
                  "doc": "URL to fetch the token from.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": [
                {
                  "name": "tls_config",
                  "doc": "Configure TLS settings for connecting to the endpoint.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "ca_pem",
                      "type": "string",
                      "doc": "CA PEM-encoded text to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "ca_file",
                      "type": "string",
                      "doc": "CA certificate to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_pem",
                      "type": "string",
                      "doc": "Certificate PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_file",
                      "type": "string",
                      "doc": "Certificate file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "insecure_skip_verify",
                      "type": "bool",
                      "doc": "Disables validation of the server certificate.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_file",
                      "type": "string",
                      "doc": "Key file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_pem",
                      "type": "secret",
                      "doc": "Key PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "min_version",
                      "type": "string",
                      "doc": "Minimum acceptable TLS version.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "server_name",
                      "type": "string",
                      "doc": "ServerName extension to indicate the name of the server.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                }
              ]
            },
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        }
      ]
    },
    "remote.kubernetes.configmap": {
      "name": "remote.kubernetes.configmap",
      "doc": "`remote.kubernetes.configmap` reads a ConfigMap from the Kubernetes API server and exposes its data for other components to consume.",
      "arguments": [
        {
          "name": "namespace",
          "type": "string",
          "doc": "Kubernetes namespace containing the desired ConfigMap.",
          "required": true,
          "default": null
        },
        {
          "name": "name",
          "type": "string",
          "doc": "Name of the Kubernetes ConfigMap",
          "required": true,
          "default": null
        },
        {
          "name": "poll_frequency",
          "type": "duration",
          "doc": "Frequency to poll the Kubernetes API.",
          "required": false,
          "default": "\"1m\""
        },
        {
          "name": "poll_timeout",
          "type": "duration",
          "doc": "Timeout when polling the Kubernetes API.",
          "required": false,
          "default": "\"15s\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "data",
          "type": "map(string)",
          "doc": "Data from the ConfigMap obtained from Kubernetes."
        }
      ],
      "blocks": [
        {
          "name": "client",
          "doc": "Configures Kubernetes client used to find Probes.",
          "required": false,
          "arguments": [
            {
              "name": "api_server",
              "type": "string",
              "doc": "URL of the Kubernetes API server.",
              "required": false,
              "default": null
            },
            {
              "name": "kubeconfig_file",
              "type": "string",
              "doc": "Path of the kubeconfig file to use for connecting to Kubernetes.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token_file",
              "type": "string",
              "doc": "File containing a bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token",
              "type": "secret",
              "doc": "Bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "enable_http2",
              "type": "bool",
              "doc": "Whether HTTP2 is supported for requests.",
              "required": false,
              "default": "true"
            },
            {
              "name": "follow_redirects",
              "type": "bool",
              "doc": "Whether redirects returned by the server should be followed.",
              "required": false,
              "default": "true"
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "basic_auth",
              "doc": "Configure basic authentication to the Kubernetes API.",
              "required": false,
              "arguments": [
                {
                  "name": "password_file",
                  "type": "string",
                  "doc": "File containing the basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "password",
                  "type": "secret",
                  "doc": "Basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "username",
                  "type": "string",
                  "doc": "Basic auth username.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "authorization",
              "doc": "Configure generic authorization to the Kubernetes API.",
              "required": false,
              "arguments": [
                {
                  "name": "credentials_file",
                  "type": "string",
                  "doc": "File containing the secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "credentials",
                  "type": "secret",
                  "doc": "Secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "type",
                  "type": "string",
                  "doc": "Authorization type, for example, \"Bearer\".",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "oauth2",
              "doc": "Configure OAuth2 for authenticating to the Kubernetes API.",
              "required": false,
              "arguments": [
                {
                  "name": "client_id",
                  "type": "string",
                  "doc": "OAuth2 client ID.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret_file",
                  "type": "string",
                  "doc": "File containing the OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret",
                  "type": "secret",
                  "doc": "OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "endpoint_params",
                  "type": "map(string)",
                  "doc": "Optional parameters to append to the token URL.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_url",
                  "type": "string",
                  "doc": "HTTP proxy to send requests through.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "no_proxy",
                  "type": "string",
                  "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_from_environment",
                  "type": "bool",
                  "doc": "Use the proxy URL indicated by environment variables.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "proxy_connect_header",
                  "type": "map(list(secret))",
                  "doc": "Specifies headers to send to proxies during CONNECT requests.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "scopes",
                  "type": "list(string)",
                  "doc": "List of scopes to authenticate with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "token_url",
                  "type": "string",
                  "doc": "URL to fetch the token from.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": [
                {
                  "name": "tls_config",
                  "doc": "Configure TLS settings for connecting to the Kubernetes API.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "ca_pem",
                      "type": "string",
                      "doc": "CA PEM-encoded text to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "ca_file",
                      "type": "string",
                      "doc": "CA certificate to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_pem",
                      "type": "string",
                      "doc": "Certificate PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_file",
                      "type": "string",
                      "doc": "Certificate file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "insecure_skip_verify",
                      "type": "bool",
                      "doc": "Disables validation of the server certificate.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_file",
                      "type": "string",
                      "doc": "Key file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_pem",
                      "type": "secret",
                      "doc": "Key PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "min_version",
                      "type": "string",
                      "doc": "Minimum acceptable TLS version.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "server_name",
                      "type": "string",
                      "doc": "ServerName extension to indicate the name of the server.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                }
              ]
            },
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the Kubernetes API.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        }
      ]
    },
    "remote.kubernetes.secret": {
      "name": "remote.kubernetes.secret",
      "doc": "`remote.kubernetes.secret` reads a Secret from the Kubernetes API server and exposes its data for other components to consume.",
      "arguments": [
        {
          "name": "namespace",
          "type": "string",
          "doc": "Kubernetes namespace containing the desired Secret.",
          "required": true,
          "default": null
        },
        {
          "name": "name",
          "type": "string",
          "doc": "Name of the Kubernetes Secret",
          "required": true,
          "default": null
        },
        {
          "name": "poll_frequency",
          "type": "duration",
          "doc": "Frequency to poll the Kubernetes API.",
          "required": false,
          "default": "\"1m\""
        },
        {
          "name": "poll_timeout",
          "type": "duration",
          "doc": "Timeout when polling the Kubernetes API.",
          "required": false,
          "default": "\"15s\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "data",
          "type": "map(secret)",
          "doc": "Data from the secret obtained from Kubernetes."
        }
      ],
      "blocks": [
        {
          "name": "client",
          "doc": "Configures Kubernetes client used to find Probes.",
          "required": false,
          "arguments": [
            {
              "name": "api_server",
              "type": "string",
              "doc": "URL of the Kubernetes API server.",
              "required": false,
              "default": null
            },
            {
              "name": "kubeconfig_file",
              "type": "string",
              "doc": "Path of the kubeconfig file to use for connecting to Kubernetes.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token_file",
              "type": "string",
              "doc": "File containing a bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token",
              "type": "secret",
              "doc": "Bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "enable_http2",
              "type": "bool",
              "doc": "Whether HTTP2 is supported for requests.",
              "required": false,
              "default": "true"
            },
            {
              "name": "follow_redirects",
              "type": "bool",
              "doc": "Whether redirects returned by the server should be followed.",
              "required": false,
              "default": "true"
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "basic_auth",
              "doc": "Configure basic authentication to the Kubernetes API.",
              "required": false,
              "arguments": [
                {
                  "name": "password_file",
                  "type": "string",
                  "doc": "File containing the basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "password",
                  "type": "secret",
                  "doc": "Basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "username",
                  "type": "string",
                  "doc": "Basic auth username.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "authorization",
              "doc": "Configure generic authorization to the Kubernetes API.",
              "required": false,
              "arguments": [
                {
                  "name": "credentials_file",
                  "type": "string",
                  "doc": "File containing the secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "credentials",
                  "type": "secret",
                  "doc": "Secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "type",
                  "type": "string",
                  "doc": "Authorization type, for example, \"Bearer\".",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "oauth2",
              "doc": "Configure OAuth2 for authenticating to the Kubernetes API.",
              "required": false,
              "arguments": [
                {
                  "name": "client_id",
                  "type": "string",
                  "doc": "OAuth2 client ID.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret_file",
                  "type": "string",
                  "doc": "File containing the OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret",
                  "type": "secret",
                  "doc": "OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "endpoint_params",
                  "type": "map(string)",
                  "doc": "Optional parameters to append to the token URL.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_url",
                  "type": "string",
                  "doc": "HTTP proxy to send requests through.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "no_proxy",
                  "type": "string",
                  "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_from_environment",
                  "type": "bool",
                  "doc": "Use the proxy URL indicated by environment variables.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "proxy_connect_header",
                  "type": "map(list(secret))",
                  "doc": "Specifies headers to send to proxies during CONNECT requests.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "scopes",
                  "type": "list(string)",
                  "doc": "List of scopes to authenticate with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "token_url",
                  "type": "string",
                  "doc": "URL to fetch the token from.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": [
                {
                  "name": "tls_config",
                  "doc": "Configure TLS settings for connecting to the Kubernetes API.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "ca_pem",
                      "type": "string",
                      "doc": "CA PEM-encoded text to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "ca_file",
                      "type": "string",
                      "doc": "CA certificate to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_pem",
                      "type": "string",
                      "doc": "Certificate PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_file",
                      "type": "string",
                      "doc": "Certificate file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "insecure_skip_verify",
                      "type": "bool",
                      "doc": "Disables validation of the server certificate.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_file",
                      "type": "string",
                      "doc": "Key file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_pem",
                      "type": "secret",
                      "doc": "Key PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "min_version",
                      "type": "string",
                      "doc": "Minimum acceptable TLS version.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "server_name",
                      "type": "string",
                      "doc": "ServerName extension to indicate the name of the server.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                }
              ]
            },
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the Kubernetes API.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        }
      ]
    },
    "remote.s3": {
      "name": "remote.s3",
      "doc": "`remote.s3` exposes the string contents of a file located in [AWS S3](https://aws.amazon.com/s3/) to other components.\nThe file will be polled for changes so that the most recent content is always available.",
      "arguments": [
        {
          "name": "path",
          "type": "string",
          "doc": "Path in the format of \"s3://bucket/file\".",
          "required": true,
          "default": null
        },
        {
          "name": "poll_frequency",
          "type": "duration",
          "doc": "How often to poll the file for changes. Must be greater than 30 seconds.",
          "required": false,
          "default": "\"10m\""
        },
        {
          "name": "is_secret",
          "type": "bool",
          "doc": "Marks the file as containing a [secret][].",
          "required": false,
          "default": "false"
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "client",
          "doc": "Additional options for configuring the S3 client.",
          "required": false,
          "arguments": [
            {
              "name": "key",
              "type": "string",
              "doc": "Used to override default access key.",
              "required": false,
              "default": null
            },
            {
              "name": "secret",
              "type": "secret",
              "doc": "Used to override default secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint",
              "type": "string",
              "doc": "Specifies a custom url to access, used generally for S3-compatible systems.",
              "required": false,
              "default": null
            },
            {
              "name": "disable_ssl",
              "type": "bool",
              "doc": "Used to disable SSL, generally used for testing.",
              "required": false,
              "default": null
            },
            {
              "name": "use_path_style",
              "type": "string",
              "doc": "Path style is a deprecated setting that is generally enabled for S3 compatible systems.",
              "required": false,
              "default": "false"
            },
            {
              "name": "region",
              "type": "string",
              "doc": "Used to override default region.",
              "required": false,
              "default": null
            },
            {
              "name": "signing_region",
              "type": "string",
              "doc": "Used to override the signing region when using a custom endpoint.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "remote.vault": {
      "name": "remote.vault",
      "doc": "`remote.vault` connects to a [HashiCorp Vault][Vault] server to retrieve secrets.\nIt can retrieve a secret using the [KV v2][] secrets engine.",
      "arguments": [
        {
          "name": "server",
          "type": "string",
          "doc": "The Vault server to connect to.",
          "required": true,
          "default": null
        },
        {
          "name": "namespace",
          "type": "string",
          "doc": "The Vault namespace to connect to (Vault Enterprise only).",
          "required": false,
          "default": null
        },
        {
          "name": "path",
          "type": "string",
          "doc": "The path to retrieve a secret from.",
          "required": true,
          "default": null
        },
        {
          "name": "reread_frequency",
          "type": "duration",
          "doc": "Rate to re-read keys.",
          "required": false,
          "default": "\"0s\""
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "data",
          "type": "map(secret)",
          "doc": "Data from the secret obtained from Vault."
        }
      ],
      "blocks": [
        {
          "name": "client_options",
          "doc": "Options for the Vault client.",
          "required": false,
          "arguments": [
            {
              "name": "min_retry_wait",
              "type": "duration",
              "doc": "Minimum time to wait before retrying failed requests.",
              "required": false,
              "default": "\"1000ms\""
            },
            {
              "name": "max_retry_wait",
              "type": "duration",
              "doc": "Maximum time to wait before retrying failed requests.",
              "required": false,
              "default": "\"1500ms\""
            },
            {
              "name": "max_retries",
              "type": "int",
              "doc": "Maximum number of times to retry after a 5xx error.",
              "required": false,
              "default": "2"
            },
            {
              "name": "timeout",
              "type": "duration",
              "doc": "Maximum time to wait before a request times out.",
              "required": false,
              "default": "\"60s\""
            }
          ],
          "blocks": []
        },
        {
          "name": "auth.token",
          "doc": "Authenticate to Vault with a token.",
          "required": false,
          "arguments": [
            {
              "name": "token",
              "type": "secret",
              "doc": "Authentication token to use.",
              "required": true,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "auth.approle",
          "doc": "Authenticate to Vault using AppRole.",
          "required": false,
          "arguments": [
            {
              "name": "role_id",
              "type": "string",
              "doc": "Role ID to authenticate as.",
              "required": true,
              "default": null
            },
            {
              "name": "secret",
              "type": "secret",
              "doc": "Secret to authenticate with.",
              "required": true,
              "default": null
            },
            {
              "name": "wrapping_token",
              "type": "bool",
              "doc": "Whether to [unwrap][] the token.",
              "required": false,
              "default": "false"
            },
            {
              "name": "mount_path",
              "type": "string",
              "doc": "Mount path for the login.",
              "required": false,
              "default": "\"approle\""
            }
          ],
          "blocks": []
        },
        {
          "name": "auth.aws",
          "doc": "Authenticate to Vault using AWS.",
          "required": false,
          "arguments": [
            {
              "name": "type",
              "type": "string",
              "doc": "Mechanism to authenticate against AWS with.",
              "required": true,
              "default": null
            },
            {
              "name": "region",
              "type": "string",
              "doc": "AWS region to connect to.",
              "required": false,
              "default": "\"us-east-1\""
            },
            {
              "name": "role",
              "type": "string",
              "doc": "Overrides the inferred role name inferred.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "iam_server_id_header",
              "type": "string",
              "doc": "Configures a X-Vault-AWS-IAM-Server-ID header.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "ec2_signature_type",
              "type": "string",
              "doc": "Signature to use when authenticating against EC2.",
              "required": false,
              "default": "\"pkcs7\""
            },
            {
              "name": "mount_path",
              "type": "string",
              "doc": "Mount path for the login.",
              "required": false,
              "default": "\"aws\""
            }
          ],
          "blocks": []
        },
        {
          "name": "auth.azure",
          "doc": "Authenticate to Vault using Azure.",
          "required": false,
          "arguments": [
            {
              "name": "role",
              "type": "string",
              "doc": "Role name to authenticate as.",
              "required": true,
              "default": null
            },
            {
              "name": "resource_url",
              "type": "string",
              "doc": "Resource URL to include with authentication request.",
              "required": false,
              "default": null
            },
            {
              "name": "mount_path",
              "type": "string",
              "doc": "Mount path for the login.",
              "required": false,
              "default": "\"azure\""
            }
          ],
          "blocks": []
        },
        {
          "name": "auth.gcp",
          "doc": "Authenticate to Vault using GCP.",
          "required": false,
          "arguments": [
            {
              "name": "role",
              "type": "string",
              "doc": "Role name to authenticate as.",
              "required": true,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Mechanism to authenticate against GCP with",
              "required": true,
              "default": null
            },
            {
              "name": "iam_service_account",
              "type": "string",
              "doc": "IAM service account name to use.",
              "required": false,
              "default": null
            },
            {
              "name": "mount_path",
              "type": "string",
              "doc": "Mount path for the login.",
              "required": false,
              "default": "\"gcp\""
            }
          ],
          "blocks": []
        },
        {
          "name": "auth.kubernetes",
          "doc": "Authenticate to Vault using Kubernetes.",
          "required": false,
          "arguments": [
            {
              "name": "role",
              "type": "string",
              "doc": "Role name to authenticate as.",
              "required": true,
              "default": null
            },
            {
              "name": "service_account_file",
              "type": "string",
              "doc": "Override service account token file to use.",
              "required": false,
              "default": null
            },
            {
              "name": "mount_path",
              "type": "string",
              "doc": "Mount path for the login.",
              "required": false,
              "default": "\"kubernetes\""
            }
          ],
          "blocks": []
        },
        {
          "name": "auth.ldap",
          "doc": "Authenticate to Vault using LDAP.",
          "required": false,
          "arguments": [
            {
              "name": "username",
              "type": "string",
              "doc": "LDAP username to authenticate as.",
              "required": true,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "LDAP passsword for the user.",
              "required": true,
              "default": null
            },
            {
              "name": "mount_path",
              "type": "string",
              "doc": "Mount path for the login.",
              "required": false,
              "default": "\"ldap\""
            }
          ],
          "blocks": []
        },
        {
          "name": "auth.userpass",
          "doc": "Authenticate to Vault using a username and password.",
          "required": false,
          "arguments": [
            {
              "name": "username",
              "type": "string",
              "doc": "Username to authenticate as.",
              "required": true,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Passsword for the user.",
              "required": true,
              "default": null
            },
            {
              "name": "mount_path",
              "type": "string",
              "doc": "Mount path for the login.",
              "required": false,
              "default": "\"userpass\""
            }
          ],
          "blocks": []
        },
        {
          "name": "auth.custom",
          "doc": "Authenticate to Vault with custom authentication.",
          "required": false,
          "arguments": [
            {
              "name": "path",
              "type": "string",
              "doc": "Path to write to for creating an authentication token.",
              "required": true,
              "default": null
            },
            {
              "name": "data",
              "type": "map(secret)",
              "doc": "Authentication data.",
              "required": true,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    }
  },
  "config": {
    "argument": {
      "name": "argument",
      "doc": "`argument` is an optional configuration block used to specify parameterized input to a [custom component][].\n`argument` blocks must be given a label which determines the name of the argument.",
      "arguments": [
        {
          "name": "comment",
          "type": "string",
          "doc": "Description for the argument.",
          "required": false,
          "default": "false"
        },
        {
          "name": "default",
          "type": "any",
          "doc": "Default value for the argument.",
          "required": false,
          "default": "null"
        },
        {
          "name": "optional",
          "type": "bool",
          "doc": "Whether the argument may be omitted.",
          "required": false,
          "default": "false"
        }
      ],
      "hasLabel": true,
      "exports": [
        {
          "name": "value",
          "type": "any",
          "doc": "The current value of the argument."
        }
      ],
      "blocks": []
    },
    "declare": {
      "name": "declare",
      "doc": "`declare` is an optional configuration block used to define a new [custom component][].\n`declare` blocks must be given a label that determines the name of the custom component.",
      "arguments": [],
      "hasLabel": true,
      "exports": [],
      "blocks": []
    },
    "export": {
      "name": "export",
      "doc": "`export` is an optional configuration block used to specify an emitted value of a [custom component][].\n`export` blocks must be given a label which determine the name of the export.",
      "arguments": [
        {
          "name": "value",
          "type": "any",
          "doc": "Value to export.",
          "required": true,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": []
    },
    "http": {
      "name": "http",
      "doc": "`http` is an optional configuration block used to customize how the {{< param \"PRODUCT_NAME\" >}} HTTP server functions.\n`http` is specified without a label and can only be provided once per configuration file.",
      "arguments": [],
      "hasLabel": false,
      "exports": [],
      "blocks": [
        {
          "name": "tls",
          "doc": "Define TLS settings for the HTTP server.",
          "required": false,
          "arguments": [
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "PEM data of the server TLS certificate.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Path to the server TLS certificate on disk.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "key_pem",
              "type": "string",
              "doc": "PEM data of the server TLS key.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Path to the server TLS key on disk.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "client_ca_pem",
              "type": "string",
              "doc": "PEM data of the client CA to validate requests against.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "client_ca_file",
              "type": "string",
              "doc": "Path to the client CA file on disk to validate requests against.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "client_auth_type",
              "type": "string",
              "doc": "Client authentication to use.",
              "required": false,
              "default": "\"NoClientCert\""
            },
            {
              "name": "cipher_suites",
              "type": "list(string)",
              "doc": "Set of cipher suites to use.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "curve_preferences",
              "type": "list(string)",
              "doc": "Set of elliptic curves to use in a handshake.",
              "required": false,
              "default": "[]"
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Oldest TLS version to accept from clients.",
              "required": false,
              "default": "\"\""
            },
            {
              "name": "max_version",
              "type": "string",
              "doc": "Newest TLS version to accept from clients.",
              "required": false,
              "default": "\"\""
            }
          ],
          "blocks": [
            {
              "name": "windows_certificate_filter",
              "doc": "Configure Windows certificate store for all certificates.",
              "required": false,
              "arguments": [],
              "blocks": [
                {
                  "name": "client",
                  "doc": "Configure client certificates for Windows certificate filter.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "issuer_common_names",
                      "type": "list(string)",
                      "doc": "Issuer common names to check against.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "subject_regex",
                      "type": "string",
                      "doc": "Regular expression to match Subject name.",
                      "required": false,
                      "default": "\"\""
                    },
                    {
                      "name": "template_id",
                      "type": "string",
                      "doc": "Client Template ID to match in ASN1 format, for example, \"1.2.3\".",
                      "required": false,
                      "default": "\"\""
                    }
                  ],
                  "blocks": []
                },
                {
                  "name": "server",
                  "doc": "Configure server certificates for Windows certificate filter.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "store",
                      "type": "string",
                      "doc": "Name of the system store to look for the server Certificate, for example, LocalMachine, CurrentUser.",
                      "required": true,
                      "default": "\"\""
                    },
                    {
                      "name": "system_store",
                      "type": "string",
                      "doc": "Name of the store to look for the server Certificate, for example, My, CA.",
                      "required": true,
                      "default": "\"\""
                    },
                    {
                      "name": "issuer_common_names",
                      "type": "list(string)",
                      "doc": "Issuer common names to check against.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "template_id",
                      "type": "string",
                      "doc": "Server Template ID to match in ASN1 format, for example, \"1.2.3\".",
                      "required": false,
                      "default": "\"\""
                    },
                    {
                      "name": "refresh_interval",
                      "type": "string",
                      "doc": "How often to check for a new server certificate.",
                      "required": false,
                      "default": "\"5m\""
                    }
                  ],
                  "blocks": []
                }
              ]
            }
          ]
        }
      ]
    },
    "import.file": {
      "name": "import.file",
      "doc": "`import.file` block imports custom components from a file or a directory and exposes them to the importer.\n`import.file` blocks must be given a label that determines the namespace where custom components are exposed.",
      "arguments": [
        {
          "name": "filename",
          "type": "string",
          "doc": "Path of the file or directory on disk to watch.",
          "required": true,
          "default": null
        },
        {
          "name": "detector",
          "type": "string",
          "doc": "Which file change detector to use (fsnotify, poll).",
          "required": false,
          "default": "\"fsnotify\""
        },
        {
          "name": "poll_frequency",
          "type": "duration",
          "doc": "How often to poll for file changes.",
          "required": false,
          "default": "\"1m\""
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": []
    },
    "import.git": {
      "name": "import.git",
      "doc": "`import.git` block imports custom components from a Git repository and exposes them to the importer.\n`import.git` blocks must be given a label that determines the namespace where custom components are exposed.",
      "arguments": [
        {
          "name": "repository",
          "type": "string",
          "doc": "The Git repository address to retrieve the module from.",
          "required": true,
          "default": null
        },
        {
          "name": "revision",
          "type": "string",
          "doc": "The Git revision to retrieve the module from.",
          "required": false,
          "default": "\"HEAD\""
        },
        {
          "name": "path",
          "type": "string",
          "doc": "The path in the repository where the module is stored.",
          "required": true,
          "default": null
        },
        {
          "name": "pull_frequency",
          "type": "duration",
          "doc": "The frequency to pull the repository for updates.",
          "required": false,
          "default": "\"60s\""
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to the repository.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "ssh_key",
          "doc": "Configure an SSH Key for authenticating to the repository.",
          "required": false,
          "arguments": [
            {
              "name": "username",
              "type": "string",
              "doc": "SSH username.",
              "required": true,
              "default": null
            },
            {
              "name": "key",
              "type": "secret",
              "doc": "SSH private key.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "SSH private key path.",
              "required": false,
              "default": null
            },
            {
              "name": "passphrase",
              "type": "secret",
              "doc": "Passphrase for SSH key if needed.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "import.http": {
      "name": "import.http",
      "doc": "`import.http` retrieves a module from an HTTP server.",
      "arguments": [
        {
          "name": "url",
          "type": "string",
          "doc": "URL to poll.",
          "required": true,
          "default": null
        },
        {
          "name": "method",
          "type": "string",
          "doc": "Define the HTTP method for the request.",
          "required": false,
          "default": "\"GET\""
        },
        {
          "name": "headers",
          "type": "map(string)",
          "doc": "Custom headers for the request.",
          "required": false,
          "default": "{}"
        },
        {
          "name": "poll_frequency",
          "type": "duration",
          "doc": "Frequency to poll the URL.",
          "required": false,
          "default": "\"1m\""
        },
        {
          "name": "poll_timeout",
          "type": "duration",
          "doc": "Timeout when polling the URL.",
          "required": false,
          "default": "\"10s\""
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": [
        {
          "name": "client",
          "doc": "HTTP client settings when connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "bearer_token_file",
              "type": "string",
              "doc": "File containing a bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "bearer_token",
              "type": "secret",
              "doc": "Bearer token to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "enable_http2",
              "type": "bool",
              "doc": "Whether HTTP2 is supported for requests.",
              "required": false,
              "default": "true"
            },
            {
              "name": "follow_redirects",
              "type": "bool",
              "doc": "Whether redirects returned by the server should be followed.",
              "required": false,
              "default": "true"
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "basic_auth",
              "doc": "Configure basic_auth for authenticating to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "password_file",
                  "type": "string",
                  "doc": "File containing the basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "password",
                  "type": "secret",
                  "doc": "Basic auth password.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "username",
                  "type": "string",
                  "doc": "Basic auth username.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "authorization",
              "doc": "Configure generic authorization to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "credentials_file",
                  "type": "string",
                  "doc": "File containing the secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "credentials",
                  "type": "secret",
                  "doc": "Secret value.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "type",
                  "type": "string",
                  "doc": "Authorization type, for example, \"Bearer\".",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            },
            {
              "name": "oauth2",
              "doc": "Configure OAuth2 for authenticating to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "client_id",
                  "type": "string",
                  "doc": "OAuth2 client ID.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret_file",
                  "type": "string",
                  "doc": "File containing the OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "client_secret",
                  "type": "secret",
                  "doc": "OAuth2 client secret.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "endpoint_params",
                  "type": "map(string)",
                  "doc": "Optional parameters to append to the token URL.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_url",
                  "type": "string",
                  "doc": "HTTP proxy to send requests through.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "no_proxy",
                  "type": "string",
                  "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "proxy_from_environment",
                  "type": "bool",
                  "doc": "Use the proxy URL indicated by environment variables.",
                  "required": false,
                  "default": "false"
                },
                {
                  "name": "proxy_connect_header",
                  "type": "map(list(secret))",
                  "doc": "Specifies headers to send to proxies during CONNECT requests.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "scopes",
                  "type": "list(string)",
                  "doc": "List of scopes to authenticate with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "token_url",
                  "type": "string",
                  "doc": "URL to fetch the token from.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": [
                {
                  "name": "tls_config",
                  "doc": "Configure TLS settings for connecting to the endpoint.",
                  "required": false,
                  "arguments": [
                    {
                      "name": "ca_pem",
                      "type": "string",
                      "doc": "CA PEM-encoded text to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "ca_file",
                      "type": "string",
                      "doc": "CA certificate to validate the server with.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_pem",
                      "type": "string",
                      "doc": "Certificate PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "cert_file",
                      "type": "string",
                      "doc": "Certificate file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "insecure_skip_verify",
                      "type": "bool",
                      "doc": "Disables validation of the server certificate.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_file",
                      "type": "string",
                      "doc": "Key file for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "key_pem",
                      "type": "secret",
                      "doc": "Key PEM-encoded text for client authentication.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "min_version",
                      "type": "string",
                      "doc": "Minimum acceptable TLS version.",
                      "required": false,
                      "default": null
                    },
                    {
                      "name": "server_name",
                      "type": "string",
                      "doc": "ServerName extension to indicate the name of the server.",
                      "required": false,
                      "default": null
                    }
                  ],
                  "blocks": []
                }
              ]
            },
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        }
      ]
    },
    "import.string": {
      "name": "import.string",
      "doc": "`import.string` block imports custom components from a string and exposes them to the importer.\n`import.string` blocks must be given a label that determines the namespace where custom components are exposed.",
      "arguments": [
        {
          "name": "content",
          "type": "secret or string",
          "doc": "The contents of the module to import as a secret or string.",
          "required": true,
          "default": null
        }
      ],
      "hasLabel": true,
      "exports": [],
      "blocks": []
    },
    "livedebugging": {
      "name": "livedebugging",
      "doc": "`livedebugging` is an optional configuration block that enables the [live debugging feature][debug], which streams real-time data from your components directly to the {{< param \"PRODUCT_NAME\" >}} UI.",
      "arguments": [],
      "hasLabel": true,
      "exports": [],
      "blocks": []
    },
    "logging": {
      "name": "logging",
      "doc": "`logging` is an optional configuration block used to customize how {{< param \"PRODUCT_NAME\" >}} produces log messages.\n`logging` is specified without a label and can only be provided once per configuration file.",
      "arguments": [
        {
          "name": "level",
          "type": "string",
          "doc": "Level at which log lines should be written",
          "required": false,
          "default": "\"info\""
        },
        {
          "name": "format",
          "type": "string",
          "doc": "Format to use for writing log lines",
          "required": false,
          "default": "\"logfmt\""
        },
        {
          "name": "write_to",
          "type": "list(LogsReceiver)",
          "doc": "List of receivers to send log entries to",
          "required": false,
          "default": null
        }
      ],
      "hasLabel": false,
      "exports": [],
      "blocks": []
    },
    "remotecfg": {
      "name": "remotecfg",
      "doc": "`remotecfg` is an optional configuration block that enables {{< param \"PRODUCT_NAME\" >}} to fetch and load the configuration from a remote endpoint.\n`remotecfg` is specified without a label and can only be provided once per configuration file.",
      "arguments": [
        {
          "name": "url",
          "type": "string",
          "doc": "The address of the API to poll for configuration.",
          "required": false,
          "default": "\"\""
        },
        {
          "name": "id",
          "type": "string",
          "doc": "A self-reported ID.",
          "required": false,
          "default": "see below"
        },
        {
          "name": "metadata",
          "type": "map(string)",
          "doc": "A set of self-reported metadata.",
          "required": false,
          "default": "{}"
        },
        {
          "name": "poll_frequency",
          "type": "duration",
          "doc": "How often to poll the API for new configuration.",
          "required": false,
          "default": "\"1m\""
        }
      ],
      "hasLabel": false,
      "exports": [],
      "blocks": [
        {
          "name": "basic_auth",
          "doc": "Configure basic_auth for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "password_file",
              "type": "string",
              "doc": "File containing the basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "password",
              "type": "secret",
              "doc": "Basic auth password.",
              "required": false,
              "default": null
            },
            {
              "name": "username",
              "type": "string",
              "doc": "Basic auth username.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "authorization",
          "doc": "Configure generic authorization to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "credentials_file",
              "type": "string",
              "doc": "File containing the secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "credentials",
              "type": "secret",
              "doc": "Secret value.",
              "required": false,
              "default": null
            },
            {
              "name": "type",
              "type": "string",
              "doc": "Authorization type, for example, \"Bearer\".",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        },
        {
          "name": "oauth2",
          "doc": "Configure OAuth2 for authenticating to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "client_id",
              "type": "string",
              "doc": "OAuth2 client ID.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret_file",
              "type": "string",
              "doc": "File containing the OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "client_secret",
              "type": "secret",
              "doc": "OAuth2 client secret.",
              "required": false,
              "default": null
            },
            {
              "name": "endpoint_params",
              "type": "map(string)",
              "doc": "Optional parameters to append to the token URL.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_url",
              "type": "string",
              "doc": "HTTP proxy to send requests through.",
              "required": false,
              "default": null
            },
            {
              "name": "no_proxy",
              "type": "string",
              "doc": "Comma-separated list of IP addresses, CIDR notations, and domain names to exclude from proxying.",
              "required": false,
              "default": null
            },
            {
              "name": "proxy_from_environment",
              "type": "bool",
              "doc": "Use the proxy URL indicated by environment variables.",
              "required": false,
              "default": "false"
            },
            {
              "name": "proxy_connect_header",
              "type": "map(list(secret))",
              "doc": "Specifies headers to send to proxies during CONNECT requests.",
              "required": false,
              "default": null
            },
            {
              "name": "scopes",
              "type": "list(string)",
              "doc": "List of scopes to authenticate with.",
              "required": false,
              "default": null
            },
            {
              "name": "token_url",
              "type": "string",
              "doc": "URL to fetch the token from.",
              "required": false,
              "default": null
            }
          ],
          "blocks": [
            {
              "name": "tls_config",
              "doc": "Configure TLS settings for connecting to the endpoint.",
              "required": false,
              "arguments": [
                {
                  "name": "ca_pem",
                  "type": "string",
                  "doc": "CA PEM-encoded text to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "ca_file",
                  "type": "string",
                  "doc": "CA certificate to validate the server with.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_pem",
                  "type": "string",
                  "doc": "Certificate PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "cert_file",
                  "type": "string",
                  "doc": "Certificate file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "insecure_skip_verify",
                  "type": "bool",
                  "doc": "Disables validation of the server certificate.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_file",
                  "type": "string",
                  "doc": "Key file for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "key_pem",
                  "type": "secret",
                  "doc": "Key PEM-encoded text for client authentication.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "min_version",
                  "type": "string",
                  "doc": "Minimum acceptable TLS version.",
                  "required": false,
                  "default": null
                },
                {
                  "name": "server_name",
                  "type": "string",
                  "doc": "ServerName extension to indicate the name of the server.",
                  "required": false,
                  "default": null
                }
              ],
              "blocks": []
            }
          ]
        },
        {
          "name": "tls_config",
          "doc": "Configure TLS settings for connecting to the endpoint.",
          "required": false,
          "arguments": [
            {
              "name": "ca_pem",
              "type": "string",
              "doc": "CA PEM-encoded text to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "ca_file",
              "type": "string",
              "doc": "CA certificate to validate the server with.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_pem",
              "type": "string",
              "doc": "Certificate PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "cert_file",
              "type": "string",
              "doc": "Certificate file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "insecure_skip_verify",
              "type": "bool",
              "doc": "Disables validation of the server certificate.",
              "required": false,
              "default": null
            },
            {
              "name": "key_file",
              "type": "string",
              "doc": "Key file for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "key_pem",
              "type": "secret",
              "doc": "Key PEM-encoded text for client authentication.",
              "required": false,
              "default": null
            },
            {
              "name": "min_version",
              "type": "string",
              "doc": "Minimum acceptable TLS version.",
              "required": false,
              "default": null
            },
            {
              "name": "server_name",
              "type": "string",
              "doc": "ServerName extension to indicate the name of the server.",
              "required": false,
              "default": null
            }
          ],
          "blocks": []
        }
      ]
    },
    "tracing": {
      "name": "tracing",
      "doc": "`tracing` is an optional configuration block used to customize how {{< param \"PRODUCT_NAME\" >}} produces traces.\n`tracing` is specified without a label and can only be provided once per configuration file.",
      "arguments": [
        {
          "name": "sampling_fraction",
          "type": "number",
          "doc": "Fraction of traces to keep.",
          "required": false,
          "default": "0.1"
        },
        {
          "name": "write_to",
          "type": "list(otelcol.Consumer)",
          "doc": "Inputs from otelcol components to send traces to.",
          "required": false,
          "default": "[]"
        }
      ],
      "hasLabel": false,
      "exports": [],
      "blocks": [
        {
          "name": "sampler",
          "doc": "Define custom sampling on top of the base sampling fraction.",
          "required": false,
          "arguments": [],
          "blocks": [
            {
              "name": "jaeger_remote",
              "doc": "Retrieve sampling information via a Jaeger remote sampler.",
              "required": false,
              "arguments": [
                {
                  "name": "url",
                  "type": "string",
                  "doc": "URL to retrieve sampling strategies from.",
                  "required": false,
                  "default": "\"http://127.0.0.1:5778/sampling\""
                },
                {
                  "name": "max_operations",
                  "type": "number",
                  "doc": "Limit number of operations which can have custom sampling.",
                  "required": false,
                  "default": "256"
                },
                {
                  "name": "refresh_interval",
                  "type": "duration",
                  "doc": "Frequency to poll the URL for new sampling strategies.",
                  "required": false,
                  "default": "\"1m\""
                },
                {
                  "name": "Name",
                  "type": "Type",
                  "doc": "Description",
                  "required": false,
                  "default": "Default"
                },
                {
                  "name": "-------------------",
                  "type": "----------------",
                  "doc": "------------------------------------------------------------------",
                  "required": false,
                  "default": "---------"
                },
                {
                  "name": "names",
                  "type": "list(string)",
                  "doc": "DNS names to look up.",
                  "required": true,
                  "default": null
                },
                {
                  "name": "port",
                  "type": "number",
                  "doc": "Port to use for collecting metrics. Not used for SRV records.",
                  "required": false,
                  "default": "0"
                },
                {
                  "name": "refresh_interval",
                  "type": "duration",
                  "doc": "How often to query DNS for updates.",
                  "required": false,
                  "default": "\"30s\""
                },
                {
                  "name": "type",
                  "type": "string",
                  "doc": "Type of DNS record to query. Must be one of SRV, A, AAAA, or MX.",
                  "required": false,
                  "default": "\"SRV\""
                }
              ],
              "blocks": []
            }
          ]
        }
      ]
    }
  }
}